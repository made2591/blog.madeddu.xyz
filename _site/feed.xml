<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matteo Madeddu</title>
    <description></description>
    <link>made2591.github.io/</link>
    <atom:link href="made2591.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 29 Jan 2019 22:02:13 +0000</pubDate>
    <lastBuildDate>Tue, 29 Jan 2019 22:02:13 +0000</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>The Deutsch Algorithm</title>
        <description>&lt;h3 id=&quot;much-more-than-a-post-again&quot;&gt;Much more than a post (again)&lt;/h3&gt;
&lt;p&gt;What is the quantum theory? As said by &lt;a href=&quot;https://quantumexperience.ng.bluemix.net/&quot;&gt;quantumexperience&lt;/a&gt; official site by IBM, it’s &lt;em&gt;an elegant mathematical theory able to explain the counterintuitive behavior of subatomic particles, most notably the phenomenon of entanglement&lt;/em&gt;. In the late twentieth century it was discovered that quantum theory applies not only to atoms and molecules, but to bits and logic operations in a computer. This realization has been bringing about a revolution in the science and technology of information processing: I decided to write some notes to better explain, from a physics-agnostic computer scientist’s point of view XD, &lt;strong&gt;what I understood&lt;/strong&gt; - and it is certainly wrong - about Q until now and why I think it’s an amazing field for computer science. More on this story in &lt;a href=&quot;https://made2591.github.io/posts/quantum-computing&quot;&gt;my previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So - back to the origins - why am I writing this post? Because I recently came over my quantum notes again and YES, I’M CONTINUING THEM (clap clap clap), even if, unfortunately, I don’t have a lot of time to dedicate to it - you know, the always-valid excuse of life &lt;em&gt;I don’t have time&lt;/em&gt;.
This post is about a specific algorithm - one of the basic reasoning to be done about &lt;em&gt;quantum parallelism&lt;/em&gt; (more on this in a few lines): I’m gonna talk about the Deutsch Algorithm, the reason behind it, how it works and I will literally vomit what I collected (a sort of preview XD) in the last crazy Sunday of study as a mathematical demonstration of its component.&lt;/p&gt;

&lt;p&gt;But… before going into details, let’s make some reasoning over classical computation first.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/PHANF7S.jpg&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;agenda&quot;&gt;Agenda&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Classic computation: reversible and irreversible functions + some mentalist tricks to engage you&lt;/li&gt;
  &lt;li&gt;Toffoli classic gate: aka… a gate &lt;em&gt;to rule them aaaall&lt;/em&gt; 😂 + no other abuse of this sentence, I swear&lt;/li&gt;
  &lt;li&gt;Toffoli quantum gate: aka… what the hell is going on dude here!??!?! -&amp;gt; as &lt;a href=&quot;https://www.youtube.com/watch?v=9dcVOmEQzKA&amp;amp;feature=youtu.be&amp;amp;t=145&quot;&gt;Eminem said&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The Deutsch Algorithm: the basic fundation of quantum parallelism - fact and proof (what I got)&lt;/li&gt;
  &lt;li&gt;Conclusion: just some random thoughts about the topic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately, the first three sections are needed to go throught the demonstration of the Deutsch algorithm. At least, I tried to give a little bit of context to better understand the reasons behind the algorithm. Let’s start this journey and sorry if it will take some time :/&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#FF8C00; font-size: bold;&quot;&gt;EASTER EGG&lt;/span&gt;: And for the very first time, there’s an easter egg (kind of - at least) in the blog post!&lt;/p&gt;

&lt;h3 id=&quot;classic-computations&quot;&gt;Classic computations&lt;/h3&gt;
&lt;p&gt;A fundamental difference between classical and quantum circuits is that theclassical logic gates could be irreversible (for example &lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NAND&lt;/code&gt;), while the quantum logic gates are always unitary and therefore  reversible. On the other hand, it would be desirable for an alternative computation model to beable to express at least all computations that can be expressed with the classical model. So the first objective to talk about quantum computation is therefore to represent the classical computationsas unitary transformations, i.e. as quantum computations.&lt;/p&gt;

&lt;h4 id=&quot;reversible-vs-irreversible&quot;&gt;Reversible vs Irreversible&lt;/h4&gt;
&lt;p&gt;Since unitary transformations are invertible (i.e. reversible), the first step is to transform any irreversible classical computation into a reversible one. In order to operate in a reversible way it is necessary that the function to be evaluated is a bjection (i.e. &lt;a href=&quot;https://en.wikipedia.org/wiki/Injective_function&quot;&gt;injective&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Surjective_function&quot;&gt;surjective&lt;/a&gt;). In this case we can in fact unequivocally trace from each output to the value of the input that generated it, that is, operate in reverse. Any irreversible computation can be transformed into an equivalent reversible computation, making the corresponding function to be biunivocally evaluated.&lt;/p&gt;

&lt;p&gt;For example, given any function&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f : \{0, 1\}^{k} \mapsto \{0, 1\}^{m}&lt;/script&gt;

&lt;p&gt;it is possible to construct&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\widetilde{f} : \{0, 1\}^{k+m} \mapsto \{0, 1\}^{k+m}&lt;/script&gt;

&lt;p&gt;such that &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is biunivocal and calculates &lt;script type=&quot;math/tex&quot;&gt;(x,f(x))&lt;/script&gt; by acting on the input &lt;script type=&quot;math/tex&quot;&gt;(x,0^m)&lt;/script&gt;, where &lt;script type=&quot;math/tex&quot;&gt;0^m&lt;/script&gt; denotes &lt;script type=&quot;math/tex&quot;&gt;m&lt;/script&gt; bits initialized with value 0. Each biunivocal function:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f : \{0, 1\}^{n} \mapsto \{0, 1\}^{n}&lt;/script&gt;

&lt;p&gt;can be actually seen as a permutation on the &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; bits in input or, equivalently, on integers &lt;script type=&quot;math/tex&quot;&gt;0,1, ...,2^{n−1}&lt;/script&gt;. Accordingly, it describes a classical reversible computation. Take a moment to reflect on this - &lt;em&gt;mentalist trick n°1&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;toffoli-gate&quot;&gt;Toffoli gate&lt;/h4&gt;
&lt;p&gt;Any irreversible classical computation can be transformed into an equivalent &lt;em&gt;but reversible&lt;/em&gt; computation using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Toffoli_gate&quot;&gt;Toffoli gate&lt;/a&gt;. This is a classic reversible operation, represented by the circuit shown below, which operates on three input bits: two are &lt;em&gt;control bits&lt;/em&gt; and the third is the target bit that is exchanged if the control bits are both 1, as show in the truth table.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/j4DI00J.png&quot; alt=&quot;perceptron&quot; style=&quot;width: 40%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;In&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Out&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;a&lt;/td&gt;
      &lt;td&gt;b&lt;/td&gt;
      &lt;td&gt;c&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;a’&lt;/td&gt;
      &lt;td&gt;b’&lt;/td&gt;
      &lt;td&gt;c’&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The reversibility of this operation is easily verified by observing that by applying the Toffoli gate twice in a row the same starting result is obtained (two value are ported as they are, the third one is a &lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt; that is reversible by design thus is verified):&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(a, b, c) \rightarrow{} (a, b, c \oplus ab) \rightarrow{} (a, b, c)&lt;/script&gt;

&lt;p&gt;So the operation itself coincides with its inverse. It is equally easy to verify that the Toffoli gate represents the permutation &lt;script type=&quot;math/tex&quot;&gt;\pi = (67)&lt;/script&gt; on integers &lt;script type=&quot;math/tex&quot;&gt;0, 1, \ldots , 7&lt;/script&gt; (exchanges the two sequences &lt;script type=&quot;math/tex&quot;&gt;110&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;111&lt;/script&gt;).&lt;/p&gt;

&lt;h4 id=&quot;nand-and-fanout-operation&quot;&gt;NAND and FANOUT operation&lt;/h4&gt;
&lt;p&gt;Toffoli’s gate is universal for the classic reversible computations, that is, every classical computation can be built in a reversible way through the Toffoli gate. This result follows from the universality of the operations of &lt;code class=&quot;highlighter-rouge&quot;&gt;NAND&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;FANOUT&lt;/code&gt; (the operation of copying a classic bit) for the classical computations and from the fact that both these operations can be expressed through the Toffoli circuit. In fact, by applying the operation with &lt;script type=&quot;math/tex&quot;&gt;c = 1&lt;/script&gt;, we obtain &lt;script type=&quot;math/tex&quot;&gt;a^{'} = a&lt;/script&gt;, &lt;script type=&quot;math/tex&quot;&gt;b^{'} = b&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;c^{'} = 1 \oplus ab = \neg ab&lt;/script&gt;, i.e. we obtained the simulation of &lt;code class=&quot;highlighter-rouge&quot;&gt;NAND&lt;/code&gt; and it is also a reversible operation because Toffoli port is. The reversible &lt;code class=&quot;highlighter-rouge&quot;&gt;FANOUT&lt;/code&gt; is instead obtained as shown in the picture above: by applying the Toffoli gate with &lt;script type=&quot;math/tex&quot;&gt;a = 1&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;c = 0&lt;/script&gt; the result is the copy of bit &lt;script type=&quot;math/tex&quot;&gt;b&lt;/script&gt; (remember that this copy operation is not possible for a qubit!!!).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/GKhUQmu.png&quot; alt=&quot;perceptron&quot; style=&quot;width: 30%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As for &lt;code class=&quot;highlighter-rouge&quot;&gt;NAND}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;FANOUT&lt;/code&gt; the construction of a reversible circuit for any classical operation &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; by means of the Toffoli port involves the use of some service bits in input (or &lt;em&gt;ancilla bits&lt;/em&gt;) and in output (or &lt;em&gt;garbage&lt;/em&gt;). After deleting these service bits, the resulting circuit performs the transformation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(x, y) \mapsto (x, y \oplus f(x))&lt;/script&gt;

&lt;p&gt;(where &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is the input of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; is the register intended to contain the output) and can be considered as the &lt;em&gt;standard reversible circuit&lt;/em&gt; for the evaluation of &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt;.&lt;/p&gt;

&lt;h4 id=&quot;classical-computations-on-quantum-circuits&quot;&gt;Classical computations on quantum circuits&lt;/h4&gt;
&lt;p&gt;As already observed, a classical reversible computation corresponds to a permutation on the sequences of the input bits. This guarantees the possibility of constructing a complex unitary matrix that represents it.&lt;/p&gt;

&lt;p&gt;In particular, the Toffoli gate can be implemented as quantum circuit. In this case the input is given by three qubits and the transformation, analogous to the classical case, consists in the exchange of the third qubit if the first two are &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt;. For example the quantum Toffoli gate applied to the state &lt;script type=&quot;math/tex&quot;&gt;\vert 110\rangle&lt;/script&gt; produces the state &lt;script type=&quot;math/tex&quot;&gt;\vert 111\rangle&lt;/script&gt;. Thus…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The quantum Toffoli port can then be used to simulate all the classical computations on a quantum computer, ensuring that a quantum computer is able to perform any computable computation on a classic computer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;…. BOOOOOM&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/oOPahkD.gif&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s go ahead by exploring how a quantum Toffoli gate can be used.&lt;/p&gt;

&lt;h4 id=&quot;probabilistic-computations-on-quantum-circuits&quot;&gt;Probabilistic computations on quantum circuits&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Randomized&lt;/em&gt; algorithms are algorithms that are executed using a random number generator (the launch of a coin) to decide one of the possible branches of execution. The first randomized algorithm was introduced by Solovay and Strassen in the 1970s to determine whether a number is prime or not. The algorithm produces a correct answer only with a certain probability. This probability can be increased by repeating the execution for an appropriate number of times.&lt;/p&gt;

&lt;p&gt;These algorithms can also be efficiently simulated by quantum circuits. In fact, to simulate a random bit it is sufficient to prepare a qubit in the &lt;script type=&quot;math/tex&quot;&gt;\vert 0\rangle&lt;/script&gt; state and then apply the Hadamard port. You will get the status &lt;script type=&quot;math/tex&quot;&gt;\frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}}&lt;/script&gt; that measured will give &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; each with probability &lt;script type=&quot;math/tex&quot;&gt;1/2&lt;/script&gt;. It should also be noted that in this way a &lt;em&gt;really random number&lt;/em&gt; is obtained, &lt;em&gt;something that a classic computer can not do&lt;/em&gt;… (yes, this should let you think).&lt;/p&gt;

&lt;h3 id=&quot;quantum-parallelism&quot;&gt;Quantum parallelism&lt;/h3&gt;
&lt;p&gt;On a quantum computer, a function &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; can be evaluated on different values of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; at the same time. This is known as &lt;em&gt;quantum parallelism&lt;/em&gt; and is a fundamental characteristic of quantum circuits. Consider a boolean function of the form:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f : \{0, 1\} \mapsto \{0, 1\}&lt;/script&gt;

&lt;p&gt;To calculate &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; by means of a quantum computation the transformation &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; must be defined as a unit transformation &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt;. As seen previously, this can be done by applying on the input state &lt;script type=&quot;math/tex&quot;&gt;\vert x,y\rangle&lt;/script&gt;, let’s say our data register&lt;sup id=&quot;fnref:dataregister&quot;&gt;&lt;a href=&quot;#fn:dataregister&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, an appropriate sequence of quantum logic gates (which we will indicate with a black box called &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt;) that transform &lt;script type=&quot;math/tex&quot;&gt;\vert x,y\rangle&lt;/script&gt; into the state &lt;script type=&quot;math/tex&quot;&gt;\vert x,y \oplus f(x)\rangle&lt;/script&gt;, called the target register. If &lt;script type=&quot;math/tex&quot;&gt;y = 0&lt;/script&gt; then the final state of the second qubit will accurately contain the value of &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt;, because of the &lt;script type=&quot;math/tex&quot;&gt;\oplus&lt;/script&gt;’s (&lt;code class=&quot;highlighter-rouge&quot;&gt;XOR&lt;/code&gt;) true table.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/Wkjxsh1.png&quot; alt=&quot;perceptron&quot; style=&quot;width: 60%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the circuit in shown above, the input is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}} \otimes \vert 0\rangle&lt;/script&gt;

&lt;p&gt;that is&lt;sup id=&quot;fnref:recall&quot;&gt;&lt;a href=&quot;#fn:recall&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, the value of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is an overlap of &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; that can be obtained by applying Hadamard to &lt;script type=&quot;math/tex&quot;&gt;\vert 0\rangle&lt;/script&gt;. Applying &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; to this data register is obtained&lt;sup id=&quot;fnref:expl1&quot;&gt;&lt;a href=&quot;#fn:expl1&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\vert 0, f(0)\rangle + \vert 1, f(1)\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;This state contains information both on the value &lt;script type=&quot;math/tex&quot;&gt;f(0)&lt;/script&gt; and on the value &lt;script type=&quot;math/tex&quot;&gt;f(1)&lt;/script&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We just evaluated  &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; simultaneously on &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; = 0 and &lt;script type=&quot;math/tex&quot;&gt;x = 1&lt;/script&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This type of parallelism is deeply different from the classical one where multiple circuits (each of which calculates &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; for a single value of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;) are executed simultaneously.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/yksZid5.jpg&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Please take some time to reflect on this if you are not convinced before going ahead - &lt;em&gt;mentalist trick n°2&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;one-step-more&quot;&gt;One step more&lt;/h4&gt;
&lt;p&gt;This procedure can be generalized to calculate functions on an arbitrary number of bits using a generalization of the Hadamard gate known as the &lt;strong&gt;Walsh-Hadamard&lt;/strong&gt; transform. This operation consists of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; Hadamard ports acting in parallel on &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; qubits. For example, for &lt;script type=&quot;math/tex&quot;&gt;n = 2&lt;/script&gt;, the Walsh-Hadamard transform is indicated with &lt;script type=&quot;math/tex&quot;&gt;H^{\otimes 2} = H \otimes H&lt;/script&gt; and applied to two qubits prepared in the state &lt;script type=&quot;math/tex&quot;&gt;\vert 0\rangle&lt;/script&gt; gives as a result:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}} \otimes \frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}} = \frac{\vert 00\rangle + \vert 01\rangle + \vert 10\rangle + \vert 11\rangle}{2}&lt;/script&gt;

&lt;p&gt;In general, the result of &lt;script type=&quot;math/tex&quot;&gt;H^{\otimes n}&lt;/script&gt; applied to &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; qubits in the &lt;script type=&quot;math/tex&quot;&gt;\vert 0\rangle&lt;/script&gt; state is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{\sqrt{2^n}}\sum\limits_{x}\vert x\rangle&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; is the binary representation of the numbers from &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;2^n - 1&lt;/script&gt;. Thus…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Walsh-Hadamard transform produces an equiprobable overlap of all the states of the &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; qubits computational basis.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note: &lt;span style=&quot;color:#FF8C00; font-size: bold;&quot;&gt;to obtain an overlap of &lt;script type=&quot;math/tex&quot;&gt;2^n&lt;/script&gt; states only &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; logical ports are needed.&lt;/span&gt; We are getting closer…&lt;/p&gt;

&lt;p&gt;The parallel evaluation of a function &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt;, with input &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; bits and &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; bit as output, can therefore be performed by a circuit similar to last one shown before, with &lt;script type=&quot;math/tex&quot;&gt;n+1&lt;/script&gt; qubit in input prepared in the &lt;script type=&quot;math/tex&quot;&gt;\vert 0\rangle^{\otimes n}\vert 0\rangle&lt;/script&gt;. Then Hadamard applies to the first &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; qubits and then the &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; circuit is applied. The result will be:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{\sqrt{2}}\sum\limits_{x}\vert x\rangle\vert f(x)\rangle&lt;/script&gt;

&lt;h4 id=&quot;unfortunately&quot;&gt;Unfortunately…&lt;/h4&gt;
&lt;p&gt;Quantum parallelism is not directly usable in the sense that it is not possible to obtain all the values calculated with a single measurement: the measurement of the state above will give the value of &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; for a single value of &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;. To exploit the hidden information in this parallelism, we have to, somehow, make better use of the information contained in the overlap.&lt;/p&gt;

&lt;p&gt;For example, by exploiting in an appropriate manner the interference between the states in the overlap. By combining quantum parallelism with this property that comes from quantum mechanics, results like the one exemplified by &lt;em&gt;the Deutsch algorithm&lt;/em&gt; can be obtained. And FINALLY…&lt;/p&gt;

&lt;h3 id=&quot;the-deutsch-algorithm&quot;&gt;The Deutsch Algorithm&lt;/h3&gt;
&lt;p&gt;The Deutsch algorithm shows how, through the parallel evaluation of a function on all its inputs, global properties of the function can be determined, such as, for example, that of being a constant or balanced function&lt;sup id=&quot;fnref:expl2&quot;&gt;&lt;a href=&quot;#fn:expl2&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;. Using a classical algorithm, in the worst case we need to evaluate the function on at least &lt;script type=&quot;math/tex&quot;&gt;2^{n-1} + 1&lt;/script&gt; (am I wrong?) values in order to be able to establish with certainty whether &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is constant or balanced.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/54sZUra.png&quot; alt=&quot;perceptron&quot; style=&quot;width: 60%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The implementation of the Deutsch algorithm is shown in the quantum circuite above. The input of the circuit that calculates the function &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is now the qubits resulting from the application of Hadamard to the &lt;script type=&quot;math/tex&quot;&gt;\vert 0\rangle&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;\vert 1\rangle&lt;/script&gt; states. This input is therefore:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vert \psi_1\rangle = \vert x, y\rangle = \frac{\vert 0\rangle+\vert 1\rangle}{\sqrt{2}} \otimes \frac{\vert 0\rangle-\vert 1\rangle}{\sqrt{2}} = \frac{\vert 00\rangle - \vert 01\rangle + \vert 10\rangle - \vert 11\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;For simplicity, let’s mantain the two initial qbits separated. Let’s apply &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; to the state &lt;script type=&quot;math/tex&quot;&gt;\vert \psi_1\rangle&lt;/script&gt; where&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x = \frac{\vert 0\rangle+\vert 1\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;y = \frac{\vert 0\rangle-\vert 1\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;We already know that &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; doesn’t change &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; and map the quantum system (our quantum register) &lt;script type=&quot;math/tex&quot;&gt;\vert x, y\rangle&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;\vert x, y \oplus f(x)\rangle&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Thus, applying &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;\vert x, y\rangle&lt;/script&gt; means apply &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; to&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vert x\rangle \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;whatever &lt;script type=&quot;math/tex&quot;&gt;\vert x\rangle&lt;/script&gt; will be. The result of this application will be&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\vert x\rangle\vert y \oplus f(x)\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;\vert y \oplus f(x)\rangle&lt;/script&gt; - once we measure &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; by collapsing to value &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; or &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; - is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\vert 0 \oplus f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;Thus,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\vert x\rangle\vert y \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert 0 \oplus f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;Take a moment to understand this step before going ahead.&lt;/p&gt;

&lt;p&gt;Now, remember that &lt;script type=&quot;math/tex&quot;&gt;0 \oplus f(x) = f(x)&lt;/script&gt; because of the nature &lt;script type=&quot;math/tex&quot;&gt;\oplus&lt;/script&gt;, thus the result of &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; applied to &lt;script type=&quot;math/tex&quot;&gt;\vert \psi_1\rangle&lt;/script&gt; - always by keeping away &lt;script type=&quot;math/tex&quot;&gt;\vert x\rangle&lt;/script&gt; for a while - is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vert x\rangle\frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;Thus,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{\vert x\rangle\vert y \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert 0 \oplus f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;Since &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; doesn’t modify &lt;script type=&quot;math/tex&quot;&gt;\vert x\rangle&lt;/script&gt; we only need to evaluate &lt;script type=&quot;math/tex&quot;&gt;y \oplus f(x)&lt;/script&gt; - or &lt;script type=&quot;math/tex&quot;&gt;\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle&lt;/script&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If &lt;script type=&quot;math/tex&quot;&gt;f(x) = 0&lt;/script&gt; this is simply &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; - in fact:&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vert y \oplus f(x)\rangle = \frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}} = \frac{\vert 0\rangle - \vert 1 \oplus 0\rangle}{\sqrt{2}} = \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} = H\vert 1\rangle = y&lt;/script&gt;

&lt;p&gt;Realize that by replacing the value of &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; we obtain exactly &lt;script type=&quot;math/tex&quot;&gt;y&lt;/script&gt; that is our desiderata, thus&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vert x\rangle\frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert y\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;Take some moment to convince about this step.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Otherwise, if &lt;script type=&quot;math/tex&quot;&gt;f(x) = 1&lt;/script&gt; then the result is&lt;/li&gt;
&lt;/ul&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vert x\rangle\frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert 1\rangle - \vert 1 \oplus 1\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert 1\rangle - \vert 0\rangle}{\sqrt{2}} = \vert x\rangle\frac{-\vert y\rangle}{\sqrt{2}}&lt;/script&gt;

&lt;p&gt;Now, let’s keep a part &lt;script type=&quot;math/tex&quot;&gt;1/\sqrt{2}&lt;/script&gt;: we can rewrite&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vert x\rangle\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle), f(x) \in \{0, 1\}&lt;/script&gt;

&lt;p&gt;in&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(-1)^{f(x)}\vert x\rangle(\vert 0\rangle - \vert 1\rangle), f(x) \in \{0, 1\}&lt;/script&gt;

&lt;p&gt;&lt;span style=&quot;color:#FF8C00; font-size: bold;&quot;&gt;Note&lt;/span&gt;: if someone is able to convince me about this, please comment it below or feel free to contact me at &lt;a href=&quot;mailto:matteo.madeddu@gmail.com&quot;&gt;matteo.madeddu [at] gmail.com&lt;/a&gt; because I didn’t find a real good explanation to this. Anyway, let’s assume it’s true because of some trick (I have a theory, that is replacing &lt;script type=&quot;math/tex&quot;&gt;((-1)^{f(x)}&lt;/script&gt; with &lt;script type=&quot;math/tex&quot;&gt;(-f(x)^{f(x)}&lt;/script&gt;) over signs, and go ahead because the rest it seems &lt;em&gt;ok&lt;/em&gt; imho.&lt;/p&gt;

&lt;p&gt;Thus, by applying &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; to &lt;script type=&quot;math/tex&quot;&gt;\vert \psi_1\rangle&lt;/script&gt; we obtain a result &lt;script type=&quot;math/tex&quot;&gt;\vert \psi_2\rangle&lt;/script&gt; that varies over two possibilities&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(0) = f(1) \rightarrow{} \pm \left[\frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}} \otimes \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(0) \neq f(1) \rightarrow{} \pm \left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} \otimes \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]&lt;/script&gt;

&lt;p&gt;Note that in the second alternative, we have that &lt;script type=&quot;math/tex&quot;&gt;(-1)^{f(1)} = -(-1)^{f(0)}&lt;/script&gt;. Note also that &lt;script type=&quot;math/tex&quot;&gt;\vert \psi_1\rangle&lt;/script&gt; can be written as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{\sqrt{2}}\left(\vert 0\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} + \vert 1\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right)&lt;/script&gt;

&lt;p&gt;Thus &lt;script type=&quot;math/tex&quot;&gt;U_f&lt;/script&gt; applied to &lt;script type=&quot;math/tex&quot;&gt;\vert \psi_1\rangle&lt;/script&gt; can be written as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{\sqrt{2}}\left((-1)^{f(0)}\vert 0\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} +  (-1)^{f(1)}\vert 1\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right)&lt;/script&gt;

&lt;p&gt;or, equally, as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\frac{1}{\sqrt{2}}\left((-1)^{f(0)}\vert 0\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} -  (-1)^{f(0)}\vert 1\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right)&lt;/script&gt;

&lt;p&gt;(because in the second case or &lt;script type=&quot;math/tex&quot;&gt;(-1)^{f(1)} == -(-1)^{f(0)}&lt;/script&gt; since &lt;script type=&quot;math/tex&quot;&gt;f(0) \neq f(1)&lt;/script&gt;) or, even, as&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pm\frac{1}{\sqrt{2}}\left(\vert 0\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} + \vert 1\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right)&lt;/script&gt;

&lt;p&gt;that is&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pm\left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} \otimes \vert \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]&lt;/script&gt;

&lt;p&gt;Now we apply Hadamard to the first qubit and we obtain &lt;script type=&quot;math/tex&quot;&gt;\vert \psi_3\rangle&lt;/script&gt; which results in&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(0) = f(1) \rightarrow{} \pm\vert 0\rangle \left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(0) \neq f(1) \rightarrow{} \pm\vert 1\rangle \left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]&lt;/script&gt;

&lt;p&gt;At this point we observe that &lt;script type=&quot;math/tex&quot;&gt;f(0) \oplus f(1) = 0&lt;/script&gt; if &lt;script type=&quot;math/tex&quot;&gt;f(0) = f(1)&lt;/script&gt;, otherwise &lt;script type=&quot;math/tex&quot;&gt;f(0) \oplus f(1) = 1&lt;/script&gt;. We can therefore write the result in a more concise way&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\vert \psi_3\rangle = \pm \vert f(0) \oplus f(1)\rangle \left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]&lt;/script&gt;

&lt;p&gt;Through a measurement of the first qubit we can then determine with certainty (the probability associated with the first qubit is 1) the value of &lt;script type=&quot;math/tex&quot;&gt;f(0) \oplus f(1)&lt;/script&gt; and therefore if the function &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; is constant or balanced. To do this we had to evaluate &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt; only once.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;The Deutsch algorithm can be extended to Boolean functions on &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; bits. Let us consider a function &lt;script type=&quot;math/tex&quot;&gt;f:\{0,1\}^n \rightarrow{} \{0,1\}&lt;/script&gt; and suppose to know that &lt;script type=&quot;math/tex&quot;&gt;f&lt;/script&gt; can be either constant or balanced. The quantum algorithm of Deutsch-Jozsa allows us to establish it in one step. The quantum circuit that implements this algorithm is the same Deutsch algorithm described with input &lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt; of the function of &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt; qubits prepared in the &lt;script type=&quot;math/tex&quot;&gt;\vert 0\rangle&lt;/script&gt; state, which we will call the data register. The qubit target, intended to contain the result of &lt;script type=&quot;math/tex&quot;&gt;f(x)&lt;/script&gt;, is instead prepared in the &lt;script type=&quot;math/tex&quot;&gt;\vert 1\rangle&lt;/script&gt; state.&lt;/p&gt;

&lt;p&gt;To be continue…&lt;/p&gt;

&lt;p&gt;Thank you everybody for reading!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:dataregister&quot;&gt;
      &lt;p&gt;A quantum system of two qbits.&amp;nbsp;&lt;a href=&quot;#fnref:dataregister&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:recall&quot;&gt;
      &lt;p&gt;If this is not clear, recall the quantum register definition.&amp;nbsp;&lt;a href=&quot;#fnref:recall&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:expl1&quot;&gt;
      &lt;p&gt;I applied &lt;script type=&quot;math/tex&quot;&gt;y \oplus f(x)&lt;/script&gt; and the distribution property.&amp;nbsp;&lt;a href=&quot;#fnref:expl1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:expl2&quot;&gt;
      &lt;p&gt;That is, it takes value &lt;script type=&quot;math/tex&quot;&gt;0&lt;/script&gt; on exactly half of the inputs and value &lt;script type=&quot;math/tex&quot;&gt;1&lt;/script&gt; on the remaining half.&amp;nbsp;&lt;a href=&quot;#fnref:expl2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 23 Jan 2019 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/deutsch-algorithm</link>
        <guid isPermaLink="true">made2591.github.io/posts/deutsch-algorithm</guid>
        
        <category>theory</category>
        
        <category>quantum</category>
        
        <category>parallelism</category>
        
        <category>q</category>
        
        <category>informative</category>
        
        <category>ibm</category>
        
        <category>deutsch</category>
        
        <category>algorithm</category>
        
        
      </item>
    
      <item>
        <title>A Golang Turing machine library</title>
        <description>&lt;h3 id=&quot;preamble&quot;&gt;Preamble&lt;/h3&gt;
&lt;p&gt;In 1962, Hungarian mathematician Tibor Radó introduced the Busy Beaver competition for Turing machines: in a class of machines, find one which halts after the greatest number of steps when started on the empty input. Even if it could seem trivial, the Busy Beaver competition has implications in computability theory, the halting problem, and complexity theory.&lt;/p&gt;

&lt;p&gt;I decided to use GoLang to implement a Turing machine library and accomplish three goals: first, having a Turing Machine model to play with for learning purpose; second, learning how to use interfaces and the factory pattern, other then testing package to test my code and let it be more flexible for future enhancement (at least I hope!); third, implement some Busy Beaver setup and verify that the model works with well known executions. If you want to discover more about Golang, 60’s math games and beavers, go ahead with reading :D!&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/RuYp5Y1.png&quot; style=&quot;width: 70%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;theory-first&quot;&gt;Theory first&lt;/h3&gt;
&lt;p&gt;Before starting, let’s define a Turing machine. A Turing machine is a mathematical model of computation that defines an abstract machine which manipulates symbols on a strip of tape according to a list of rules. Formally, we can image a infinite tape of 0 with a pointer (identified by square bracket) to one specific zero,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;... 0 0 0 0 0 [0] 0 0 0 0 0  ...&lt;/script&gt;

&lt;p&gt;a set of states identified by letters (or numbers),&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;{A, B, C}&lt;/script&gt;

&lt;p&gt;and a list of transactions, like the one&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(A, 0, B, 1, R);&lt;/script&gt;

&lt;p&gt;where a single transaction like &lt;em&gt;(A, 0, B, 1, R)&lt;/em&gt; has to been read as&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Given a Turing machine in state A with the pointer over a 0, write 1, evolve to state B and move the pointer by one position in right direction over the tape&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The pointer can only be moved by one position at time, left, right, or stay where it is. Everything’s clear?&lt;/p&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;To implement my Turing machine, I choose Golang as language and, to be more flexible, I coded by using the factory pattern. What is a factory pattern?&lt;/p&gt;

&lt;h4 id=&quot;the-factory-pattern&quot;&gt;The factory pattern&lt;/h4&gt;
&lt;p&gt;The factory pattern is a commonly used pattern in object oriented programming: the main reason you decide to use factory pattern is that it provide to thirds a way to better consume your struct. Instead of initializing instances using something like &lt;code class=&quot;highlighter-rouge&quot;&gt;myStruct := &amp;amp;MyStruct{}&lt;/code&gt;, a factory pattern provide a function signature that return your struct, by ensuring that everyone will supply the required attributes.&lt;/p&gt;

&lt;p&gt;Now, the cool thing is that in Golang functions &lt;em&gt;can return interfaces instead of structs&lt;/em&gt;: interfaces allow you to define behaviour without exposing internal implementation. As in other programming languages, you define method to be implemented inside an interface, and every struct that implement them is considered &lt;em&gt;implementing&lt;/em&gt; the interface. This means we can make private structs, while only exposing the interface outside our package, and let user interact with the struct with the only available method inside.&lt;/p&gt;

&lt;h4 id=&quot;transactions&quot;&gt;Transactions&lt;/h4&gt;
&lt;p&gt;The first lines of the package &lt;code class=&quot;highlighter-rouge&quot;&gt;Transaction&lt;/code&gt; look like the one shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACTIONS&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;R&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;N&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Transaction interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TuringMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Simulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCurrentState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetSymbolScanned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetNewState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetSymbolWritten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetMoveTape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// transaction struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbolScanned&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbolWritten&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveTape&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;state.State&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;symbol.Symbol&lt;/code&gt; refer respectively to the state, symbol packages and the State, Symbol interfaces defined inside them. The &lt;code class=&quot;highlighter-rouge&quot;&gt;Transaction&lt;/code&gt; interface defines which methods have to be exposed outside: the &lt;code class=&quot;highlighter-rouge&quot;&gt;transaction&lt;/code&gt; struct implements the Transaction interface. Let’s have a look at a couple of methods after that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;c&quot;&gt;// NewTransaction() Create a new Transaction with given&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// currentState, symbolScanned, symbolWritten and moveTape action&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbolScanned&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbolWritten&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveTape&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbolScanned&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbolScanned&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbolWritten&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbolWritten&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveTape&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveTape&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;NewTransaction(...)&lt;/code&gt; functions solve the problem of exposing the &lt;code class=&quot;highlighter-rouge&quot;&gt;transaction&lt;/code&gt; struct, by return a pointer to a struct as the Transaction interface: in fact, since the transaction struct is private we wouldn’t be able to interfact with it. That’s the reason the signature actually returns an interface, that is exposed: this is possible because the pointers can also implement interfaces.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Validate(m TuringMachine) Validate the transaction t with respect&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// to the TuringMachine m. A Transaction to be considered valid&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// need to be defined with a valid ACTIONS, the current state of the&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// TuringMachine must be equal to the state in which the transaction&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// is activated and the head of the TuringMachine must point to the&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// the same symbol scanned by the transaction. If all of this three&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// condition are verified, Validate(m TuringMachine) over t returns&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// true; it returns otherwise&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TuringMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// check if moveTape action is allowed&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ACTIONS&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EqualFold&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;moveTape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// check if actual state and scanned&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// symbol match with transaction&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetActualState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbolScanned&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetActualSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Validate&lt;/code&gt; function return true if a transaction is valid inside the Turing Machine m. A Transaction is valid if&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the action to be execute is a valid action identifier - it’s contained in the set of {“L”,”R”,”N”};&lt;/li&gt;
  &lt;li&gt;the current state of the Turing machine is equal to the state in which the transaction is activated;&lt;/li&gt;
  &lt;li&gt;the current head of the Turing machine points to the the same symbol scanned by the transaction;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similarly, you can implement &lt;code class=&quot;highlighter-rouge&quot;&gt;Symbol&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;State&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TuringMachine&lt;/code&gt;. Since Symbol and State packages are pretty easy to implement, let’s have a look the Turing machine definition and the execution method defined inside it.&lt;/p&gt;

&lt;h4 id=&quot;turing-machine&quot;&gt;Turing Machine&lt;/h4&gt;
&lt;p&gt;The Turing machine interface is defined as shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;c&quot;&gt;// TuringMachine interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TuringMachine&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetActualSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetActualState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MoveHeadPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// turingMachine struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turingMachine&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialStates&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finalStates&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transactions&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headPointer&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tape&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The key methods are &lt;code class=&quot;highlighter-rouge&quot;&gt;Run()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Step()&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Computed()&lt;/code&gt;. The Run() method is the simplest one: it runs the Step() function indefinitely until the Turing machine is computed completely.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turingMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A Turing machine is computed completely when it reaches a Final State, that is exactly what the Computed method said about our Turing machine.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turingMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Computed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsFinal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What about the Step() function?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;turingMachine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transactions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Validate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
			&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actualState&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For the execute part, you can have a look directly &lt;a href=&quot;https://github.com/made2591/go-tm/blob/master/turing/machine/machine.go&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;before-going-ahead&quot;&gt;Before going ahead&lt;/h3&gt;
&lt;p&gt;Testing! I learn how much you gain by testing your code playing with returns, default, pointers and indexes. Fortunately, build testing in Golang is quite easy, specially for simple functions like the one we shown before. For instance, the following test function is defined in a &lt;code class=&quot;highlighter-rouge&quot;&gt;symbol_test.go&lt;/code&gt; file - at the same level of the &lt;code class=&quot;highlighter-rouge&quot;&gt;symbol&lt;/code&gt;. Then&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestErase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// test erase a Symbol&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Erase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLANK&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
		&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Erase was incorrect, got: %d, want: %d.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BLANK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The testing functions are always named like &lt;code class=&quot;highlighter-rouge&quot;&gt;[Test]OriginalFunctionName&lt;/code&gt; and always accept only one parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;t *testing.T&lt;/code&gt;&lt;sup id=&quot;fnref:gotesting&quot;&gt;&lt;a href=&quot;#fn:gotesting&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. After that, from inside your project folder run this in a shell:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;go &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; ./...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Just prepend GOCACHE=off if you want to ignore caching. For the entire code, follow the &lt;a href=&quot;https://github.com/made2591/go-tm&quot;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now it’s time to build our Busy Beaver!!&lt;/p&gt;

&lt;h3 id=&quot;the-busy-beaver-competition&quot;&gt;The Busy Beaver competition&lt;/h3&gt;
&lt;p&gt;The Busy Beaver game consists of designing a halting, binary-alphabet Turing machine which writes the most &lt;em&gt;1&lt;/em&gt;s on the tape, using only a limited set of states. The rules for the 2-state game are as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The machine must have two states in addition to the halting state, and&lt;/li&gt;
  &lt;li&gt;The tape starts with 0s only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the player, you should conceive each state aiming for the maximum output of 1s on the tape while making sure the machine will halt eventually.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;n-th&lt;/em&gt; Busy Beaver, BB-n or simply “Busy Beaver” is the Turing machine that wins the n-state Busy Beaver Game. That is, it attains the maximum number of 1s among all other possible &lt;em&gt;n&lt;/em&gt;-state competing Turing Machines. The BB-2 Turing machine, for instance, achieves four &lt;em&gt;1&lt;/em&gt;s in six steps.&lt;/p&gt;

&lt;p&gt;You can easily build the BB-2 Beaver with 4 simple transaction plus 1 to move from the initial state to the “A” state.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;n&quot;&gt;tr0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewInitialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;N&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;R&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr2&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr3&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tr4&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewTransaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewFinalState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewSymbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;R&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Or, in a more user friendly format:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;21&lt;/th&gt;
      &lt;th&gt;22&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1R22&lt;/td&gt;
      &lt;td&gt;1L21&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1L22&lt;/td&gt;
      &lt;td&gt;1RFINAL&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;with an initial transaction from INITIAL to 21 with symbol 0 scanned, that does nothing and ports to state 21.
Let’s have a look at the evolution of the BB-2 Turing machine: first apply first transaction from INITIAL to A - it a sort of 0° Step that just change the state of the machine from INITIAL to 21, in such a way that the init tape looks like this&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;... 0 0 0 0 0 [0] 0 0 0 0 0 0 0 ...&lt;/script&gt;

&lt;h3 id=&quot;bb-2-beaver-execution&quot;&gt;BB-2 Beaver Execution&lt;/h3&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;1° Step&lt;/span&gt;: apply 1R22 transaction from A in 0 to B by writing 1, evolve in state B and move the cursor one step in the right direction&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;... 0 0 0 0 0 1 [0] 0 0 0 0 0 0 ...&lt;/script&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;2° Step&lt;/span&gt;: apply 1L21 transaction from B in 0 to A by writing 1, evolve in state A and move the cursor one step in the left direction&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;... 0 0 0 0 0 [1] 1 0 0 0 0 0 0 ...&lt;/script&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;3° Step&lt;/span&gt;: apply 1L22 transaction from A in 1 to B by writing 1 (this will result in an overwrite) and move the cursor one step in the left direction&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;... 0 0 0 0 [0] 1 1 0 0 0 0 0 0 ...&lt;/script&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;4° Step&lt;/span&gt;: apply 1L21 transaction from B in 0 to A by writing 1, evolve in state A and move the cursor one step in the left direction&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;... 0 0 0 [0] 1 1 1 0 0 0 0 0 0 ...&lt;/script&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;5° Step&lt;/span&gt;: apply 1R22 transaction from A in 0 to B by writing 1, evolve in state B and move the cursor one step in the right direction&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;... 0 0 0 1 [1] 1 1 0 0 0 0 0 0 ...&lt;/script&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;6° Step&lt;/span&gt;: finally, apply 1RFINAL transaction from B in 1 to FINAL by writing 1 (this will result in an overwrite), evolve in state B and move the cursor one step in the right direction&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;... 0 0 0 1 1 [1] 1 0 0 0 0 0 0 ...&lt;/script&gt;

&lt;p&gt;And the execution is finished! Four &lt;em&gt;1&lt;/em&gt;s, six steps, as promised!&lt;/p&gt;

&lt;p&gt;To be continued with Non Deterministic experiment…&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;For the most curious people, the original paper is Tibor Radó - &lt;em&gt;On Non-Computable Functions&lt;/em&gt; - &lt;a href=&quot;http://infoteorica.weebly.com/uploads/1/7/8/9/17895653/rado_on_non-computable_functions_bell_system_technical_journal_41_1962_pp._877-884.pdf&quot;&gt;here&lt;/a&gt;.
My Github repo with my implementation of the Busy Beaver game is available &lt;a href=&quot;https://github.com/made2591/go-tm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:gotesting&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/golang/go/blob/master/src/testing/testing.go&quot;&gt;Here&lt;/a&gt; the code&amp;nbsp;&lt;a href=&quot;#fnref:gotesting&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/golang-turing-machine</link>
        <guid isPermaLink="true">made2591.github.io/posts/golang-turing-machine</guid>
        
        <category>busy-beaver</category>
        
        <category>golang</category>
        
        <category>tibor</category>
        
        <category>computational</category>
        
        <category>theory</category>
        
        
      </item>
    
      <item>
        <title>Smart SPA Shower at home</title>
        <description>&lt;h3 id=&quot;preamble&quot;&gt;Preamble&lt;/h3&gt;
&lt;p&gt;I recently bought 4 small smart bulbs - the latest one you most probably decide to buy for your smart home 😂😂 I think it’s useless talk about what you can do: I will only focus on the important things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;They DON’T need an hub;&lt;/li&gt;
  &lt;li&gt;They support Alexa;&lt;/li&gt;
  &lt;li&gt;They support Google Assistant;&lt;/li&gt;
  &lt;li&gt;They support IFTTT;&lt;/li&gt;
  &lt;li&gt;There is an app, called Smart Life (&lt;a href=&quot;https://itunes.apple.com/us/app/smart-life-smart-living/id1115101477?mt=8&quot;&gt;iOS&lt;/a&gt;, &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.tuya.smartlife&amp;amp;hl=it&quot;&gt;Android&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But most important you can build your small SPA in your bathroom. If you are interested, go ahead!&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://www.centrobenesserebluspa.com/wp-content/uploads/2016/10/Panoramica_blu-spa.jpg&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And no, I will not transform your bathroom in the one shown in the picture: and no, that is not my bathroom unfortunately XD&lt;/p&gt;

&lt;h3 id=&quot;what-you-need&quot;&gt;What you need&lt;/h3&gt;
&lt;p&gt;Before going ahead with this, this is what you need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.de/gp/product/B07JMR3ZZ9/ref=ppx_yo_dt_b_asin_title_o00__o00_s00?ie=UTF8&amp;amp;psc=1&quot;&gt;Smart Alexa Lamp, Maxcio Wifi Smart Lamp, 7W E27 RGB + W Multicoloured and Dimmable Light, Remote Control via App, Compatible with Amazon Alexa and Google Home&lt;/a&gt; or any other product that use &lt;a href=&quot;http://tuya.com/&quot;&gt;Tuya&lt;/a&gt; cloud network to communicate. This is a required condition to work with &lt;a href=&quot;https://github.com/codetheweb/tuyapi&quot;&gt;tuyapi&lt;/a&gt;, a library for communicating with devices that use the Tuya cloud network. These devices are branded under many different names, but if your device works with the TuyaSmart app or port 6668 is open on your device chances are this library will work.&lt;/li&gt;
  &lt;li&gt;A Google Home (mini or not) - or my &lt;a href=&quot;https://gist.github.com/made2591/bca41ce13cced70bcb4c1712801726e3&quot;&gt;Gist&lt;/a&gt; with the colors mapped already for you (it should work, hopefully), otherwise you should reverse them manually by changing the color of the bulb with the Google Home app, running the server, getting the status of the lamp and save the data retrieved;&lt;/li&gt;
  &lt;li&gt;A Node.js server - who doens’t have one today?! just grub a raspberry or you can even use your laptop, it will definetly not be a 24/7 shower;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;setup-your-bulb&quot;&gt;Setup your bulb&lt;/h3&gt;
&lt;p&gt;Buy your bulb - pay attention to choose the correct socket for your lamp! - and setup your bulb with Smart Life. Then, sync your device with google home by asking him to “sync device”. I suggest to not setup rooms inside the app to avoid collision with rooms you can easily and more efficiently setup in your Google home app.&lt;/p&gt;

&lt;h3 id=&quot;the-id-key-and-ip&quot;&gt;The ID, KEY and IP&lt;/h3&gt;
&lt;p&gt;Before setup your node server, you need to discover some hidden information about your bulb. To retrieve needed ID and KEY of your bulb, just follow the instruction given &lt;a href=&quot;https://github.com/codetheweb/tuyapi/blob/master/docs/SETUP.md&quot;&gt;there&lt;/a&gt;. Everywhere it is suggested to fix an IP to your bulb.&lt;/p&gt;

&lt;h3 id=&quot;how-to-discover-the-colors&quot;&gt;How to discover the colors&lt;/h3&gt;
&lt;p&gt;I retrieved them by looking at the change of status after every click over the colors available in the Google Home application&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/3mGarQf.jpg&quot; style=&quot;width: 30%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The White color looks like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;white&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;fffafa000005ff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;00ff0000000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ffff500100ff00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ffff8003ff000000ff000000ff000000000000000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ffff5001ff0000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ffff0505ff000000ff00ffff00ff00ff0000ff000000&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The Color looks like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;colour&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;f8f8ff00f007ff&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;00ff0000000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ffff500100ff00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ffff8003ff000000ff000000ff000000000000000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ffff5001ff0000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ffff0505ff000000ff00ffff00ff00ff0000ff000000&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you need to discover yours, or want to experiment with voltage etc, you can do it by changing the &lt;a href=&quot;https://gist.github.com/made2591/bca41ce13cced70bcb4c1712801726e3&quot;&gt;JSON&lt;/a&gt; just in case.&lt;/p&gt;

&lt;h3 id=&quot;wrap-everything-in-a-loop&quot;&gt;Wrap everything in a loop&lt;/h3&gt;
&lt;p&gt;And now my stupid and bad written code to give your bathroom some colors in a loop of 3 seconds over the colors file provided above (&lt;a href=&quot;https://gist.github.com/made2591/bca41ce13cced70bcb4c1712801726e3&quot;&gt;Gist&lt;/a&gt; just in case)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TuyAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tuyapi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sleep'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TuyAPI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_BULB_ID&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_BULB_KEY&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR_IP_KEY&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;persistentConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'connected'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Connected to device.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'disconnected'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Disconnected from device.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Data from device:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'error'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Error: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;colours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./colours.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;'5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;colours&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyColour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;promiseSerial&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;funcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([]))&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;promiseSerial&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;funcs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;one-more-thing&quot;&gt;One more thing&lt;/h3&gt;
&lt;p&gt;To have a more relaxing experience you can even listen to &lt;a href=&quot;spotify:artist:3yQUKaHkSwdGxlk8LxN5iu&quot;&gt;The Relaxing Sounds of Swedish Nature&lt;/a&gt; with your Google Home or any other device you want!&lt;/p&gt;

&lt;p&gt;Thank you everybody for reading and have a good shower!!&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/smart-spa-shower</link>
        <guid isPermaLink="true">made2591.github.io/posts/smart-spa-shower</guid>
        
        <category>smart</category>
        
        <category>home</category>
        
        <category>reverse-eng</category>
        
        <category>life</category>
        
        <category>shower</category>
        
        <category>spa</category>
        
        <category>relax</category>
        
        
      </item>
    
      <item>
        <title>Machine Learning is useless</title>
        <description>&lt;h3 id=&quot;preamble&quot;&gt;Preamble&lt;/h3&gt;
&lt;p&gt;I would like to say “recently”, but actually is almost a few years I heard - and I’m still hearing a lot about Machine Learning and I didn’t want to believe it until now - believe me, I truly didn’t want to believe it - but yes here we are Machine Learning ufficially replace Big Data as buzzy word of the this past years, most problably will be still the word of the next year and I could not be more sad, frustrated, and worried about. Please haters don’t hate me, Internet don’t misunderstand me, companies don’t hire me, but first of all - please - don’t teach anything to your machines before finishing this post (!) 🤓 because they never learnt anything until now and they always felt good about so please - keep them simple operating system as they are, or at least talk with them before enrolled them in any advanced analytics course.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i2-prod.irishmirror.ie/incoming/article7633457.ece/ALTERNATES/s615b/Ben-Affleck-in-Batman-V-Superman-interview.jpg&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;The first question everyone in the world should first ask to himself before even going to Google searching for the latest super cool tool to solve his/her problem is &lt;em&gt;when a ML tool is good to solve a problem?&lt;/em&gt; I said it again, quoting the question because it’s crucial:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When a Machine Learning tool is good to solve a problem?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer is quite simple, but it becomes complicated because there are many considerations to do before having the right answer. To better provide an answer to this question, maybe it’s important to remember what Machine Learning is and what it is not.&lt;/p&gt;

&lt;h3 id=&quot;what-machine-learning-is-not&quot;&gt;What Machine Learning is not&lt;/h3&gt;
&lt;p&gt;Machine learning is not a one-step solution, like “I need to prepare a cake. I need flour eggs sugar and lemon cream. Done”. It can not solve all business problems or turns struggles into successes: I said it again just to be sure will be printed in the T-Shirt for the next year.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Machine Learning can not solve all business problems or turns struggles into successes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The 4 commandments.&lt;/p&gt;

&lt;h4 id=&quot;cons-number-1&quot;&gt;Cons number 1&lt;/h4&gt;
&lt;p&gt;This is to say that no, you can’t go to your customers - internal or external, it doens’t matter - and convince them with sentence like “I can solve your problem with Machine Learning” because the answer is “No, you can’t” and if you’re now worried because you think you’re not smart enough / prepared enough / young enough / Batman enough to do it then again my opinion is “No, you are not Batman enough for sure, and this is not your fault but please DON’T spread Machine Learning religion more than what has already been done by government, taxi-driver and even icecream-seller”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://fsmedia.imgix.net/96/0b/cb/fe/bf2f/4d5a/b561/767528276171/batman-the-dark-knight.jpeg?rect=0%2C0%2C1280%2C640&amp;amp;dpr=2&amp;amp;auto=format%2Ccompress&amp;amp;w=650&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cons-number-2&quot;&gt;Cons number 2&lt;/h4&gt;
&lt;p&gt;Machine Learning is not a tool to increase customer satisfaction - yes, I know you’re thinking about beautifull recommendation system to provide insights and bring your customer to spend 200$ dollars on services / product / whatever you sell because no, machine learning will not provide more money to spend to your customer so most probably no, you will not increase your revenue - like magically transform milions in billions because you now know from your past that you wasted a lot of money in doing / producing / party-rocking / whatever - whatever. Unfortunately, you and your customer will remain poor as you are right now.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://d3olfrdxinh85x.cloudfront.net/wp-content/uploads/5-tips-for-communicating-with-unhappy-customers.jpg&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cons-number-3&quot;&gt;Cons number 3&lt;/h4&gt;
&lt;p&gt;If a problem require identify causality, the Machine Learning probably won’t be a good solution: what I mean with causality? Sorry, wrong question. Why? Well it’s super simple, just think about it for a second before going ahead. The answer is - of course - because you really don’t know the causes of almost anything inside your business and if you’re thinking “No dude, I perfectly know!” then you are most probably making a lot of assumptions about things out of your perimeter - you probably don’t know - or even worst - you’re not interested in - about the problem you want to solve in the business you find yourself.&lt;/p&gt;

&lt;p&gt;Why even worst? Because if something is out of your scope, is unlikely finding yourself jump into for any reasons, so he will remain out of your perimeters. The biggest your business is, the more is difficult to have a clear detailed big pictures of causes and consequences of everything and thus, taking / making the right assumption about something.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.studiarapido.it/wp-content/uploads/2018/01/la-fisica-secondo-aristotele.jpg&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cons-number-4&quot;&gt;Cons number 4&lt;/h4&gt;
&lt;p&gt;If there is not a lot of relevant data to fill a machine learning model, then it will not produce a valuable solution. This is one is pretty simple: how can you image to produce valuable information from not relevant data. I mean, it’s already the challenge of a lifetime produce valuable insights from cleaned-approved-by-NASA data! Don’t get me wrong, but relevant data are a must, otherwise skip without even investigating a machine learning solution: and please, don’t forget that even in the case ML is the right solution, the model built is no more valuable than the data you provide to it. Repeat it again:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The model built is no more valuable than the data you provide to it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ok then….what can machine learning do?&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://ih1.redbubble.net/image.217134661.9959/flat,1000x1000,075,f.jpg&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-machine-learning-can-do&quot;&gt;What Machine Learning can do&lt;/h3&gt;
&lt;p&gt;If you follow AWS/Google/Microsoft/YourFamilyDoctor guidance, they all will agree is saying that &lt;em&gt;It opens doors to innovation, true collaboration and can help applications in providing smarter solutions.&lt;/em&gt; - and no, I will not quote this kinda &lt;code class=&quot;highlighter-rouge&quot;&gt;supermarket sentence&lt;/code&gt;. Yes, but then…what can we say about Machine Learning before going for some insights? Because, as far as we all know there are many &lt;em&gt;general problems&lt;/em&gt; (more on that later) solved by people around world companies, but only a portion of these companies succed in taking advantage of machine learning models.&lt;/p&gt;

&lt;p&gt;Machine Learning is a tool that can provide you solution for solving persistent business problems: ok, fair enough in the end, because this is the same approach we use for automation. You don’t automate something that has to be done only once: ok maybe we both do, but it’s only because we have a problem, OK?!&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://www.imgcinemas.it/wp-content/uploads/2018/06/nicage.jpg&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;when&quot;&gt;When&lt;/h4&gt;
&lt;p&gt;Starting from that, let’s do a bullet list when a Machine Learning tool is good to solve a problem - our initial question.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If the problem you want to solve is persistent - already discussed;&lt;/li&gt;
  &lt;li&gt;If the team that aimed to solve the problem has persistent problem (first evaluate challenges they need to face and starting from the solution they want to put in place to solve the problem, evaluate the pro and cons);&lt;/li&gt;
  &lt;li&gt;If the solution needs to scale;&lt;/li&gt;
  &lt;li&gt;If the problem requires personalization in order to be solved;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how&quot;&gt;How&lt;/h4&gt;
&lt;p&gt;Still, it’s identify if your problem and team fit these points and, even if you are able to, then you should start worring about what does a successfull ML solution require to be applied.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;People: there are several skillsets that are necesserally to have in order to address correctly ML solvable problems. These are Machine Learning Scientist, Applied Scientist, Data Scientist, Data Engineers, Software Engineers, Program Managers and Techincal Program Managers only to name a few of them;&lt;/li&gt;
  &lt;li&gt;Time: thinking an ML solution, building it, testing in production and evaluate it along the way it’s a super time consuming activity. This can take weeks, months and possibly even years depending on the problems. And this imply taking in consideration human factors, discussions, alignment, etc.&lt;/li&gt;
  &lt;li&gt;Money: there are cost not only for infrastructure, but also in term of right skillset, technologies to be learnt, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;not-only-data-the-six-questions&quot;&gt;Not only Data: the Six Questions&lt;/h3&gt;
&lt;p&gt;Much of the data are useless, we all now about this. The problem is that even the ML model results are often hard to understand, and if they seems easy to understand they still could be wrong. Machine Learning cannot help you identify team who can provide data, team that can clean them correctly or team that can correlate dataset with problems. More in general there are a few questions you should first ask to everyone who want to use ML inside your company, before going for an ML solution to solve a business problem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;What are the made assumptions?&lt;/strong&gt;&lt;/span&gt; Ask detailed explanation about assumptions on data used and algorithm used, to identify critical blocker for your ML solution to perform well.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;What is your learning target?&lt;/strong&gt;&lt;/span&gt; The learning target of an algorithm is namely the value that should be output or the hypthesis. If you show add for a particular customer, it will buy the product? Hypthesis testing over huge amount of data it’s the basis for ML success.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;What type of ML problem is it?&lt;/strong&gt;&lt;/span&gt; There are many kind of problems already solved and identify similar problems can arise good discussion points.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;Why did you choose this algorithm?&lt;/strong&gt;&lt;/span&gt; Ask whoever decided to do something why it was decided to do it like that, which is the ratio behind is key. There could be a baseline in literature to have comparison, etc.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;How will you evaluate the model performance?&lt;/strong&gt;&lt;/span&gt; Depending on the business problem, performance of the Machine Learning problem can be evaluated and is useful for every team know a priori how they will evaluate results.&lt;/li&gt;
  &lt;li&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;How confindent are you that can you can generalize result?&lt;/strong&gt;&lt;/span&gt; If the ML will work on specific dataset, maybe is not so a good solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://www.sciencealert.com/images/2018-03/processed/666_web_600.jpg&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;scientist&quot;&gt;Scientist&lt;/h3&gt;
&lt;p&gt;It is important to understand that contribute to - and open source even - new algorithms can be a main driver to scientist to apply for or even only stay in particular company. The collaboration opportunity with open source comunity create best solutions. Since Machine Learning grows fast, another crucial aspect is that building good ML models require scientists that constatly learn and pick up latest trends in ML. I will quote this because it’s CRUCIAL&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Another crucial aspect is that building good ML models require scientists that constatly learn and pick up latest trends in ML&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Scientists should have access to relevant literature, and the opportunities to attend relevant techtalks, conferences and workshops.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Understand your process and your business internally is mandatory. Figure out if you can correlate data you have with the problem you want to solve is mandatory. Remember also that no ML model will help you in doing this.&lt;/p&gt;

&lt;p&gt;Thank you a lot Lauren Thomas for your speech.&lt;/p&gt;

&lt;p&gt;Thank you everybody for reading!&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Dec 2018 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/machine-learning</link>
        <guid isPermaLink="true">made2591.github.io/posts/machine-learning</guid>
        
        <category>theory</category>
        
        <category>ml</category>
        
        <category>fundamentals</category>
        
        <category>approach</category>
        
        <category>work</category>
        
        <category>thoughts</category>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>My first UniKernel image for sequence prediction</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Predicting the next item of a sequence over a finite alphabet has important applications in many domains. Since I always wanted to implemented something like that, while I was looking for an interesting approach I found this interesting idea based on tree. And you don’t deal with trees since a lot, be prepared because as usual it seams simple, but it not. Moreover, since I like Golang and I always wanted to try &lt;a href=&quot;https://github.com/solo-io/unik&quot;&gt;UniK&lt;/a&gt;, I decided to implement my version of the CPT using Golang and use this exercise as a source to build my first unikernel image.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;img src=&quot;https://i.imgur.com/fBN2q8z.png&quot; alt=&quot;golang&quot; style=&quot;width: 28%; marker-top: -10px;&quot; /&gt;
    &lt;img src=&quot;https://i.imgur.com/c7wzYDI.png&quot; alt=&quot;sequenceprediction&quot; style=&quot;width: 25%; marker-top: -10px; margin-left:15px&quot; /&gt;
    &lt;img src=&quot;https://i.imgur.com/suaVhnM.png&quot; alt=&quot;unik&quot; style=&quot;width: 20%; marker-top: -10px;&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;The entire code is available in the Github repo &lt;a href=&quot;https://github.com/made2591/go-cpt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;too-much-all-together&quot;&gt;Too much all together&lt;/h4&gt;
&lt;p&gt;I knew just a little bit of Golang, almost anything about the algorithm and nothing at all about unik. Let’s start from the algorithm.&lt;/p&gt;

&lt;h4 id=&quot;compact-prediction-tree&quot;&gt;Compact Prediction Tree&lt;/h4&gt;
&lt;p&gt;A &lt;strong&gt;CPT&lt;/strong&gt; (&lt;em&gt;C&lt;/em&gt;ompact &lt;em&gt;P&lt;/em&gt;rediction &lt;em&gt;T&lt;/em&gt;ree) losslessly compress the training data so that all relevant information is available for each prediction. Nice. The approach originally proposed&lt;sup id=&quot;fnref:op&quot;&gt;&lt;a href=&quot;#fn:op&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; by the T. Gueniche and P. F. Viger is incremental, offers a low time complexity for its training phase and it is easily adaptable for different applications and contexts. The performance of &lt;strong&gt;CPT&lt;/strong&gt; with state of the art techniques, namely PPM (&lt;em&gt;P&lt;/em&gt;rediction by &lt;em&gt;P&lt;/em&gt;artial &lt;em&gt;M&lt;/em&gt;atching), DG (&lt;em&gt;D&lt;/em&gt;ependency &lt;em&gt;G&lt;/em&gt;raph) and *all-K-th-order Markov chain. The results show that &lt;strong&gt;CPT&lt;/strong&gt; yield higher accuracy on most datasets (up to 12% more than the second best approach), has better training time than DG and PPM, and is considerably smaller than all-K-th-Order Markov.&lt;/p&gt;

&lt;h4 id=&quot;the-structure&quot;&gt;The structure&lt;/h4&gt;
&lt;p&gt;The entire code is based on two foundamental structure: a trie&lt;sup id=&quot;fnref:trie&quot;&gt;&lt;a href=&quot;#fn:trie&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;PredictionTree&lt;/code&gt; (&lt;a href=&quot;https://github.com/made2591/go-cpt/blob/master/model/predictionTree/PredictionTree.go&quot;&gt;code&lt;/a&gt; of the package) and n &lt;code class=&quot;highlighter-rouge&quot;&gt;InvertedIndexTable&lt;/code&gt; (&lt;a href=&quot;https://github.com/made2591/go-cpt/blob/master/model/invertedIndexTable/InvertedIndexTable.go&quot;&gt;code&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;prediction-tree&quot;&gt;Prediction Tree&lt;/h4&gt;
&lt;p&gt;A Prediction Tree is a struct composed by 3 element:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Item – the actual item stored in the tree, that in our case represent a 32bit int;&lt;/li&gt;
  &lt;li&gt;Children – the children of the tree, a slice of &lt;code class=&quot;highlighter-rouge&quot;&gt;PredictionTree&lt;/code&gt; (see the code);&lt;/li&gt;
  &lt;li&gt;Parent – A reference to the Parent tree of the tree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the reason a Prediction Tree is basically a trie data structure which compresses the entire training data into the form of a tree. Let’s say you have 4 difference sequence that contains a set of symbol predefined, like the one below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[A, C, F, E]&lt;/li&gt;
  &lt;li&gt;[A, C, B]&lt;/li&gt;
  &lt;li&gt;[F, D, A]&lt;/li&gt;
  &lt;li&gt;[F, E, D]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, the respective Prediction Tree will be like the one below:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/N8FKLFq.png&quot; alt=&quot;perceptron&quot; style=&quot;width: 30%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;inverted-index-table&quot;&gt;Inverted Index Table&lt;/h4&gt;
&lt;p&gt;The Inverted Index Table maintain a reference for each symbol to respective sequences it belongs to. Let’s say you have 4 difference sequence that contains a set of symbol predefined, like the one below:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[A, C, F, E]&lt;/li&gt;
  &lt;li&gt;[A, C, B]&lt;/li&gt;
  &lt;li&gt;[F, D, A]&lt;/li&gt;
  &lt;li&gt;[F, E, D, C]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then, the respective Inverted Index Table will be like the one below:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;seq_1&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;seq_2&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;seq_3&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;seq_4&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;D&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;E&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;F&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In the code a list of sequence references is maintained instead of a table.&lt;/p&gt;

&lt;p&gt;#### Training (build the structs)
The training step consists in fullfill the structs by scanning a list of training sequences (list of list of symbols).&lt;/p&gt;

&lt;h4 id=&quot;testing-prediction&quot;&gt;Testing (prediction)&lt;/h4&gt;
&lt;p&gt;The prediction step involves making predictions for each testing sequence in an iterative manner. For a single row, the sequences similar to that row are found thanks to the Inverted Index Table. The consequent of the similar sequences are isolated and maintained in a dictionary with their scores. In the end, this dictionary is used to return the item with the highest score as the final prediction.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first step consists in finding the sequences &lt;em&gt;similar&lt;/em&gt; to the target sequence [A,C]. These similar sequences are identified by finding the unique items in the target sequence, finding the set of sequence IDs in which a particular unique item is present and then, taking an intersection of the sets of all unique items. So the sequences in which A is present are the 1 and 2. C also is present in 1, 2 and 4. So the sequences somehow similar to [A,C] - our target sequence - is the intersection of set [1,2] and [1,2,4], thus [1,2] - or [A, C, F, E] and [A, C, B];&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second step consists in finding the &lt;em&gt;consequent&lt;/em&gt; of each similar sequence to the target sequence - still [A,C]. For each similar sequence, consequent is defined as the sub-sequence after the last occurrence of the last item of the target sequence in the similar sequence, without the items present in the target sequence. As we said the similar sequences are [1,2] - [A, C, F, E] and [A, C, B].&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[A, C, F, E]: the subsequence after last occurence of C is [F, E]. Both of them are not present in [A,C], thus the consequent of this similar sequence is [F, E]. If you encountered in this set element part of the original target sequence, remove them;
[A, C, B]: the subsequence after last occurence of C is [B]. Again, B is not present in [A,C], thus the consequent of this similar sequence is [B];&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The third step consists in adding scoring all the consequents of all the similar sequences for the target sequence in a dictionary along with their score. Let be the dictionary empty at the beginning - the score for the items in the Consequent [F, E] is calculated by following this rule: if the item is not present in the dictionary, then the score = 1 + (1 / number of similar sequences) + (1 / number of items currently in the countable dictionary + 1) * 0.001. Otherwise, score = the same multiplied by the oldscore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So for element E, i.e. the first item in the consequent of the first similar sentence, the score will be
score[F] = 1 + (1/3) + 1/(0+1) * 0.001 = 1.3343
score[E] = 1 + (1/3) + 1/(1+1) * 0.001 = 1.3338
score[B] = 1 + (1/3) + 1/(2+1) * 0.001 = 1.3336&lt;/p&gt;

&lt;p&gt;Finally, [A,C] the key is returned with the greatest value in the dictionary of scores as the prediction. In the case of the above example, F is returned as a sequence prediction.&lt;/p&gt;

&lt;h3 id=&quot;unikimage&quot;&gt;UniKImage&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;True, linux is monolithic, and I agree that microkernels are nicer… As has been noted (not only by me), the linux kernel is a minuscule part of a complete system: Full sources for linux currently runs to about 200kB compressed. And all of that source is portable, except for this tiny kernel that you can (probably: I did it) re-write totally from scratch in less than a year without having /any/ prior knowledge.&lt;/p&gt;

  &lt;p&gt;Linus Torvalds, 1992&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/solo-io/unik&quot;&gt;UniK&lt;/a&gt; is a tool for compiling application sources into unikernels (lightweight bootable disk images) and MicroVM rather than binaries. UniK runs and manages instances of compiled images across a variety of cloud providers as well as locally: you can utilize it with a simple docker-like command line interface, that let you make and build unikernels and MicroVM as easy as building containers. UniK is built to be easily extensible, allowing (and encouraging) adding support for unikernel/MicroVM compilers and cloud providers. &lt;a href=&quot;https://github.com/solo-io/unik/blob/master/docs/architecture.md&quot;&gt;here&lt;/a&gt; more details about the architecture.&lt;/p&gt;

&lt;h4 id=&quot;steps-to-build-image&quot;&gt;Steps to build image&lt;/h4&gt;
&lt;p&gt;To have the sequence prediction engine available as a bootable image, I used as said in the beginning. You can have a look at the repository on how to install everything is required. In the next paragraph I will provide someinsight you can find the original repository.&lt;/p&gt;

&lt;h5 id=&quot;install-and-configure-unik&quot;&gt;Install and configure UniK&lt;/h5&gt;
&lt;p&gt;Install unik by following instruction in official repository from &lt;a href=&quot;https://github.com/solo-io/unik/blob/master/docs/install.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git clone https://github.com/solo-io/unik.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;unik
make&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then follow configuration step &lt;a href=&quot;https://github.com/solo-io/unik/blob/master/docs/configure.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&quot;golang-server&quot;&gt;Golang server&lt;/h5&gt;
&lt;p&gt;Again, taken from unik repository. You have to ensure the project is cloned in $GOPATH, then:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go installed and your $GOPATH configured (see getting started with Go)&lt;/li&gt;
  &lt;li&gt;Your project should be located within your system’s $GOPATH (if you’re unfamiliar with Go and the $GOPATH convention, read more here)&lt;/li&gt;
  &lt;li&gt;There should be a main package in the root directory of your project&lt;/li&gt;
  &lt;li&gt;Godeps installed (run go get github.com/tools/godep once Go is installed)&lt;/li&gt;
  &lt;li&gt;Run GO15VENDOREXPERIMENT=1 godep save ./… from the root of your project.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will create a Godeps/Godeps.json file as well as place all dependencies of your project in the ./vendor directory. This will allow UniK to compile your application entirely using only the root directory of your project.&lt;/p&gt;

&lt;p&gt;Open a shell and run the daemon - then keep it running:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;unik daemon &lt;span class=&quot;nt&quot;&gt;--debug&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To build and run the image - remember to use godep to let unik include dependencies first!! - run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;unik build &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; go-cpt-image &lt;span class=&quot;nt&quot;&gt;--path&lt;/span&gt; ./ &lt;span class=&quot;nt&quot;&gt;--base&lt;/span&gt; rump &lt;span class=&quot;nt&quot;&gt;--language&lt;/span&gt; go &lt;span class=&quot;nt&quot;&gt;--provider&lt;/span&gt; virtualbox &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt;
unik run &lt;span class=&quot;nt&quot;&gt;--instanceName&lt;/span&gt; go-cpt-instance &lt;span class=&quot;nt&quot;&gt;--imageName&lt;/span&gt; go-cpt-image&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To retrieve the running instances:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;unik instances&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should get something like this:&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/made2591/go-cpt/blob/master/unik.png?raw=true&quot; alt=&quot;golang&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can see IP assigned to instances in the last column of the output. To see the logs of the running instances run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;unik logs &lt;span class=&quot;nt&quot;&gt;--instance&lt;/span&gt; go-cpt-instance&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What this image does is actually expose the different endpoint to initialize training and make prediction by rest api - &lt;code class=&quot;highlighter-rouge&quot;&gt;it's only a draft&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;A sample file are already uploaded into the upload folder: you can modify the &lt;code class=&quot;highlighter-rouge&quot;&gt;main.go&lt;/code&gt; root of the project to avoid cutting the training and testing set. Otherwise, to see the run you can both execute the code locally or&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;curl http://&amp;lt;YOUR_RUNNING_INSTANCES&amp;gt;:8080/initcpt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You should see predictions for the first 10 sequences :-)&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://github.com/made2591/go-cpt/blob/master/predictions.png?raw=true&quot; alt=&quot;golang&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Many thanks to &lt;a href=&quot;https://github.com/solo-io/unik/graphs/contributors&quot;&gt;UniK contributors&lt;/a&gt; for sure, to &lt;a href=&quot;https://github.com/NeerajSarwan&quot;&gt;NeerajSarwan&lt;/a&gt; for his work over CPT and all who want to contribute&lt;/p&gt;

&lt;p&gt;Thank you everybody for reading!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:op&quot;&gt;
      &lt;p&gt;The original paper is available at &lt;a href=&quot;https://www.researchgate.net/publication/263696690_Compact_Prediction_Tree_A_Lossless_Model_for_Accurate_Sequence_Prediction&quot;&gt;here&lt;/a&gt;.&amp;nbsp;&lt;a href=&quot;#fnref:op&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:trie&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot;&gt;Trie&lt;/a&gt; (Wikipedia).&amp;nbsp;&lt;a href=&quot;#fnref:trie&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/compact-prediction-tree</link>
        <guid isPermaLink="true">made2591.github.io/posts/compact-prediction-tree</guid>
        
        <category>coding</category>
        
        <category>unik</category>
        
        <category>cpt</category>
        
        <category>ml</category>
        
        <category>sequence</category>
        
        <category>prediction</category>
        
        
      </item>
    
      <item>
        <title>Migrations in modern companies: how to expect the unexpected from a real-life point of view</title>
        <description>&lt;h3 id=&quot;prelude&quot;&gt;Prelude&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Disclaimer&lt;/code&gt; this post contains references to real problems, addressed in a disuruptive and totally not informed way. Lot of employees were mistreated to have enough material to write this post. What you will read is played by professionals: dont’t try this in your Company.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/48kN2Tb.jpg&quot; alt=&quot;matrixbug&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-truth-about-companies&quot;&gt;The truth about companies&lt;/h4&gt;
&lt;p&gt;Today every company in this beautifull world suffers the same problem: the migration problem. Yes, I know you got it and you’re kind of thinking “what the fuck?! Am I NOT alone in this shit?!?!” and the answer is “Yes. You’re not. And most probably is the only good news, if it is”. Yeah, you correctly understood THAT’s The - Problem - (of) TODAY, but it was already yesterday and most probably - and unfortunately - will be even tomorrow. And, of course, this Problem - in memories of all employees became crazy for this, let call it simply The One from now on - doesn’t have a real solution. It’s not like choosing where you want to spend two weeks in the summer - maybe it should. Let’s investigate a little bit why 🧐&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/fI5kqqB.jpg&quot; alt=&quot;matrixbug&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;lets-go-somewhere-else&quot;&gt;Let’s go somewhere else&lt;/h4&gt;
&lt;p&gt;Ok I would say everybody lives this migration p sorry - The One. But migration of… what, exactly? Well, I work in IT but this time in a sense it doesn’t care too much: applications, of course, but sometimes even buildings, printers, desks. That is… funny, and weird, at the same time. It seems like a certain point both the tangible and intangible things inside the company they start feeling bad where they are. So let’s move. But… Why?!&lt;/p&gt;

&lt;p&gt;Yeah THAT’s a good question… you know what? Who really knows. There are many different-already-written-answers to this and so many books were sold. I imagine the process like a night in a pub between friends, someone just propose an idea, and then after a while you can see piece of things office moving around, new hardware suffering old age, old application suffering new weather inside fresh datacenters, and so on. It’s like the companies at certain point start to feel unconfortable in the place they are: and they migrate, like an herd of elephants that are bored by sun, looking for a place in the shade. Totally comprehensible, they have done with this place: it’s the time for a change.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/HLzG6d0.jpg&quot; alt=&quot;matrixbug&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;choose-the-destination&quot;&gt;Choose the destination&lt;/h4&gt;
&lt;p&gt;Where these applications go? From the experience I collected so far, I found the DEFINITIVE answer: it depends on the quarter. Sometimes is better moving to North, in that sort of old temple where everything is green and cheap (&lt;em&gt;really?&lt;/em&gt;  3,2,1, ready: fight), some other prefer exotical places. Actually, to answer this question we should first see from where these applications will take the plane, to find a common airport for them to move - more on this later. It’s funny ‘cause - again as in real life - it’s like looking for last minute flights, for somewhere you don’t know where, bringing with you you don’t know how much you will be able to, with someone that will come prepared and who will not, people wearing wrong hats considering the sun at destination, someone who will be enthusiast at the beginning, someone else who won’t, someone that since the very first night at the pub wasn’t, but comes out just 20 minutes before leaving by saying “can I come with you I broke up with my old application” - mmm? - etc.&lt;/p&gt;

&lt;p&gt;It seems funny, right 😃 ?! but you know it isn’t 😈, in reality it’s like an hurricane: that is, when you know it reached you, it’s always too late. Do you know that feeling when everyone around you have already booked the summer vacation, it’s still December and you feel like what the fuck I don’t even know yet if I will survive the Christmas? Perfect, that’s exactly the feeling and level of anxiety the companies share. Fortunately, the destination is green, relaxed and cool.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/8EfrjVv.jpg&quot; alt=&quot;matrixbug&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;tryining-fixing-the-unfixable&quot;&gt;Tryining fixing the unfixable&lt;/h4&gt;
&lt;p&gt;Once arrived, everybody starts looking for the best room. And there always someone complaining because the last year there was a view to the see, the sunset, the mountains, the fucking dolphins or whatever. Unfortunately you know it’s not a vacation, it’s permanent and the company moved: and it’s quite impossible stop an elephant as far as I know.
So in the company journey people start splitting between people that agree, people that disgree and people that misagree, i.e. people that agree, or disagree, by misunderstanding. Complicated to explain, but somehow (I guess) simple to imagine 😅&lt;/p&gt;

&lt;p&gt;So the company thought once arrived it would be only a matter of fixing the applications, but now it discovered it has to fix people inside. No ones excluded. The problem is no only more fixing the unfixable - because some piece were lost during movement and/or who really knows the reasons. The problem is making people agree, while the company has already started moving.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Instead of spending resources in finding out how to migrate the company, plan how to migrate people because applications are vanishing, instead people are not…. instead, they constitute the company itself 🙃&lt;/p&gt;

&lt;p&gt;Bye&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/app-migrations</link>
        <guid isPermaLink="true">made2591.github.io/posts/app-migrations</guid>
        
        <category>fundamentals</category>
        
        <category>approach</category>
        
        <category>work</category>
        
        <category>thoughts</category>
        
        <category>life</category>
        
        
      </item>
    
      <item>
        <title>ACT-R by John R. Anderson - Part III</title>
        <description>
</description>
        <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/act-r-part-III</link>
        <guid isPermaLink="true">made2591.github.io/posts/act-r-part-III</guid>
        
        <category>theory</category>
        
        <category>cognitive</category>
        
        <category>architecture</category>
        
        <category>reasoning</category>
        
        <category>knowledge</category>
        
        <category>representation</category>
        
        
      </item>
    
      <item>
        <title>How my Elman network learnt to count</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;This is actually a sort of back-to-the-future post because it’s related to something I completed one year ago: I built this Elman network and it learnt to count. What I shame, I forgot it, now it’s kind of its first birthday so let’s celebrate :D&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://static1.squarespace.com/static/550ca181e4b00ab6c2a10330/t/55afd73be4b0ba2638779743/1437587260614/boy-going-back-to-school.jpg?format=750w&quot; alt=&quot;matrixbug&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is Elman, the best in class in adding int32 numbers. For everybody who already knows what I will talk about (what?!), &lt;a href=&quot;https://github.com/made2591/go-perceptron-go&quot;&gt;here&lt;/a&gt;’s the Github repo. I’m sorry for the name, it’s still go-perceptron-go but that repo contains my GoLang ANN.&lt;/p&gt;

&lt;h3 id=&quot;lets-start-from&quot;&gt;Let’s start from&lt;/h3&gt;
&lt;p&gt;You were wondering what the f**k is an Elman network: to be honest, I didn’t understand exactly but &lt;a href=&quot;https://made2591.github.io/posts/neuralnetwork&quot;&gt;this&lt;/a&gt; post related to the perceptron could be a good starting point - at least, somehow linked cause in the end this network share a lot with multilayer perceptron. Ignored? Perfect. In one sentence: an Elmann network is a MFNN with an extra context layer. That is a Multilayer Feedforward Neural Network with an extra context layer: the point is that, unfortunately, this context layer create a closed circle in the network - thus, in the way the information is progated.&lt;/p&gt;

&lt;p&gt;That means that Elman network are actually RNN, or Recurrent Neural Network even. That are…wait. Let’s make a step back.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/GbUJP5R.png&quot; alt=&quot;matrixbug&quot; style=&quot;width: 40%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;rnns-vs-standard-anns&quot;&gt;RNNs vs Standard ANNs&lt;/h4&gt;
&lt;p&gt;As you know an ANN can be described as a set of neuron units (read perceptron), organized in layers, linked together in several ways to achieve specific - mainly classification - jobs. What it came out is that by changing the links used to attach the neural network layers you can expect different behaviour. What does it mean changing the way the information flow?&lt;/p&gt;

&lt;p&gt;The idea behind RNNs is to make use of &lt;em&gt;sequential information&lt;/em&gt;. In a traditional neural network we assume that all inputs (and outputs) are independent between each other but, for many tasks… that’s a very bad idea. For instance, if you want to predict the next word in a sentence you better know which words came before it.&lt;/p&gt;

&lt;p&gt;RNNs are called &lt;em&gt;recurrent&lt;/em&gt; because they perform the same task for every element of a sequence, with the output being depended on the previous computations. Another way to think about RNNs is that they have a &lt;em&gt;memory&lt;/em&gt; which captures information about what has been calculated so far. In theory RNNs can make use of information in arbitrarily long sequences, but in practice they are limited to looking back only a few steps.&lt;/p&gt;

&lt;h4 id=&quot;base-structures---code&quot;&gt;Base structures - &lt;a href=&quot;https://github.com/made2591/go-perceptron-go/tree/master/model/neural&quot;&gt;code&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To create a neural network, the first thing you have to do is dealing with the definition of data structures. I create a &lt;code class=&quot;highlighter-rouge&quot;&gt;neural&lt;/code&gt; package to collect all files related to architecture structure and elements.&lt;/p&gt;

&lt;h5 id=&quot;pattern---code&quot;&gt;Pattern - &lt;a href=&quot;https://github.com/made2591/go-perceptron-go/blob/master/model/neural/pattern.go&quot;&gt;code&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Pattern&lt;/code&gt; struct represent a single input struct. Look at the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;c&quot;&gt;// Pattern struct represents one pattern with dimensions and desired value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Features&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SingleRawExpectation&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SingleExpectation&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultipleExpectation&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It satisfies our needs with only four fields:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Features&lt;/code&gt; is a slice of 64 bit float and this is perfect to represent input dimension,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SingleRawExpectation&lt;/code&gt; is a string and is filled by parser with input classification (in terms of belonging class),&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SingleExpectation&lt;/code&gt; is a 64 bit float representation of the class which the pattern belongs,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MultipleExpectation&lt;/code&gt; is a slice of 64 bit float and it is used for multiple class classification problems;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why patterns? Because, our goal is to teach an ANN doing something, in this case counting, so… our patterns will be our binary number expressed as slice of 0 and 1. Immagine that we are giving a children a list of operation with numbers - in binary, poor little child. Anyway, this is to say: that child in a way or in another (definitely in another) will learn how to sum integer.&lt;/p&gt;

&lt;p&gt;Who gives these number? The function &lt;code class=&quot;highlighter-rouge&quot;&gt;CreateRandomPatternArray(d, k)&lt;/code&gt; that actually return a slice of &lt;code class=&quot;highlighter-rouge&quot;&gt;Pattern&lt;/code&gt; (binary number). Perfect! We have numbers!&lt;/p&gt;

&lt;h5 id=&quot;neuron---code&quot;&gt;Neuron - &lt;a href=&quot;https://github.com/made2591/go-perceptron-go/blob/master/model/neural/neuronUnit.go&quot;&gt;code&lt;/a&gt;&lt;/h5&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;NeuronUnit&lt;/code&gt; struct represent a single computation unit. Look at the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;c&quot;&gt;// NeuronUnit struct represents a simple NeuronUnit network with a slice of n weights.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuronUnit&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Weights&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bias&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lrate&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Delta&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A neuron corresponds to the simple binary perceptron originally proposed by Rosenblat. It is made of:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Weights&lt;/code&gt;, a slice of 64 bit float to represent the way each dimensions of the pattern is modulated,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bias&lt;/code&gt;, a 64 bit float that represents NeuronUnit natural propensity to spread signal,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Lrate&lt;/code&gt;, a 64 bit float that represents learning rate of neuron,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MultipleExpectation&lt;/code&gt;, a 64 bit float that represents the desired value when I load the input pattner into network in Multi NeuralLayer Perceptron,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Delta&lt;/code&gt;, a 64 bit float that mantains error during execution of training algorithm (later);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, every neuron of Elmann is a neuron in our neural child (what?!). Next step&lt;/p&gt;

&lt;h5 id=&quot;again-perceptrons&quot;&gt;Again perceptrons?&lt;/h5&gt;
&lt;p&gt;As you know, the single perceptron schema is implemented by a single neuron. The easiest way to implement this simple classifier is to establish a threshold function, insert it into the neuron, combine the values (eventually using different weights for each of them) that describe the stimulus in a single value, provide this value to the neuron and see what it returns in output. The schema show how it works:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/6/60/ArtificialNeuronModel_english.png&quot; alt=&quot;perceptron&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We know that multilayer neural networks are a combo of element like the one shown above etc. Thus, in what is different an Elman network? Actually, as we said the only difference is the presence of a context layer - yes, the training algorithm is the back propagation as the one explained for perceptron (&lt;strong&gt;almost&lt;/strong&gt;). Let’s say that an Elmann network is a three-layer network with the addition of this set of &lt;em&gt;context units&lt;/em&gt;. The middle (hidden) layer is connected to these context units fixed with a weight of one. At each time step, the input is fed-forward and a learning rule is applied. The fixed back-connections save a copy of the previous values of the hidden units in the context units (since they propagate over the connections before the learning rule is applied). Thus the network can maintain a sort of state, allowing it to perform such tasks as &lt;em&gt;sequence-prediction&lt;/em&gt; that are beyond the power of a standard multilayer perceptron.&lt;/p&gt;

&lt;h6 id=&quot;back-propagation---differences&quot;&gt;Back propagation - differences&lt;/h6&gt;
&lt;p&gt;Ok, the code is almost the same as defined for Perceptron, available &lt;a href=&quot;https://github.com/made2591/go-perceptron-go/blob/master/model/neural/multiLayerNetwork.go&quot;&gt;here&lt;/a&gt;. Actually, it is because in the end the only difference is that we want the neural network to be able to store the neural hidden values at every step in the context. In fact, to preserve the MLPerceptron struct I extended the two method involved in training, &lt;code class=&quot;highlighter-rouge&quot;&gt;BackPropagate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Execute&lt;/code&gt;, with an optional argument (options …int).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;c&quot;&gt;// BackPropagation algorithm for assisted learning. Convergence is not guaranteed and very slow.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// Use as a stop criterion the average between previous and current errors and a maximum number of iterations.&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// [mlp:MultiLayerNetwork] input value [s:Pattern] input value (scaled between 0 and 1)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// [o:[]float64] expected output value (scaled between 0 and 1)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// return [r:float64] delta error between generated output and expected output&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BackPropagate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultiLayerNetwork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// execute network with pattern passed over each level to output&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// copy hidden output to context&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

            &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuralLayers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

                &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// save output of hidden layer to context&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuralLayers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuronUnits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuralLayers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuronUnits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and during the execution part of the network this means propagate to context:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;&lt;span class=&quot;c&quot;&gt;// save output of hidden layer to context if nextwork is RECURRENT&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuralLayers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WithFields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;				&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;len z&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; 			&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;s.Features&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;		&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;len(s.Features)&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;len mlp.NeuralLayers[0].NeuronUnits&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuralLayers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuronUnits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;len mlp.NeuralLayers[k].NeuronUnits&quot;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuralLayers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuronUnits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Save output of hidden layer to context.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuralLayers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuronUnits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mlp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuralLayers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NeuronUnits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h5 id=&quot;where-is-the-context&quot;&gt;Where is the context&lt;/h5&gt;
&lt;p&gt;As you most probably noticed, I made a magic trick: to avoid create a new neural network struct, I used the input layer as layer to also store the context layer. That is the reason I loop with index z starting from len(s.Features) in both the &lt;code class=&quot;highlighter-rouge&quot;&gt;BackPropagate&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Execute&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How to run it?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;go get github.com/made2591/go-perceptron-go
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GOPATH&lt;/span&gt;/src/made2591/go-perceptron-go
go run main.go&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thank you everybody for reading!&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/elman-student</link>
        <guid isPermaLink="true">made2591.github.io/posts/elman-student</guid>
        
        <category>coding</category>
        
        <category>golang</category>
        
        <category>ann</category>
        
        <category>elman</category>
        
        <category>adding</category>
        
        <category>neural</category>
        
        <category>networks</category>
        
        
      </item>
    
      <item>
        <title>ACT-R by John R. Anderson - Part II</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;In my &lt;a href=&quot;https://made2591.github.io/posts/act-r-part-I&quot;&gt;previous post&lt;/a&gt; I wrote about the cognitive architecture ACT-R, mainly putting together what I learnt by research over the topic. In this post, I would like to go more in depth about how ACT-R works, the concepts behind and try to provide my interpretation of some technical examples, regarding coding of the modeling and everything related.&lt;/p&gt;

&lt;h4 id=&quot;what-really-is-act-r&quot;&gt;What really is ACT-R&lt;/h4&gt;
&lt;p&gt;ACT-R is a production system theory that tries to explain human cognition by developing a model of the knowledge structures that underlie cognition. There are two types of knowledge representation in ACT-R:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Declarative knowledge;&lt;/li&gt;
  &lt;li&gt;Procedural knowledge;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Declarative knowledge corresponds to things we are aware we know and can usually describe to others.  Examples of declarative knowledge include sentence like:&lt;/p&gt;

&lt;p&gt;George Washington was the first president of the United States.
An atom is like the solar system.&lt;/p&gt;

&lt;p&gt;Procedural knowledge is knowledge which we display in our behavior but which we are not conscious of. For instance, no one can describe the rules by which we speak a language and yet we do. In ACT-R declarative knowledge is represented in structures called &lt;code class=&quot;highlighter-rouge&quot;&gt;chunks&lt;/code&gt; whereas procedural knowledge is represented in &lt;code class=&quot;highlighter-rouge&quot;&gt;productions&lt;/code&gt;. Thus, chunks and productions are the basic building blocks of an ACT-R model.&lt;/p&gt;

&lt;p&gt;This blog post aims to go more in depth about the formal notation used for specifying chunks and production rules and to describe how the two types of knowledge interact to produce cognition.&lt;/p&gt;

&lt;h4 id=&quot;chunks-aka-declarative-knowledge&quot;&gt;Chunks a.k.a. declarative knowledge&lt;/h4&gt;
&lt;p&gt;In ACT-R, elements of declarative knowledge are called chunks. Chunks represent knowledge that a person might be expected to have when they solve a problem. A chunk is defined by two elements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;its &lt;strong&gt;type&lt;/strong&gt;: you can think of types as categories (e.g., birds);&lt;/li&gt;
  &lt;li&gt;its slots: you can think of slots as category attributes (e.g., color or size);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look at the example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;nv&quot;&gt;Action023&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;chase&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;agent&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;dog&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;cat&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Fact3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;isa&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;fact&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;addend1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;three&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;addend2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;four&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;seven&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Below are chunks that encode the facts that the dog chased the cat and that 4+3=7. The type of the first chunk is chase and its slots are agent and object. The isa slot gives the type of the chunk. The type of the second chunk is addition-fact and its slots are addend1, addend2, and sum.&lt;/p&gt;

&lt;h4 id=&quot;production-rules-aka-procedural-knowledge&quot;&gt;Production rules a.k.a. procedural knowledge&lt;/h4&gt;
&lt;p&gt;There no a simple definition of a procedural rule. As we saw in previous post, they represent some how behaviour, &lt;em&gt;procedure&lt;/em&gt;. Formally:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A production rule is a statement of a particular contingency that controls behavior.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Look at the example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;nv&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;classify&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;person&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;he&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;unmarried&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;classify&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;him&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;bachelor&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;two&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;digits&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;column&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;d1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;d2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;d3&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;THEN&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;subgoal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;d3&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;column&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The condition of a production rule (the IF part) consists of a specification of the chunks in various buffers.    The action of a production rule (the THEN part) basically involves the modifications of those chunks or requests for other chunks.  The above are informal English specifications of production rules.  They give an overview of what the production does in the context of the declarative memory structures used, but do not necessarily detail everything that needs to happen within the production. You will learn the syntax for precise production specification within the ACT-R system.&lt;/p&gt;

&lt;h3 id=&quot;formalism&quot;&gt;Formalism&lt;/h3&gt;
&lt;p&gt;Since ACT-R is even a language, then let’s start with production rules.&lt;/p&gt;

&lt;h4 id=&quot;production-rules-the-format&quot;&gt;Production rules: the format&lt;/h4&gt;
&lt;p&gt;A production rule is a condition-action pair. The condition (also known as the left-hand side) specifies a pattern of chunks that must be present in the buffers for the production rule to apply. The action (right-hand side) specifies some actions to take.&lt;/p&gt;

&lt;p&gt;The buffers are the interface between the procedural memory system and the other components (modules) of the ACT-R architecture. For instance, the goal buffer is the interface to the goal module. Each buffer can hold one chunk at a time, and the actions of a production affect the contents of the buffers. In according to KISS principle, let’s start by only concerning two buffers - one for holding the current goal and one for holding information retrieved from the declarative memory module.&lt;/p&gt;

&lt;p&gt;The general form of a production rule is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Name&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tests&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;changes&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The buffer tests consist of a set of patterns to match against the current buffers’ contents. If all of the patterns correctly match, then the production is said to match and it can be selected. It is possible for more than one production to be selected, and from all the selected productions one will be chosen to fire and that production’s actions will be performed. The process of choosing a production from those that are selected is call &lt;em&gt;conflict resolution&lt;/em&gt;, and it will be discussed in detail in later units. For now, what is important is that&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Only one production may fire at a time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After a production fires, selection and conflict resolution will again be performed and that will continue until the model has finished.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;counting&lt;/span&gt;                &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;    &lt;span class=&quot;nv&quot;&gt;English&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;isa&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;state&lt;/span&gt;       &lt;span class=&quot;ss&quot;&gt;counting&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;counting&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;number&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num1&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;there&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num1&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;retrieval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;retrieved&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;isa&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;order&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;order&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;first&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num1&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num1&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;second&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;followed&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;number&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt;                                &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;      &lt;span class=&quot;nv&quot;&gt;Then&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                          &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;number&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;continue&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;counting&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;retrieval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;                     &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;ss&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;retrieval&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;isa&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;order&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;fact&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;first&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;          &lt;span class=&quot;ss&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;follows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;production-rules-the-format-1&quot;&gt;Production rules: the format&lt;/h4&gt;
&lt;p&gt;The condition of the preceding production specifies a pattern to match in the goal buffer and a pattern to match in the retrieval buffer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;isa&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;state&lt;/span&gt;       &lt;span class=&quot;ss&quot;&gt;counting&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;number&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;retrieval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;isa&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;order&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;first&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num1&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;second&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A pattern starts by naming which buffer is to be tested followed by &lt;script type=&quot;math/tex&quot;&gt;&gt;&lt;/script&gt;. The names &lt;em&gt;goal&lt;/em&gt; and &lt;em&gt;retrieval&lt;/em&gt; specify the goal buffer and the retrieval buffer. It is also required to prefix the name of the buffer with &lt;script type=&quot;math/tex&quot;&gt;=&lt;/script&gt; - more details on this later. After naming a buffer, the first test must specify the chunk-type using the &lt;em&gt;isa&lt;/em&gt; test and the name of a chunk-type. That may then be followed by any number of tests on the slots for that chunk-type. A slot test consists of an optional modifier (which is not used in any of these tests), the slot name and a specification of the value it must have. The value may be either a specific constant value or a variable.&lt;/p&gt;

&lt;p&gt;Thus, this part of the first pattern:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;isa&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;state&lt;/span&gt;       &lt;span class=&quot;ss&quot;&gt;counting&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;means that the chunk in the goal buffer must be of the chunk-type count and the value of its state slot must be the explicit value counting. The next slot test in the goal pattern involves a variable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;ss&quot;&gt;number&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;em&gt;=&lt;/em&gt; prefix in a production is used to indicate a variable. Variables are used in productions to test general conditions. They can be used to test that a slot holds any value, that two slots hold the same value or that two slots hold different values. The name of the variable can be any symbol and should be chosen to help make the purpose of the production clear. A variable is only meaningful within a specific production. The same variable name used in different productions does not have any relation between the two uses.&lt;/p&gt;

&lt;p&gt;The first time a variable is used in a production it gets assigned (bound to) the value of the specified slot from the chunk in the buffer. If the slot does not have a value, then the pattern does not match. Further uses of that variable within the production will be tests against the specific value to which it is bound.&lt;/p&gt;

&lt;p&gt;So, this slot test from the goal pattern:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;ss&quot;&gt;number&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;causes the variable called =num1 to be bound to the current value of the number slot from the chunk in the goal buffer, if it has a value.&lt;/p&gt;

&lt;p&gt;Now, we will look at the retrieval buffer’s pattern in detail:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;retrieval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;isa&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;order&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;first&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num1&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;second&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First it tests that the chunk is of type count-order. Then it tests the first slot of the chunk with the variable =num1. Since that variable was bound in the goal test this is testing that this slot has that same value. Finally, it tests the second slot which will bind its value to the =num2 variable.&lt;/p&gt;

&lt;p&gt;In summary, this production will match if the goal is of type count, the chunk in the retrieval buffer is of type count-order, the chunk in the goal buffer has the value counting in its state slot, the value in the number slot of the goal and the first slot of the retrieval buffer match, and there is a value in the second slot of the retrieval buffer.&lt;/p&gt;

&lt;p&gt;One final thing to note is that =goal and =retrieval, as used to specify the buffers, are also variables. They will be bound to the chunk that is in the goal buffer and the chunk that is in the retrieval buffer respectively.&lt;/p&gt;

&lt;h4 id=&quot;action-side&quot;&gt;Action side&lt;/h4&gt;
&lt;p&gt;The right-hand side (RHS - the part after the arrow) or action side of a production consists of a small set of actions. The typical actions are to change the contents of the buffers as in our example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;start&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;retrieval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ISA&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;order&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;first&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The actions are specified similarly to the conditions. They start with the name of a buffer followed by “&amp;gt;” and then any number of slot and value specifications.&lt;/p&gt;

&lt;p&gt;If the buffer name is prefixed with “=” then the action is to modify the chunk currently in that buffer. Thus this action on the goal buffer:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;goal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;start&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;changes the value of the start slot of the chunk in the goal buffer to the value of the =num2 variable.&lt;/p&gt;

&lt;p&gt;If the buffer name is prefixed with “+” then the action is a request to the buffer’s module. Typically this results in the module replacing the chunk in the buffer with a different one. Requests to the declarative memory module (the module for which the retrieval buffer is the interface) are always a request to retrieve a chunk from declarative memory that matches the specification provided and to place that chunk into the retrieval buffer. Different modules may handle different types of requests and may respond in other ways.&lt;/p&gt;

&lt;p&gt;Thus, this request:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-prolog&quot; data-lang=&quot;prolog&quot;&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;retrieval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ISA&lt;/span&gt;         &lt;span class=&quot;ss&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;order&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;first&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;num2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;is asking the declarative memory module to retrieve a chunk which is of type count-order and with a first slot that has the value bound to =num2 and place it into the retrieval buffer. If there exists such a chunk, then it will be placed into the retrieval buffer.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In Part III I will talk about how to install and run a model in ACT-R. Stay tuned!&lt;/p&gt;

&lt;p&gt;Thank you everybody for reading!&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/act-r-part-II</link>
        <guid isPermaLink="true">made2591.github.io/posts/act-r-part-II</guid>
        
        <category>theory</category>
        
        <category>cognitive</category>
        
        <category>architecture</category>
        
        <category>reasoning</category>
        
        <category>knowledge</category>
        
        <category>representation</category>
        
        
      </item>
    
      <item>
        <title>ACT-R by John R. Anderson - Part I</title>
        <description>&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I’ve always been fascinated about cognitive systems and all the theories about them. Unfortunately, I never had the chance to actively work on a cognitive architecture: making experiments over these technologies is difficult because it’s difficult to me even only think about some possible toyproblem to solve. So this article is more about the basics, or at least what I found interesting about the topic.&lt;/p&gt;

&lt;h3 id=&quot;act-r&quot;&gt;ACT-R&lt;/h3&gt;
&lt;p&gt;One of the most famous cognitive architecture is ACT-R: ACT-R a.k.a. “Adaptive Control of Thought—Rational” is a cognitive architecture mainly developed by John Robert Anderson at Carnegie Mellon University. If you don’t know Anderson, no worries but from now on keep in mind that he obtained a B.A. from the University of British Columbia in 1968, a Ph.D. in Psychology from Stanford in 1972 to finally become an assistant professor at Yale in 1972. This in the first 25 years of his life. This is to say: if you don’t understand anything about what you will read, it’s most probably not your fault, neither mine’s…and neither Anderson’s actually - it seems there’s a bug in Matrix.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/o9uif2Z.gif&quot; alt=&quot;matrixbug&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ACT-R aims to define the basic and irreducible cognitive and perceptual operations that enable the human mind. In theory, each task that humans can perform should consist of a series of these discrete operations. As a cognitive architecture, ACT-R is actually a &lt;em&gt;theory&lt;/em&gt; about &lt;em&gt;how human cognition works&lt;/em&gt;. On the exterior, ACT-R looks like a programming language; however, its constructs reflect &lt;em&gt;assumptions&lt;/em&gt; about human cognition. These assumptions are based on numerous facts derived from psychology experiments.&lt;/p&gt;

&lt;p&gt;Like a programming language, ACT-R is a framework: for different tasks (e.g., Tower of Hanoi, memory for text or for list of words, language comprehension, communication, aircraft controlling), researchers create models (or &lt;em&gt;programs&lt;/em&gt;) that are written in ACT-R and that, beside incorporating the ACT-R’s view of cognition, add their own assumptions about the particular task. These assumptions can be tested by comparing the results of the model with the results of people doing the same tasks. By “results” we mean the traditional measures of cognitive psychology:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Time to perform the task;&lt;/li&gt;
  &lt;li&gt;Accuracy in the task;&lt;/li&gt;
  &lt;li&gt;More recently, neurological data such as those obtained from FMRI - yes, it will definetly burn your brain but ehy, it’s for science;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One important feature of ACT-R that distinguishes it from other theories in the field is that it allows researchers to collect quantitative measures that can be directly compared with the quantitative measures obtained from human participants.&lt;/p&gt;

&lt;p&gt;ACT-R has been used successfully to create models in domains such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learning and memory;&lt;/li&gt;
  &lt;li&gt;Problem solving and decision making;&lt;/li&gt;
  &lt;li&gt;Language and communication;&lt;/li&gt;
  &lt;li&gt;Perception and attention;&lt;/li&gt;
  &lt;li&gt;Cognitive development;&lt;/li&gt;
  &lt;li&gt;Individual differences;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Beside its applications in cognitive psychology, ACT-R has been used in&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Human-computer interaction to produce user models that can assess different computer interfaces;&lt;/li&gt;
  &lt;li&gt;Education (cognitive tutoring systems) to “guess” the difficulties that students may have and provide focused help;&lt;/li&gt;
  &lt;li&gt;Computer-generated forces to provide cognitive agents that inhabit training environments;&lt;/li&gt;
  &lt;li&gt;Neuropsychology, to interpret FMRI data;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the most successful applications, the Cognitive Tutors for Mathematics, are used in thousands of schools across the country. Such “Cognitive Tutors” are being used as a platform for research on learning and cognitive modeling as part of the Pittsburgh Science of Learning Center.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;CONFUSED?&lt;/strong&gt;&lt;/span&gt; Just go ahead, it will hopefully be clearer in a while.&lt;/p&gt;

&lt;h3 id=&quot;the-architecture&quot;&gt;The architecture&lt;/h3&gt;
&lt;p&gt;The entire ACT-R architecture can be summarized in a set of &lt;em&gt;elements&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A visual module for &lt;em&gt;identifying objects&lt;/em&gt; in the &lt;em&gt;visual field&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;A manual module for controlling the &lt;em&gt;hands&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;A declarative module for retrieving information from &lt;em&gt;memory&lt;/em&gt;;&lt;/li&gt;
  &lt;li&gt;A goal module for keeping track of current goals and intentions;&lt;/li&gt;
  &lt;li&gt;A production module;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is not a coincidence that this few things resemble a very simple &lt;em&gt;Wall-e&lt;/em&gt;: in the end, we have eyes, we act in the worlds with hands, we decide by using the memory - of several kinds, in different ways - and we act to achieve a goal. As a - I would say complex - &lt;em&gt;Wall-e&lt;/em&gt;.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/fF7SKST.png&quot; alt=&quot;perceptron&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s start from the tricky one: the production module.&lt;/p&gt;

&lt;h4 id=&quot;the-production-module&quot;&gt;The production module&lt;/h4&gt;
&lt;p&gt;I think we all agree without be cognitive experts than one of the key points of the human thoughts is the &lt;em&gt;coordination&lt;/em&gt; - at every level you can think about: there are several ways ours systems coordinate themself in relations with the I/O of others, and this is something complex to model. But remember, we are describing a framework, a theory… by design, some hooks are provided to let human fullfil with what is required to have an indipendent cognitive architecture.&lt;/p&gt;

&lt;p&gt;Coordination in the behavior of these modules is achieved through a central production system: despite the name “central”, you should not imaginge this system as a hole in which all information are stored / elaborated and somehow cross-joined.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This central production system is not sensitive to most of the activity of these modules but rather can only respond to a limited amount of information that is deposited in the &lt;em&gt;buffers&lt;/em&gt; of these modules - see again the picture above.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;CONFUSED?&lt;/strong&gt;&lt;/span&gt; No worries: actually, it isn’t difficult to imagine. Is like saying you are not aware (hopefully) of all the information are in the visual field but only about the object(s) you are currently attending to. Similarly, people are not aware of all the information in long-term memory but only the fact currently &lt;em&gt;retrieved&lt;/em&gt;.&lt;/p&gt;

&lt;h4 id=&quot;the-buffers-and-the-modules&quot;&gt;The buffers and the modules&lt;/h4&gt;
&lt;p&gt;As we said, the central production system can recognize patterns in &lt;em&gt;buffers&lt;/em&gt;: it can even make changes to these buffers, as, for instance, when it makes a
request to perform an action in the manual buffer. For cognitive reasons we are not interested right now, the information in these modules is largely encapsulated, and the modules communicate only through the information they make available in their buffers. Actually, the theory &lt;em&gt;is not committed to exactly how many modules there are inside&lt;/em&gt;, but a number have been implemented as part of the central system. The important thing to remember is that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The buffers of these modules hold the limited information that the production system can respond to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;real-brain---modules-mapping&quot;&gt;Real-brain -&amp;gt; modules mapping&lt;/h4&gt;
&lt;p&gt;As part of the architecture, we said there’s a &lt;em&gt;goal module&lt;/em&gt; to keep track of current goals and intentions: we will return on what this means later, but for the moment imagine that you - as a common &lt;em&gt;agent&lt;/em&gt; - are in a sort of equilibrium - let’s say you are in statis. You don’t act to change the environment around you as far as you don’t have a reason, or some sort of irrational trigger to do it, that could be identified by the consciuness, soul, whatever. The GOAL module, as all the module, comunicate throught a buffer. Let call it the GOAL buffer: this keeps track of one’s internal state in solving a problem, it is associated with the dorsolateral prefrontal cortex (DLPFC). The retrieval buffer is associated with the ventrolateral prefrontal cortex (VLPFC) and holds information retrieved from long-term declarative memory. There are many reasons to keep this distinction between DLPFC and VLPFC valid: for our purpose, it’s fair enought know there is a certain number of neuroscience results that agree on this.&lt;/p&gt;

&lt;h4 id=&quot;perceptualmotor-and-manual-modules&quot;&gt;Perceptual–Motor and manual modules&lt;/h4&gt;
&lt;p&gt;The perceptual-motor modules’ buffers are based on some cognitive theories we don’t want to focus on for now. The manual buffer is responsible for control of the hands and is associated with the adjacent motor and somatosensory cortical areas devoted to controlling and monitoring hand movement. There also are rudimentary vocal and aural systems. Let’s summarize these modules as modules that share the same things: they somehow interact actively (by changing it) and/or passively (by notice the changes) of the environments and put some form of information in their respective buffers, to be accessible by the central production system.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;CONFUSED?&lt;/strong&gt;&lt;/span&gt; Me too. But stay tuned… the exciting part is coming. AGAIN :D&lt;/p&gt;

&lt;h3 id=&quot;the-critical-cycle-in-actr&quot;&gt;The critical cycle in ACT–R&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;critical cycle&lt;/code&gt; in ACT–R is one in which the buffers hold representations determined by the external world and internal modules. Then patterns in these buffers are recognized, a production fires, and the buffers are then updated for another cycle. The assumption in ACT–R is that this cycle takes about 50ms to complete. The conditions of the production rule specify a pattern of activity in the buffers that the rule will match, and the action specifies changes to be made to buffers.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:#A04279; font-size: bold;&quot;&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/span&gt; This somehow resembles how an expert system works: have you ever worked with CLIPS, or any other logical language like Prolog? Hold on :)&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://physicsworld.com/wp-content/uploads/2016/08/PW-2016-08-17-BALL-quantum-causality.jpg&quot; alt=&quot;quantum&quot; style=&quot;width: 100%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mixture-of-parallel-and-serial&quot;&gt;Mixture of parallel and serial&lt;/h3&gt;
&lt;p&gt;This is the coolest part of the system: within each module, there is a great deal of &lt;em&gt;parallelism&lt;/em&gt;. For instance, the visual system is simultaneously processing the whole visual field, and the declarative system is executing a parallel search through many memories in response to a retrieval request. Also, the processes within different modules can go on in parallel and asynchronously.&lt;/p&gt;

&lt;p&gt;This give to the architecture some sort of non-deterministic behaviour that to me keeps open the chance to model intentions. I mean, not only the way an Intention Module can be implemented: actually, a distribution over the way intentions are represented in there. Let’s think about this: how much fast can be someone to avoid parallel - let’s say - dangerous stimuli coming in the their visual field? It depends: if s/he’s an athlete maybe faster and in a more efficient way, otherwise in a - kinda - &lt;em&gt;casual&lt;/em&gt; way, guided by many other deterministic information - like how many hours you dreamt, or whatever, but still things - let’s say - you are not interested at all in modeling. Using other words, let’s imagine your actions are somehow a results of one or more production rule(s), i.e. in this context, encoded arbitrary behaviours that are part of your perceptual-motor modules (but even your emotional, etc). Then, the way they are picked up and fired, if subject to parallel access is eventual consistent by design. One of the interpretation over a way some casual can happen is to study the probability distribution, let call it the likelyhood this will happen. And actually, it’s something we control because as we gonna discover in a while, is that the equations that guide ACT-R are strictly related to probability.&lt;/p&gt;

&lt;p&gt;From an high level perspective, actually, it’s a matter of chances being able to &lt;em&gt;do something&lt;/em&gt; - even the definition of better is relative - instead of something else. I think this is really cool cause somehow keep open the possibilty of ACT-R as a model of not only &lt;em&gt;one expert systems&lt;/em&gt;, but actually one system that occasionally act as an expert system. Like humans, that are not equally (and of course, I mean, even punctually) able to achieve each of them the goals their able to achieve if you think about them as a whole but as a single subject.&lt;/p&gt;

&lt;p&gt;However, there are also two levels of serial bottlenecks in the system:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, the content of any buffer is limited to a single declarative unit of knowledge, called a &lt;code class=&quot;highlighter-rouge&quot;&gt;chunk&lt;/code&gt; in ACT–R. Thus, only a single memory can be retrieved at a time or only a single object can be encoded from the visual field;&lt;/li&gt;
  &lt;li&gt;Second, only a single production is selected at each cycle to fire: that is not such a big limiti if you think about it because we can somehow accept you’re not gonna take exactly at the same moment two different decisions. To be a physic for a while, this even respects the theory of relativity that should state the conventional concept of simultaneity doesn’t exist, if I’m not wrong 🤔&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;a-declarative-chunk-and-activation-function&quot;&gt;A declarative Chunk and Activation function&lt;/h3&gt;
&lt;p&gt;The declarative memory system and the procedural system constitute the cognitive core of ACT–R. Let’s have a look at a declarative chunk - or, a single declarative unit of knowledge. In the picture below there’s a visual presentation of a declarative (again, see later) chunk with its subsymbolic quantities&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;https://i.imgur.com/HbZZXwW.png&quot; alt=&quot;perceptron&quot; style=&quot;width: 75%; marker-top: -10px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;W_j&lt;/script&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;attentional weights&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;S_{ji}&lt;/script&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;strenghts of association&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;B_i&lt;/script&gt; is the &lt;code class=&quot;highlighter-rouge&quot;&gt;base level activation&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are no more than values: keep them apart for a minute. Imagine that access to information in declarative memory is not instantaneous and &lt;strong&gt;an important component of the ACT–R theory concerns the activation processes that control this access&lt;/strong&gt;. A set of equations and parameters have been devised in ACT–R that controls this activation process.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The activation of a chunk is a sum of a base-level activation, reflecting its general usefulness in the past, and an associative activation, reflecting its relevance to the current context.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;activation-function&quot;&gt;Activation function&lt;/h4&gt;
&lt;p&gt;For the base-level activation, it rises and falls with practice and delay according to the equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;B_i = ln(\sum_{j=1}^{n}t_j^{-d})&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;t_j is the time since the j_{th} practice of an item.&lt;/script&gt; This equation reflects the log odds an item will reoccur as a function of &lt;em&gt;how it has appeared in the past&lt;/em&gt;. This is to say, each presentation has an impact on odds that decays away as a power function (production the power law of forgetting) and different presentations add up (it turns out producing the power law of practice). Fair enough? Fri, in the ACT-R community, &lt;script type=&quot;math/tex&quot;&gt;.5&lt;/script&gt; has emerged as the default value for the parameter &lt;em&gt;d over a range&lt;/em&gt; of applications.&lt;/p&gt;

&lt;p&gt;There are two equations mapping activation onto probability of retrieval and latency. With respect to probability of retrieval, the assumption is&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The chunks will be retrieved only if their activation threshold is over a threshold.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is because activation values are noisy: there is only a certain probability that any chunk will be above threshold. This is somehow resemble ANN, am I wrong? Have a look &lt;a href=&quot;https://made2591.github.io/posts/neuralnetwork&quot;&gt;here&lt;/a&gt;, I implemented and discussed a little bit a simple one of them here.&lt;/p&gt;

&lt;p&gt;The probability that the activation will be greater than a threshold is given by the following equation:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P_i = \frac{1}{1 + e^{\frac{\tau-A_i}{s}}}&lt;/script&gt;

&lt;p&gt;where &lt;script type=&quot;math/tex&quot;&gt;&lt;/script&gt; controls the noise in the activation levels and is typically set at about &lt;script type=&quot;math/tex&quot;&gt;.4&lt;/script&gt;. If a chunk is successfully retrieved, the latency of retrieval will reflect the activation of a chunk. The time to retrieve the chunk is given as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;T_i = Fe^{-A_i}&lt;/script&gt;

&lt;p&gt;with &lt;script type=&quot;math/tex&quot;&gt;F \approx 0.35e^{\tau}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Although we have a narrow range of values for the noise parameter &lt;script type=&quot;math/tex&quot;&gt;s&lt;/script&gt;, the retrieval threshold, and latency factor, &lt;script type=&quot;math/tex&quot;&gt;F&lt;/script&gt;, are parameters that have varied substantially from model to model.&lt;/p&gt;

&lt;h4 id=&quot;procedural-memory&quot;&gt;Procedural Memory&lt;/h4&gt;
&lt;p&gt;As we already said, the production system can detect the patterns that appear in the buffers and decide what to do next to achieve coherent behavior: in a sense, the production system achieves the control and adaptiveness of thought. The key idea is that at any point in time multiple production rules might apply, but because of the seriality in production rule execution, only one can be selected, and this is the one with the highest utility - that is somehow related to experience even. Production rule utilities are noisy, continuously varying quantities just like declarative activations and play a similar role in production selection as activations play in chunk selection.&lt;/p&gt;

&lt;p&gt;The utility of a production rule $i$ is defined as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;U_i = P_iG - C_p&lt;/script&gt;

&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;P_i&lt;/script&gt; is an estimate of the probability that if production rule &lt;script type=&quot;math/tex&quot;&gt;i&lt;/script&gt; is chosen the current goal will be achieved;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;G&lt;/script&gt; is the value of that current goal;&lt;/li&gt;
  &lt;li&gt;&lt;script type=&quot;math/tex&quot;&gt;C_i&lt;/script&gt; is an estimate of the cost (typically measured in time) to achieve that goal;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both &lt;script type=&quot;math/tex&quot;&gt;P_i&lt;/script&gt; and &lt;script type=&quot;math/tex&quot;&gt;C_i&lt;/script&gt; are learned from experience with that production rule.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I want to go more in depth with some more details about knowledge representation, so stay tuned :D&lt;/p&gt;

&lt;p&gt;UPDATE: &lt;a href=&quot;https://made2591.github.io/posts/act-r-part-II&quot;&gt;ACT-R - Part II&lt;/a&gt; available now&lt;/p&gt;

&lt;p&gt;Thank you everybody for reading!&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate>
        <link>made2591.github.io/posts/act-r-part-I</link>
        <guid isPermaLink="true">made2591.github.io/posts/act-r-part-I</guid>
        
        <category>theory</category>
        
        <category>cognitive</category>
        
        <category>architecture</category>
        
        <category>reasoning</category>
        
        <category>knowledge</category>
        
        <category>representation</category>
        
        
      </item>
    
  </channel>
</rss>

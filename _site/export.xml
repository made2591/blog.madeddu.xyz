<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
    <title></title>
    <link>made2591.github.io</link>
    <description></description>
    <pubDate/>
    <language/>
    <wp:wxr_version>1.2</wp:wxr_version>
    <wp:base_site_url>made2591.github.io</wp:base_site_url>
    <wp:base_blog_url>made2591.github.io</wp:base_blog_url>
    <wp:author>
      <wp:author_login></wp:author_login>
      <wp:author_email></wp:author_email>
      <wp:author_display_name><![CDATA[]]></wp:author_display_name>
      <wp:author_first_name><![CDATA[]]></wp:author_first_name>
      <wp:author_last_name><![CDATA[]]></wp:author_last_name>
    </wp:author>
    <generator>made2591.github.io</generator>
    <image>
    	<url>made2591.github.io/images/site-logo.png</url>
    	<title></title>
      <link>made2591.github.io</link>
    </image>

    
      <item>
        <title><![CDATA[The Deutsch Algorithm]]></title>
        <link>made2591.github.io/posts/deutsch-algorithm</link>
        <pubDate>2019-01-23T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="much-more-than-a-post-again">Much more than a post (again)</h3>
<p>What is the quantum theory? As said by <a href="https://quantumexperience.ng.bluemix.net/">quantumexperience</a> official site by IBM, it’s <em>an elegant mathematical theory able to explain the counterintuitive behavior of subatomic particles, most notably the phenomenon of entanglement</em>. In the late twentieth century it was discovered that quantum theory applies not only to atoms and molecules, but to bits and logic operations in a computer. This realization has been bringing about a revolution in the science and technology of information processing: I decided to write some notes to better explain, from a physics-agnostic computer scientist’s point of view XD, <strong>what I understood</strong> - and it is certainly wrong - about Q until now and why I think it’s an amazing field for computer science. More on this story in <a href="https://made2591.github.io/posts/quantum-computing">my previous post</a>.</p>

<p>So - back to the origins - why am I writing this post? Because I recently came over my quantum notes again and YES, I’M CONTINUING THEM (clap clap clap), even if, unfortunately, I don’t have a lot of time to dedicate to it - you know, the always-valid excuse of life <em>I don’t have time</em>.
This post is about a specific algorithm - one of the basic reasoning to be done about <em>quantum parallelism</em> (more on this in a few lines): I’m gonna talk about the Deutsch Algorithm, the reason behind it, how it works and I will literally vomit what I collected (a sort of preview XD) in the last crazy Sunday of study as a mathematical demonstration of its component.</p>

<p>But… before going into details, let’s make some reasoning over classical computation first.</p>

<p align="center"><img src="https://i.imgur.com/PHANF7S.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="agenda">Agenda</h3>

<ul>
  <li>Classic computation: reversible and irreversible functions + some mentalist tricks to engage you</li>
  <li>Toffoli classic gate: aka… a gate <em>to rule them aaaall</em> 😂 + no other abuse of this sentence, I swear</li>
  <li>Toffoli quantum gate: aka… what the hell is going on dude here!??!?! -&gt; as <a href="https://www.youtube.com/watch?v=9dcVOmEQzKA&amp;feature=youtu.be&amp;t=145">Eminem said</a></li>
  <li>The Deutsch Algorithm: the basic fundation of quantum parallelism - fact and proof (what I got)</li>
  <li>Conclusion: just some random thoughts about the topic</li>
</ul>

<p>Unfortunately, the first three sections are needed to go throught the demonstration of the Deutsch algorithm. At least, I tried to give a little bit of context to better understand the reasons behind the algorithm. Let’s start this journey and sorry if it will take some time :/</p>

<p><span style="color:#FF8C00; font-size: bold;">EASTER EGG</span>: And for the very first time, there’s an easter egg (kind of - at least) in the blog post!</p>

<h3 id="classic-computations">Classic computations</h3>
<p>A fundamental difference between classical and quantum circuits is that theclassical logic gates could be irreversible (for example <code class="highlighter-rouge">AND</code>, <code class="highlighter-rouge">XOR</code>, <code class="highlighter-rouge">NAND</code>), while the quantum logic gates are always unitary and therefore  reversible. On the other hand, it would be desirable for an alternative computation model to beable to express at least all computations that can be expressed with the classical model. So the first objective to talk about quantum computation is therefore to represent the classical computationsas unitary transformations, i.e. as quantum computations.</p>

<h4 id="reversible-vs-irreversible">Reversible vs Irreversible</h4>
<p>Since unitary transformations are invertible (i.e. reversible), the first step is to transform any irreversible classical computation into a reversible one. In order to operate in a reversible way it is necessary that the function to be evaluated is a bjection (i.e. <a href="https://en.wikipedia.org/wiki/Injective_function">injective</a> and <a href="https://en.wikipedia.org/wiki/Surjective_function">surjective</a>). In this case we can in fact unequivocally trace from each output to the value of the input that generated it, that is, operate in reverse. Any irreversible computation can be transformed into an equivalent reversible computation, making the corresponding function to be biunivocally evaluated.</p>

<p>For example, given any function</p>

<script type="math/tex; mode=display">f : \{0, 1\}^{k} \mapsto \{0, 1\}^{m}</script>

<p>it is possible to construct</p>

<script type="math/tex; mode=display">\widetilde{f} : \{0, 1\}^{k+m} \mapsto \{0, 1\}^{k+m}</script>

<p>such that <script type="math/tex">f</script> is biunivocal and calculates <script type="math/tex">(x,f(x))</script> by acting on the input <script type="math/tex">(x,0^m)</script>, where <script type="math/tex">0^m</script> denotes <script type="math/tex">m</script> bits initialized with value 0. Each biunivocal function:</p>

<script type="math/tex; mode=display">f : \{0, 1\}^{n} \mapsto \{0, 1\}^{n}</script>

<p>can be actually seen as a permutation on the <script type="math/tex">n</script> bits in input or, equivalently, on integers <script type="math/tex">0,1, ...,2^{n−1}</script>. Accordingly, it describes a classical reversible computation. Take a moment to reflect on this - <em>mentalist trick n°1</em>.</p>

<h4 id="toffoli-gate">Toffoli gate</h4>
<p>Any irreversible classical computation can be transformed into an equivalent <em>but reversible</em> computation using the <a href="https://en.wikipedia.org/wiki/Toffoli_gate">Toffoli gate</a>. This is a classic reversible operation, represented by the circuit shown below, which operates on three input bits: two are <em>control bits</em> and the third is the target bit that is exchanged if the control bits are both 1, as show in the truth table.</p>

<p align="center"><img src="https://i.imgur.com/j4DI00J.png" alt="perceptron" style="width: 40%; marker-top: -10px;" /></p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>In</th>
      <th> </th>
      <th> </th>
      <th> </th>
      <th>Out</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>a</td>
      <td>b</td>
      <td>c</td>
      <td> </td>
      <td>a’</td>
      <td>b’</td>
      <td>c’</td>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td> </td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td> </td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td> </td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td> </td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td> </td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td> </td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td> </td>
      <td>1</td>
      <td>1</td>
      <td>1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>1</td>
      <td> </td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
    </tr>
  </tbody>
</table>

<p>The reversibility of this operation is easily verified by observing that by applying the Toffoli gate twice in a row the same starting result is obtained (two value are ported as they are, the third one is a <code class="highlighter-rouge">XOR</code> that is reversible by design thus is verified):</p>

<script type="math/tex; mode=display">(a, b, c) \rightarrow{} (a, b, c \oplus ab) \rightarrow{} (a, b, c)</script>

<p>So the operation itself coincides with its inverse. It is equally easy to verify that the Toffoli gate represents the permutation <script type="math/tex">\pi = (67)</script> on integers <script type="math/tex">0, 1, \ldots , 7</script> (exchanges the two sequences <script type="math/tex">110</script> and <script type="math/tex">111</script>).</p>

<h4 id="nand-and-fanout-operation">NAND and FANOUT operation</h4>
<p>Toffoli’s gate is universal for the classic reversible computations, that is, every classical computation can be built in a reversible way through the Toffoli gate. This result follows from the universality of the operations of <code class="highlighter-rouge">NAND</code> and <code class="highlighter-rouge">FANOUT</code> (the operation of copying a classic bit) for the classical computations and from the fact that both these operations can be expressed through the Toffoli circuit. In fact, by applying the operation with <script type="math/tex">c = 1</script>, we obtain <script type="math/tex">a^{'} = a</script>, <script type="math/tex">b^{'} = b</script> and <script type="math/tex">c^{'} = 1 \oplus ab = \neg ab</script>, i.e. we obtained the simulation of <code class="highlighter-rouge">NAND</code> and it is also a reversible operation because Toffoli port is. The reversible <code class="highlighter-rouge">FANOUT</code> is instead obtained as shown in the picture above: by applying the Toffoli gate with <script type="math/tex">a = 1</script> and <script type="math/tex">c = 0</script> the result is the copy of bit <script type="math/tex">b</script> (remember that this copy operation is not possible for a qubit!!!).</p>

<p align="center"><img src="https://i.imgur.com/GKhUQmu.png" alt="perceptron" style="width: 30%; marker-top: -10px;" /></p>

<p>As for <code class="highlighter-rouge">NAND}</code> and <code class="highlighter-rouge">FANOUT</code> the construction of a reversible circuit for any classical operation <script type="math/tex">f</script> by means of the Toffoli port involves the use of some service bits in input (or <em>ancilla bits</em>) and in output (or <em>garbage</em>). After deleting these service bits, the resulting circuit performs the transformation:</p>

<script type="math/tex; mode=display">(x, y) \mapsto (x, y \oplus f(x))</script>

<p>(where <script type="math/tex">x</script> is the input of <script type="math/tex">f</script> and <script type="math/tex">y</script> is the register intended to contain the output) and can be considered as the <em>standard reversible circuit</em> for the evaluation of <script type="math/tex">f</script>.</p>

<h4 id="classical-computations-on-quantum-circuits">Classical computations on quantum circuits</h4>
<p>As already observed, a classical reversible computation corresponds to a permutation on the sequences of the input bits. This guarantees the possibility of constructing a complex unitary matrix that represents it.</p>

<p>In particular, the Toffoli gate can be implemented as quantum circuit. In this case the input is given by three qubits and the transformation, analogous to the classical case, consists in the exchange of the third qubit if the first two are <script type="math/tex">1</script>. For example the quantum Toffoli gate applied to the state <script type="math/tex">\vert 110\rangle</script> produces the state <script type="math/tex">\vert 111\rangle</script>. Thus…</p>

<blockquote>
  <p>The quantum Toffoli port can then be used to simulate all the classical computations on a quantum computer, ensuring that a quantum computer is able to perform any computable computation on a classic computer.</p>
</blockquote>

<p>…. BOOOOOM</p>

<p align="center"><img src="https://i.imgur.com/oOPahkD.gif" style="width: 100%; marker-top: -10px;" /></p>

<p>Let’s go ahead by exploring how a quantum Toffoli gate can be used.</p>

<h4 id="probabilistic-computations-on-quantum-circuits">Probabilistic computations on quantum circuits</h4>
<p><em>Randomized</em> algorithms are algorithms that are executed using a random number generator (the launch of a coin) to decide one of the possible branches of execution. The first randomized algorithm was introduced by Solovay and Strassen in the 1970s to determine whether a number is prime or not. The algorithm produces a correct answer only with a certain probability. This probability can be increased by repeating the execution for an appropriate number of times.</p>

<p>These algorithms can also be efficiently simulated by quantum circuits. In fact, to simulate a random bit it is sufficient to prepare a qubit in the <script type="math/tex">\vert 0\rangle</script> state and then apply the Hadamard port. You will get the status <script type="math/tex">\frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}}</script> that measured will give <script type="math/tex">0</script> or <script type="math/tex">1</script> each with probability <script type="math/tex">1/2</script>. It should also be noted that in this way a <em>really random number</em> is obtained, <em>something that a classic computer can not do</em>… (yes, this should let you think).</p>

<h3 id="quantum-parallelism">Quantum parallelism</h3>
<p>On a quantum computer, a function <script type="math/tex">f(x)</script> can be evaluated on different values of <script type="math/tex">x</script> at the same time. This is known as <em>quantum parallelism</em> and is a fundamental characteristic of quantum circuits. Consider a boolean function of the form:</p>

<script type="math/tex; mode=display">f : \{0, 1\} \mapsto \{0, 1\}</script>

<p>To calculate <script type="math/tex">f(x)</script> by means of a quantum computation the transformation <script type="math/tex">f(x)</script> must be defined as a unit transformation <script type="math/tex">U_f</script>. As seen previously, this can be done by applying on the input state <script type="math/tex">\vert x,y\rangle</script>, let’s say our data register<sup id="fnref:dataregister"><a href="#fn:dataregister" class="footnote">1</a></sup>, an appropriate sequence of quantum logic gates (which we will indicate with a black box called <script type="math/tex">U_f</script>) that transform <script type="math/tex">\vert x,y\rangle</script> into the state <script type="math/tex">\vert x,y \oplus f(x)\rangle</script>, called the target register. If <script type="math/tex">y = 0</script> then the final state of the second qubit will accurately contain the value of <script type="math/tex">f(x)</script>, because of the <script type="math/tex">\oplus</script>’s (<code class="highlighter-rouge">XOR</code>) true table.</p>

<p align="center"><img src="https://i.imgur.com/Wkjxsh1.png" alt="perceptron" style="width: 60%; marker-top: -10px;" /></p>

<p>In the circuit in shown above, the input is</p>

<script type="math/tex; mode=display">\frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}} \otimes \vert 0\rangle</script>

<p>that is<sup id="fnref:recall"><a href="#fn:recall" class="footnote">2</a></sup>, the value of <script type="math/tex">x</script> is an overlap of <script type="math/tex">0</script> and <script type="math/tex">1</script> that can be obtained by applying Hadamard to <script type="math/tex">\vert 0\rangle</script>. Applying <script type="math/tex">U_f</script> to this data register is obtained<sup id="fnref:expl1"><a href="#fn:expl1" class="footnote">3</a></sup>:</p>

<script type="math/tex; mode=display">\frac{\vert 0, f(0)\rangle + \vert 1, f(1)\rangle}{\sqrt{2}}</script>

<p>This state contains information both on the value <script type="math/tex">f(0)</script> and on the value <script type="math/tex">f(1)</script>.</p>

<blockquote>
  <p>We just evaluated  <script type="math/tex">f</script> simultaneously on <script type="math/tex">x</script> = 0 and <script type="math/tex">x = 1</script>.</p>
</blockquote>

<p>This type of parallelism is deeply different from the classical one where multiple circuits (each of which calculates <script type="math/tex">f(x)</script> for a single value of <script type="math/tex">x</script>) are executed simultaneously.</p>

<p align="center"><img src="https://i.imgur.com/yksZid5.jpg" style="width: 100%; marker-top: -10px;" /></p>

<p>Please take some time to reflect on this if you are not convinced before going ahead - <em>mentalist trick n°2</em>.</p>

<h4 id="one-step-more">One step more</h4>
<p>This procedure can be generalized to calculate functions on an arbitrary number of bits using a generalization of the Hadamard gate known as the <strong>Walsh-Hadamard</strong> transform. This operation consists of <script type="math/tex">n</script> Hadamard ports acting in parallel on <script type="math/tex">n</script> qubits. For example, for <script type="math/tex">n = 2</script>, the Walsh-Hadamard transform is indicated with <script type="math/tex">H^{\otimes 2} = H \otimes H</script> and applied to two qubits prepared in the state <script type="math/tex">\vert 0\rangle</script> gives as a result:</p>

<script type="math/tex; mode=display">\frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}} \otimes \frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}} = \frac{\vert 00\rangle + \vert 01\rangle + \vert 10\rangle + \vert 11\rangle}{2}</script>

<p>In general, the result of <script type="math/tex">H^{\otimes n}</script> applied to <script type="math/tex">n</script> qubits in the <script type="math/tex">\vert 0\rangle</script> state is:</p>

<script type="math/tex; mode=display">\frac{1}{\sqrt{2^n}}\sum\limits_{x}\vert x\rangle</script>

<p>where <script type="math/tex">x</script> is the binary representation of the numbers from <script type="math/tex">0</script> to <script type="math/tex">2^n - 1</script>. Thus…</p>

<blockquote>
  <p>The Walsh-Hadamard transform produces an equiprobable overlap of all the states of the <script type="math/tex">n</script> qubits computational basis.</p>
</blockquote>

<p>Note: <span style="color:#FF8C00; font-size: bold;">to obtain an overlap of <script type="math/tex">2^n</script> states only <script type="math/tex">n</script> logical ports are needed.</span> We are getting closer…</p>

<p>The parallel evaluation of a function <script type="math/tex">f(x)</script>, with input <script type="math/tex">x</script> of <script type="math/tex">n</script> bits and <script type="math/tex">1</script> bit as output, can therefore be performed by a circuit similar to last one shown before, with <script type="math/tex">n+1</script> qubit in input prepared in the <script type="math/tex">\vert 0\rangle^{\otimes n}\vert 0\rangle</script>. Then Hadamard applies to the first <script type="math/tex">n</script> qubits and then the <script type="math/tex">U_f</script> circuit is applied. The result will be:</p>

<script type="math/tex; mode=display">\frac{1}{\sqrt{2}}\sum\limits_{x}\vert x\rangle\vert f(x)\rangle</script>

<h4 id="unfortunately">Unfortunately…</h4>
<p>Quantum parallelism is not directly usable in the sense that it is not possible to obtain all the values calculated with a single measurement: the measurement of the state above will give the value of <script type="math/tex">f(x)</script> for a single value of <script type="math/tex">x</script>. To exploit the hidden information in this parallelism, we have to, somehow, make better use of the information contained in the overlap.</p>

<p>For example, by exploiting in an appropriate manner the interference between the states in the overlap. By combining quantum parallelism with this property that comes from quantum mechanics, results like the one exemplified by <em>the Deutsch algorithm</em> can be obtained. And FINALLY…</p>

<h3 id="the-deutsch-algorithm">The Deutsch Algorithm</h3>
<p>The Deutsch algorithm shows how, through the parallel evaluation of a function on all its inputs, global properties of the function can be determined, such as, for example, that of being a constant or balanced function<sup id="fnref:expl2"><a href="#fn:expl2" class="footnote">4</a></sup>. Using a classical algorithm, in the worst case we need to evaluate the function on at least <script type="math/tex">2^{n-1} + 1</script> (am I wrong?) values in order to be able to establish with certainty whether <script type="math/tex">f</script> is constant or balanced.</p>

<p align="center"><img src="https://i.imgur.com/54sZUra.png" alt="perceptron" style="width: 60%; marker-top: -10px;" /></p>

<p>The implementation of the Deutsch algorithm is shown in the quantum circuite above. The input of the circuit that calculates the function <script type="math/tex">f</script> is now the qubits resulting from the application of Hadamard to the <script type="math/tex">\vert 0\rangle</script> and <script type="math/tex">\vert 1\rangle</script> states. This input is therefore:</p>

<script type="math/tex; mode=display">\vert \psi_1\rangle = \vert x, y\rangle = \frac{\vert 0\rangle+\vert 1\rangle}{\sqrt{2}} \otimes \frac{\vert 0\rangle-\vert 1\rangle}{\sqrt{2}} = \frac{\vert 00\rangle - \vert 01\rangle + \vert 10\rangle - \vert 11\rangle}{\sqrt{2}}</script>

<p>For simplicity, let’s mantain the two initial qbits separated. Let’s apply <script type="math/tex">U_f</script> to the state <script type="math/tex">\vert \psi_1\rangle</script> where</p>

<script type="math/tex; mode=display">x = \frac{\vert 0\rangle+\vert 1\rangle}{\sqrt{2}}</script>

<p>and</p>

<script type="math/tex; mode=display">y = \frac{\vert 0\rangle-\vert 1\rangle}{\sqrt{2}}</script>

<p>We already know that <script type="math/tex">U_f</script> doesn’t change <script type="math/tex">x</script> and map the quantum system (our quantum register) <script type="math/tex">\vert x, y\rangle</script> to <script type="math/tex">\vert x, y \oplus f(x)\rangle</script>.</p>

<p>Thus, applying <script type="math/tex">U_f</script> to <script type="math/tex">\vert x, y\rangle</script> means apply <script type="math/tex">U_f</script> to</p>

<script type="math/tex; mode=display">\vert x\rangle \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}</script>

<p>whatever <script type="math/tex">\vert x\rangle</script> will be. The result of this application will be</p>

<script type="math/tex; mode=display">\frac{\vert x\rangle\vert y \oplus f(x)\rangle}{\sqrt{2}}</script>

<p>where <script type="math/tex">\vert y \oplus f(x)\rangle</script> - once we measure <script type="math/tex">y</script> by collapsing to value <script type="math/tex">0</script> or <script type="math/tex">1</script> - is</p>

<script type="math/tex; mode=display">\frac{\vert 0 \oplus f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}}</script>

<p>Thus,</p>

<script type="math/tex; mode=display">\frac{\vert x\rangle\vert y \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert 0 \oplus f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}}</script>

<p>Take a moment to understand this step before going ahead.</p>

<p>Now, remember that <script type="math/tex">0 \oplus f(x) = f(x)</script> because of the nature <script type="math/tex">\oplus</script>, thus the result of <script type="math/tex">U_f</script> applied to <script type="math/tex">\vert \psi_1\rangle</script> - always by keeping away <script type="math/tex">\vert x\rangle</script> for a while - is</p>

<script type="math/tex; mode=display">\vert x\rangle\frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}}</script>

<p>Thus,</p>

<script type="math/tex; mode=display">\frac{\vert x\rangle\vert y \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert 0 \oplus f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}}</script>

<p>Since <script type="math/tex">U_f</script> doesn’t modify <script type="math/tex">\vert x\rangle</script> we only need to evaluate <script type="math/tex">y \oplus f(x)</script> - or <script type="math/tex">\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle</script>.</p>

<ul>
  <li>If <script type="math/tex">f(x) = 0</script> this is simply <script type="math/tex">y</script> - in fact:</li>
</ul>

<script type="math/tex; mode=display">\vert y \oplus f(x)\rangle = \frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}} = \frac{\vert 0\rangle - \vert 1 \oplus 0\rangle}{\sqrt{2}} = \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} = H\vert 1\rangle = y</script>

<p>Realize that by replacing the value of <script type="math/tex">f(x)</script> with <script type="math/tex">0</script> we obtain exactly <script type="math/tex">y</script> that is our desiderata, thus</p>

<script type="math/tex; mode=display">\vert x\rangle\frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert y\rangle}{\sqrt{2}}</script>

<p>Take some moment to convince about this step.</p>

<ul>
  <li>Otherwise, if <script type="math/tex">f(x) = 1</script> then the result is</li>
</ul>

<script type="math/tex; mode=display">\vert x\rangle\frac{\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert 1\rangle - \vert 1 \oplus 1\rangle}{\sqrt{2}} = \vert x\rangle\frac{\vert 1\rangle - \vert 0\rangle}{\sqrt{2}} = \vert x\rangle\frac{-\vert y\rangle}{\sqrt{2}}</script>

<p>Now, let’s keep a part <script type="math/tex">1/\sqrt{2}</script>: we can rewrite</p>

<script type="math/tex; mode=display">\vert x\rangle\vert f(x)\rangle - \vert 1 \oplus f(x)\rangle), f(x) \in \{0, 1\}</script>

<p>in</p>

<script type="math/tex; mode=display">(-1)^{f(x)}\vert x\rangle(\vert 0\rangle - \vert 1\rangle), f(x) \in \{0, 1\}</script>

<p><span style="color:#FF8C00; font-size: bold;">Note</span>: if someone is able to convince me about this, please comment it below or feel free to contact me at <a href="mailto:matteo.madeddu@gmail.com">matteo.madeddu [at] gmail.com</a> because I didn’t find a real good explanation to this. Anyway, let’s assume it’s true because of some trick (I have a theory, that is replacing <script type="math/tex">((-1)^{f(x)}</script> with <script type="math/tex">(-f(x)^{f(x)}</script>) over signs, and go ahead because the rest it seems <em>ok</em> imho.</p>

<p>Thus, by applying <script type="math/tex">U_f</script> to <script type="math/tex">\vert \psi_1\rangle</script> we obtain a result <script type="math/tex">\vert \psi_2\rangle</script> that varies over two possibilities</p>

<script type="math/tex; mode=display">f(0) = f(1) \rightarrow{} \pm \left[\frac{\vert 0\rangle + \vert 1\rangle}{\sqrt{2}} \otimes \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]</script>

<script type="math/tex; mode=display">f(0) \neq f(1) \rightarrow{} \pm \left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} \otimes \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]</script>

<p>Note that in the second alternative, we have that <script type="math/tex">(-1)^{f(1)} = -(-1)^{f(0)}</script>. Note also that <script type="math/tex">\vert \psi_1\rangle</script> can be written as</p>

<script type="math/tex; mode=display">\frac{1}{\sqrt{2}}\left(\vert 0\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} + \vert 1\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right)</script>

<p>Thus <script type="math/tex">U_f</script> applied to <script type="math/tex">\vert \psi_1\rangle</script> can be written as</p>

<script type="math/tex; mode=display">\frac{1}{\sqrt{2}}\left((-1)^{f(0)}\vert 0\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} +  (-1)^{f(1)}\vert 1\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right)</script>

<p>or, equally, as</p>

<script type="math/tex; mode=display">\frac{1}{\sqrt{2}}\left((-1)^{f(0)}\vert 0\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} -  (-1)^{f(0)}\vert 1\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right)</script>

<p>(because in the second case or <script type="math/tex">(-1)^{f(1)} == -(-1)^{f(0)}</script> since <script type="math/tex">f(0) \neq f(1)</script>) or, even, as</p>

<script type="math/tex; mode=display">\pm\frac{1}{\sqrt{2}}\left(\vert 0\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} + \vert 1\rangle\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right)</script>

<p>that is</p>

<script type="math/tex; mode=display">\pm\left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}} \otimes \vert \frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]</script>

<p>Now we apply Hadamard to the first qubit and we obtain <script type="math/tex">\vert \psi_3\rangle</script> which results in</p>

<script type="math/tex; mode=display">f(0) = f(1) \rightarrow{} \pm\vert 0\rangle \left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]</script>

<script type="math/tex; mode=display">f(0) \neq f(1) \rightarrow{} \pm\vert 1\rangle \left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]</script>

<p>At this point we observe that <script type="math/tex">f(0) \oplus f(1) = 0</script> if <script type="math/tex">f(0) = f(1)</script>, otherwise <script type="math/tex">f(0) \oplus f(1) = 1</script>. We can therefore write the result in a more concise way</p>

<script type="math/tex; mode=display">\vert \psi_3\rangle = \pm \vert f(0) \oplus f(1)\rangle \left[\frac{\vert 0\rangle - \vert 1\rangle}{\sqrt{2}}\right]</script>

<p>Through a measurement of the first qubit we can then determine with certainty (the probability associated with the first qubit is 1) the value of <script type="math/tex">f(0) \oplus f(1)</script> and therefore if the function <script type="math/tex">f</script> is constant or balanced. To do this we had to evaluate <script type="math/tex">f(x)</script> only once.</p>

<h3 id="conclusion">Conclusion</h3>
<p>The Deutsch algorithm can be extended to Boolean functions on <script type="math/tex">n</script> bits. Let us consider a function <script type="math/tex">f:\{0,1\}^n \rightarrow{} \{0,1\}</script> and suppose to know that <script type="math/tex">f</script> can be either constant or balanced. The quantum algorithm of Deutsch-Jozsa allows us to establish it in one step. The quantum circuit that implements this algorithm is the same Deutsch algorithm described with input <script type="math/tex">x</script> of the function of <script type="math/tex">n</script> qubits prepared in the <script type="math/tex">\vert 0\rangle</script> state, which we will call the data register. The qubit target, intended to contain the result of <script type="math/tex">f(x)</script>, is instead prepared in the <script type="math/tex">\vert 1\rangle</script> state.</p>

<p>To be continue…</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:dataregister">
      <p>A quantum system of two qbits.&nbsp;<a href="#fnref:dataregister" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:recall">
      <p>If this is not clear, recall the quantum register definition.&nbsp;<a href="#fnref:recall" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:expl1">
      <p>I applied <script type="math/tex">y \oplus f(x)</script> and the distribution property.&nbsp;<a href="#fnref:expl1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:expl2">
      <p>That is, it takes value <script type="math/tex">0</script> on exactly half of the inputs and value <script type="math/tex">1</script> on the remaining half.&nbsp;<a href="#fnref:expl2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/deutsch-algorithm</wp:post_id>
        <wp:post_date>2019-01-23T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2019-01-23T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="quantum"><![CDATA["quantum",]]></category>
        
          <category domain="post_tag" nicename="parallelism"><![CDATA["parallelism",]]></category>
        
          <category domain="post_tag" nicename="q"><![CDATA["q",]]></category>
        
          <category domain="post_tag" nicename="informative"><![CDATA["informative",]]></category>
        
          <category domain="post_tag" nicename="ibm"><![CDATA["ibm",]]></category>
        
          <category domain="post_tag" nicename="deutsch"><![CDATA["deutsch",]]></category>
        
          <category domain="post_tag" nicename="algorithm"><![CDATA["algorithm"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[A Golang Turing machine library]]></title>
        <link>made2591.github.io/posts/golang-turing-machine</link>
        <pubDate>2019-01-19T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="preamble">Preamble</h3>
<p>In 1962, Hungarian mathematician Tibor Radó introduced the Busy Beaver competition for Turing machines: in a class of machines, find one which halts after the greatest number of steps when started on the empty input. Even if it could seem trivial, the Busy Beaver competition has implications in computability theory, the halting problem, and complexity theory.</p>

<p>I decided to use GoLang to implement a Turing machine library and accomplish three goals: first, having a Turing Machine model to play with for learning purpose; second, learning how to use interfaces and the factory pattern, other then testing package to test my code and let it be more flexible for future enhancement (at least I hope!); third, implement some Busy Beaver setup and verify that the model works with well known executions. If you want to discover more about Golang, 60’s math games and beavers, go ahead with reading :D!</p>

<p align="center"><img src="https://i.imgur.com/RuYp5Y1.png" style="width: 70%; marker-top: -10px;" /></p>

<h3 id="theory-first">Theory first</h3>
<p>Before starting, let’s define a Turing machine. A Turing machine is a mathematical model of computation that defines an abstract machine which manipulates symbols on a strip of tape according to a list of rules. Formally, we can image a infinite tape of 0 with a pointer (identified by square bracket) to one specific zero,</p>

<script type="math/tex; mode=display">... 0 0 0 0 0 [0] 0 0 0 0 0  ...</script>

<p>a set of states identified by letters (or numbers),</p>

<script type="math/tex; mode=display">{A, B, C}</script>

<p>and a list of transactions, like the one</p>

<script type="math/tex; mode=display">(A, 0, B, 1, R);</script>

<p>where a single transaction like <em>(A, 0, B, 1, R)</em> has to been read as</p>

<blockquote>
  <p><em>Given a Turing machine in state A with the pointer over a 0, write 1, evolve to state B and move the pointer by one position in right direction over the tape</em>.</p>
</blockquote>

<p>The pointer can only be moved by one position at time, left, right, or stay where it is. Everything’s clear?</p>

<h3 id="implementation">Implementation</h3>
<p>To implement my Turing machine, I choose Golang as language and, to be more flexible, I coded by using the factory pattern. What is a factory pattern?</p>

<h4 id="the-factory-pattern">The factory pattern</h4>
<p>The factory pattern is a commonly used pattern in object oriented programming: the main reason you decide to use factory pattern is that it provide to thirds a way to better consume your struct. Instead of initializing instances using something like <code class="highlighter-rouge">myStruct := &amp;MyStruct{}</code>, a factory pattern provide a function signature that return your struct, by ensuring that everyone will supply the required attributes.</p>

<p>Now, the cool thing is that in Golang functions <em>can return interfaces instead of structs</em>: interfaces allow you to define behaviour without exposing internal implementation. As in other programming languages, you define method to be implemented inside an interface, and every struct that implement them is considered <em>implementing</em> the interface. This means we can make private structs, while only exposing the interface outside our package, and let user interact with the struct with the only available method inside.</p>

<h4 id="transactions">Transactions</h4>
<p>The first lines of the package <code class="highlighter-rouge">Transaction</code> look like the one shown below:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">var</span><span class="x"> </span><span class="n">ACTIONS</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">string</span><span class="p">{</span><span class="s">"R"</span><span class="p">,</span><span class="x"> </span><span class="s">"L"</span><span class="p">,</span><span class="x"> </span><span class="s">"N"</span><span class="p">}</span><span class="x">

</span><span class="c">// Transaction interface</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">Transaction</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Validate</span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="n">TuringMachine</span><span class="p">)</span><span class="x"> </span><span class="kt">bool</span><span class="x">
	</span><span class="n">Simulate</span><span class="p">()</span><span class="x"> </span><span class="p">(</span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="p">,</span><span class="x"> </span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="p">,</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x">
	</span><span class="n">GetCurrentState</span><span class="p">()</span><span class="x"> </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="x">
	</span><span class="n">GetSymbolScanned</span><span class="p">()</span><span class="x"> </span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="x">
	</span><span class="n">GetNewState</span><span class="p">()</span><span class="x"> </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="x">
	</span><span class="n">GetSymbolWritten</span><span class="p">()</span><span class="x"> </span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="x">
	</span><span class="n">GetMoveTape</span><span class="p">()</span><span class="x"> </span><span class="kt">string</span><span class="x">
	</span><span class="n">Print</span><span class="p">()</span><span class="x"> </span><span class="kt">string</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// transaction struct</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">transaction</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">currentState</span><span class="x">  </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="x">
	</span><span class="n">symbolScanned</span><span class="x"> </span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="x">
	</span><span class="n">newState</span><span class="x">      </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="x">
	</span><span class="n">symbolWritten</span><span class="x"> </span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="x">
	</span><span class="n">moveTape</span><span class="x">      </span><span class="kt">string</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p>where <code class="highlighter-rouge">state.State</code> and <code class="highlighter-rouge">symbol.Symbol</code> refer respectively to the state, symbol packages and the State, Symbol interfaces defined inside them. The <code class="highlighter-rouge">Transaction</code> interface defines which methods have to be exposed outside: the <code class="highlighter-rouge">transaction</code> struct implements the Transaction interface. Let’s have a look at a couple of methods after that:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// NewTransaction() Create a new Transaction with given</span><span class="x">
</span><span class="c">// currentState, symbolScanned, symbolWritten and moveTape action</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">NewTransaction</span><span class="p">(</span><span class="n">currentState</span><span class="x"> </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="p">,</span><span class="x"> </span><span class="n">symbolScanned</span><span class="x"> </span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="p">,</span><span class="x">
    </span><span class="n">newState</span><span class="x"> </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="p">,</span><span class="x"> </span><span class="n">symbolWritten</span><span class="x"> </span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="p">,</span><span class="x"> </span><span class="n">moveTape</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="n">Transaction</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="n">t</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">transaction</span><span class="p">{}</span><span class="x">
	</span><span class="n">t</span><span class="o">.</span><span class="n">currentState</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">currentState</span><span class="x">
	</span><span class="n">t</span><span class="o">.</span><span class="n">symbolScanned</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">symbolScanned</span><span class="x">
	</span><span class="n">t</span><span class="o">.</span><span class="n">newState</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">newState</span><span class="x">
	</span><span class="n">t</span><span class="o">.</span><span class="n">symbolWritten</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">symbolWritten</span><span class="x">
	</span><span class="n">t</span><span class="o">.</span><span class="n">moveTape</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">moveTape</span><span class="x">

	</span><span class="k">return</span><span class="x"> </span><span class="n">t</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>The <code class="highlighter-rouge">NewTransaction(...)</code> functions solve the problem of exposing the <code class="highlighter-rouge">transaction</code> struct, by return a pointer to a struct as the Transaction interface: in fact, since the transaction struct is private we wouldn’t be able to interfact with it. That’s the reason the signature actually returns an interface, that is exposed: this is possible because the pointers can also implement interfaces.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// Validate(m TuringMachine) Validate the transaction t with respect</span><span class="x">
</span><span class="c">// to the TuringMachine m. A Transaction to be considered valid</span><span class="x">
</span><span class="c">// need to be defined with a valid ACTIONS, the current state of the</span><span class="x">
</span><span class="c">// TuringMachine must be equal to the state in which the transaction</span><span class="x">
</span><span class="c">// is activated and the head of the TuringMachine must point to the</span><span class="x">
</span><span class="c">// the same symbol scanned by the transaction. If all of this three</span><span class="x">
</span><span class="c">// condition are verified, Validate(m TuringMachine) over t returns</span><span class="x">
</span><span class="c">// true; it returns otherwise</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">t</span><span class="x"> </span><span class="o">*</span><span class="n">transaction</span><span class="p">)</span><span class="x"> </span><span class="n">Validate</span><span class="p">(</span><span class="n">m</span><span class="x"> </span><span class="n">TuringMachine</span><span class="p">)</span><span class="x"> </span><span class="kt">bool</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="c">// check if moveTape action is allowed</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">a</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="k">range</span><span class="x"> </span><span class="n">ACTIONS</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">strings</span><span class="o">.</span><span class="n">EqualFold</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="x"> </span><span class="n">t</span><span class="o">.</span><span class="n">moveTape</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="c">// check if actual state and scanned</span><span class="x">
                        </span><span class="c">// symbol match with transaction</span><span class="x">
			</span><span class="k">return</span><span class="x"> </span><span class="n">t</span><span class="o">.</span><span class="n">currentState</span><span class="o">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">GetActualState</span><span class="p">())</span><span class="x">
                            </span><span class="o">&amp;&amp;</span><span class="x"> </span><span class="n">t</span><span class="o">.</span><span class="n">symbolScanned</span><span class="o">.</span><span class="n">Equal</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">GetActualSymbol</span><span class="p">())</span><span class="x">
		</span><span class="p">}</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="k">return</span><span class="x"> </span><span class="no">false</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>The <code class="highlighter-rouge">Validate</code> function return true if a transaction is valid inside the Turing Machine m. A Transaction is valid if</p>

<ul>
  <li>the action to be execute is a valid action identifier - it’s contained in the set of {“L”,”R”,”N”};</li>
  <li>the current state of the Turing machine is equal to the state in which the transaction is activated;</li>
  <li>the current head of the Turing machine points to the the same symbol scanned by the transaction;</li>
</ul>

<p>Similarly, you can implement <code class="highlighter-rouge">Symbol</code>, <code class="highlighter-rouge">State</code> and <code class="highlighter-rouge">TuringMachine</code>. Since Symbol and State packages are pretty easy to implement, let’s have a look the Turing machine definition and the execution method defined inside it.</p>

<h4 id="turing-machine">Turing Machine</h4>
<p>The Turing machine interface is defined as shown below:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// TuringMachine interface</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">TuringMachine</span><span class="x"> </span><span class="k">interface</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Run</span><span class="p">()</span><span class="x">
	</span><span class="n">Step</span><span class="p">()</span><span class="x"> </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="x">
	</span><span class="n">Computed</span><span class="p">()</span><span class="x"> </span><span class="kt">bool</span><span class="x">
	</span><span class="n">GetActualSymbol</span><span class="p">()</span><span class="x"> </span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="x">
	</span><span class="n">GetActualState</span><span class="p">()</span><span class="x"> </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="x">
	</span><span class="n">MoveHeadPointer</span><span class="p">(</span><span class="n">s</span><span class="x"> </span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="p">,</span><span class="x"> </span><span class="n">m</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="kt">int</span><span class="x">
	</span><span class="n">Print</span><span class="p">()</span><span class="x"> </span><span class="kt">string</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="c">// turingMachine struct</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">turingMachine</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">initialStates</span><span class="x"> </span><span class="n">set</span><span class="o">.</span><span class="n">Set</span><span class="x">
	</span><span class="n">finalStates</span><span class="x">   </span><span class="n">set</span><span class="o">.</span><span class="n">Set</span><span class="x">
	</span><span class="n">transactions</span><span class="x">  </span><span class="n">set</span><span class="o">.</span><span class="n">Set</span><span class="x">
	</span><span class="n">actualState</span><span class="x">   </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="x">
	</span><span class="n">headPointer</span><span class="x">   </span><span class="kt">int</span><span class="x">
	</span><span class="n">tape</span><span class="x">          </span><span class="p">[]</span><span class="n">symbol</span><span class="o">.</span><span class="n">Symbol</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p>The key methods are <code class="highlighter-rouge">Run()</code>, <code class="highlighter-rouge">Step()</code> and <code class="highlighter-rouge">Computed()</code>. The Run() method is the simplest one: it runs the Step() function indefinitely until the Turing machine is computed completely.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">tm</span><span class="x"> </span><span class="o">*</span><span class="n">turingMachine</span><span class="p">)</span><span class="x"> </span><span class="n">Run</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="k">for</span><span class="x"> </span><span class="o">!</span><span class="n">tm</span><span class="o">.</span><span class="n">Computed</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">tm</span><span class="o">.</span><span class="n">Step</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="k">return</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>A Turing machine is computed completely when it reaches a Final State, that is exactly what the Computed method said about our Turing machine.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">tm</span><span class="x"> </span><span class="o">*</span><span class="n">turingMachine</span><span class="p">)</span><span class="x"> </span><span class="n">Computed</span><span class="p">()</span><span class="x"> </span><span class="kt">bool</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="k">return</span><span class="x"> </span><span class="n">tm</span><span class="o">.</span><span class="n">actualState</span><span class="o">.</span><span class="n">IsFinal</span><span class="p">()</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>What about the Step() function?</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span><span class="x"> </span><span class="p">(</span><span class="n">tm</span><span class="x"> </span><span class="o">*</span><span class="n">turingMachine</span><span class="p">)</span><span class="x"> </span><span class="n">Step</span><span class="p">()</span><span class="x"> </span><span class="n">state</span><span class="o">.</span><span class="n">State</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="k">for</span><span class="x"> </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">t</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="k">range</span><span class="x"> </span><span class="n">tm</span><span class="o">.</span><span class="n">transactions</span><span class="o">.</span><span class="n">Iterator</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">t</span><span class="o">.</span><span class="p">(</span><span class="n">Transaction</span><span class="p">)</span><span class="o">.</span><span class="n">Validate</span><span class="p">(</span><span class="n">tm</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="k">return</span><span class="x"> </span><span class="n">tm</span><span class="o">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="p">(</span><span class="n">Transaction</span><span class="p">))</span><span class="x">
		</span><span class="p">}</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="n">tm</span><span class="o">.</span><span class="n">actualState</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>For the execute part, you can have a look directly <a href="https://github.com/made2591/go-tm/blob/master/turing/machine/machine.go">here</a>.</p>

<h3 id="before-going-ahead">Before going ahead</h3>
<p>Testing! I learn how much you gain by testing your code playing with returns, default, pointers and indexes. Fortunately, build testing in Golang is quite easy, specially for simple functions like the one we shown before. For instance, the following test function is defined in a <code class="highlighter-rouge">symbol_test.go</code> file - at the same level of the <code class="highlighter-rouge">symbol</code>. Then</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">func</span><span class="x"> </span><span class="n">TestErase</span><span class="p">(</span><span class="n">t</span><span class="x"> </span><span class="o">*</span><span class="n">testing</span><span class="o">.</span><span class="n">T</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="c">// test erase a Symbol</span><span class="x">
	</span><span class="n">s</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">1</span><span class="p">))</span><span class="x">
	</span><span class="n">s</span><span class="o">.</span><span class="n">Erase</span><span class="p">()</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">v</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">s</span><span class="o">.</span><span class="n">GetValue</span><span class="p">();</span><span class="x"> </span><span class="n">v</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="n">BLANK</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">t</span><span class="o">.</span><span class="n">Errorf</span><span class="p">(</span><span class="s">"Erase was incorrect, got: %d, want: %d."</span><span class="p">,</span><span class="x"> </span><span class="n">v</span><span class="p">,</span><span class="x"> </span><span class="kt">uint8</span><span class="p">(</span><span class="n">BLANK</span><span class="p">))</span><span class="x">
	</span><span class="p">}</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>The testing functions are always named like <code class="highlighter-rouge">[Test]OriginalFunctionName</code> and always accept only one parameter <code class="highlighter-rouge">t *testing.T</code><sup id="fnref:gotesting"><a href="#fn:gotesting" class="footnote">1</a></sup>. After that, from inside your project folder run this in a shell:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">go <span class="nb">test</span> ./...</code></pre></figure>

<p>Just prepend GOCACHE=off if you want to ignore caching. For the entire code, follow the <a href="https://github.com/made2591/go-tm">link</a>.</p>

<p>Now it’s time to build our Busy Beaver!!</p>

<h3 id="the-busy-beaver-competition">The Busy Beaver competition</h3>
<p>The Busy Beaver game consists of designing a halting, binary-alphabet Turing machine which writes the most <em>1</em>s on the tape, using only a limited set of states. The rules for the 2-state game are as follows:</p>

<ul>
  <li>The machine must have two states in addition to the halting state, and</li>
  <li>The tape starts with 0s only</li>
</ul>

<p>As the player, you should conceive each state aiming for the maximum output of 1s on the tape while making sure the machine will halt eventually.</p>

<p>The <em>n-th</em> Busy Beaver, BB-n or simply “Busy Beaver” is the Turing machine that wins the n-state Busy Beaver Game. That is, it attains the maximum number of 1s among all other possible <em>n</em>-state competing Turing Machines. The BB-2 Turing machine, for instance, achieves four <em>1</em>s in six steps.</p>

<p>You can easily build the BB-2 Beaver with 4 simple transaction plus 1 to move from the initial state to the “A” state.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="n">tr0</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">transaction</span><span class="o">.</span><span class="n">NewTransaction</span><span class="p">(</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewInitialState</span><span class="p">(),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">0</span><span class="p">)),</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewState</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">21</span><span class="p">)),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">0</span><span class="p">)),</span><span class="x"> </span><span class="s">"N"</span><span class="p">)</span><span class="x">

</span><span class="n">tr1</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">transaction</span><span class="o">.</span><span class="n">NewTransaction</span><span class="p">(</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewState</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">21</span><span class="p">)),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">0</span><span class="p">)),</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewState</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">22</span><span class="p">)),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">1</span><span class="p">)),</span><span class="x"> </span><span class="s">"R"</span><span class="p">)</span><span class="x">

</span><span class="n">tr2</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">transaction</span><span class="o">.</span><span class="n">NewTransaction</span><span class="p">(</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewState</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">21</span><span class="p">)),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">1</span><span class="p">)),</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewState</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">22</span><span class="p">)),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">1</span><span class="p">)),</span><span class="x"> </span><span class="s">"L"</span><span class="p">)</span><span class="x">

</span><span class="n">tr3</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">transaction</span><span class="o">.</span><span class="n">NewTransaction</span><span class="p">(</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewState</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">22</span><span class="p">)),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">0</span><span class="p">)),</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewState</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">21</span><span class="p">)),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">1</span><span class="p">)),</span><span class="x"> </span><span class="s">"L"</span><span class="p">)</span><span class="x">

</span><span class="n">tr4</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">transaction</span><span class="o">.</span><span class="n">NewTransaction</span><span class="p">(</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewState</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">22</span><span class="p">)),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">1</span><span class="p">)),</span><span class="x">
	</span><span class="n">state</span><span class="o">.</span><span class="n">NewFinalState</span><span class="p">(),</span><span class="x">
	</span><span class="n">symbol</span><span class="o">.</span><span class="n">NewSymbol</span><span class="p">(</span><span class="kt">uint8</span><span class="p">(</span><span class="m">1</span><span class="p">)),</span><span class="x"> </span><span class="s">"R"</span><span class="p">)</span></code></pre></figure>

<p>Or, in a more user friendly format:</p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th>21</th>
      <th>22</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>1R22</td>
      <td>1L21</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1L22</td>
      <td>1RFINAL</td>
    </tr>
  </tbody>
</table>

<p>with an initial transaction from INITIAL to 21 with symbol 0 scanned, that does nothing and ports to state 21.
Let’s have a look at the evolution of the BB-2 Turing machine: first apply first transaction from INITIAL to A - it a sort of 0° Step that just change the state of the machine from INITIAL to 21, in such a way that the init tape looks like this</p>

<script type="math/tex; mode=display">... 0 0 0 0 0 [0] 0 0 0 0 0 0 0 ...</script>

<h3 id="bb-2-beaver-execution">BB-2 Beaver Execution</h3>

<p><span style="color:#A04279; font-size: bold;">1° Step</span>: apply 1R22 transaction from A in 0 to B by writing 1, evolve in state B and move the cursor one step in the right direction</p>

<script type="math/tex; mode=display">... 0 0 0 0 0 1 [0] 0 0 0 0 0 0 ...</script>

<p><span style="color:#A04279; font-size: bold;">2° Step</span>: apply 1L21 transaction from B in 0 to A by writing 1, evolve in state A and move the cursor one step in the left direction</p>

<script type="math/tex; mode=display">... 0 0 0 0 0 [1] 1 0 0 0 0 0 0 ...</script>

<p><span style="color:#A04279; font-size: bold;">3° Step</span>: apply 1L22 transaction from A in 1 to B by writing 1 (this will result in an overwrite) and move the cursor one step in the left direction</p>

<script type="math/tex; mode=display">... 0 0 0 0 [0] 1 1 0 0 0 0 0 0 ...</script>

<p><span style="color:#A04279; font-size: bold;">4° Step</span>: apply 1L21 transaction from B in 0 to A by writing 1, evolve in state A and move the cursor one step in the left direction</p>

<script type="math/tex; mode=display">... 0 0 0 [0] 1 1 1 0 0 0 0 0 0 ...</script>

<p><span style="color:#A04279; font-size: bold;">5° Step</span>: apply 1R22 transaction from A in 0 to B by writing 1, evolve in state B and move the cursor one step in the right direction</p>

<script type="math/tex; mode=display">... 0 0 0 1 [1] 1 1 0 0 0 0 0 0 ...</script>

<p><span style="color:#A04279; font-size: bold;">6° Step</span>: finally, apply 1RFINAL transaction from B in 1 to FINAL by writing 1 (this will result in an overwrite), evolve in state B and move the cursor one step in the right direction</p>

<script type="math/tex; mode=display">... 0 0 0 1 1 [1] 1 0 0 0 0 0 0 ...</script>

<p>And the execution is finished! Four <em>1</em>s, six steps, as promised!</p>

<p>To be continued with Non Deterministic experiment…</p>

<h3 id="conclusion">Conclusion</h3>
<p>For the most curious people, the original paper is Tibor Radó - <em>On Non-Computable Functions</em> - <a href="http://infoteorica.weebly.com/uploads/1/7/8/9/17895653/rado_on_non-computable_functions_bell_system_technical_journal_41_1962_pp._877-884.pdf">here</a>.
My Github repo with my implementation of the Busy Beaver game is available <a href="https://github.com/made2591/go-tm">here</a>.</p>

<div class="footnotes">
  <ol>
    <li id="fn:gotesting">
      <p><a href="https://github.com/golang/go/blob/master/src/testing/testing.go">Here</a> the code&nbsp;<a href="#fnref:gotesting" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/golang-turing-machine</wp:post_id>
        <wp:post_date>2019-01-19T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2019-01-19T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="busy-beaver"><![CDATA[["busy-beaver",]]></category>
        
          <category domain="post_tag" nicename="golang"><![CDATA["golang",]]></category>
        
          <category domain="post_tag" nicename="tibor"><![CDATA["tibor",]]></category>
        
          <category domain="post_tag" nicename="computational"><![CDATA["computational",]]></category>
        
          <category domain="post_tag" nicename="theory"><![CDATA["theory"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Smart SPA Shower at home]]></title>
        <link>made2591.github.io/posts/smart-spa-shower</link>
        <pubDate>2019-01-13T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="preamble">Preamble</h3>
<p>I recently bought 4 small smart bulbs - the latest one you most probably decide to buy for your smart home 😂😂 I think it’s useless talk about what you can do: I will only focus on the important things.</p>

<ul>
  <li>They DON’T need an hub;</li>
  <li>They support Alexa;</li>
  <li>They support Google Assistant;</li>
  <li>They support IFTTT;</li>
  <li>There is an app, called Smart Life (<a href="https://itunes.apple.com/us/app/smart-life-smart-living/id1115101477?mt=8">iOS</a>, <a href="https://play.google.com/store/apps/details?id=com.tuya.smartlife&amp;hl=it">Android</a>)</li>
</ul>

<p>But most important you can build your small SPA in your bathroom. If you are interested, go ahead!</p>

<p align="center"><img src="http://www.centrobenesserebluspa.com/wp-content/uploads/2016/10/Panoramica_blu-spa.jpg" style="width: 100%; marker-top: -10px;" /></p>

<p>And no, I will not transform your bathroom in the one shown in the picture: and no, that is not my bathroom unfortunately XD</p>

<h3 id="what-you-need">What you need</h3>
<p>Before going ahead with this, this is what you need:</p>

<ul>
  <li><a href="https://www.amazon.de/gp/product/B07JMR3ZZ9/ref=ppx_yo_dt_b_asin_title_o00__o00_s00?ie=UTF8&amp;psc=1">Smart Alexa Lamp, Maxcio Wifi Smart Lamp, 7W E27 RGB + W Multicoloured and Dimmable Light, Remote Control via App, Compatible with Amazon Alexa and Google Home</a> or any other product that use <a href="http://tuya.com/">Tuya</a> cloud network to communicate. This is a required condition to work with <a href="https://github.com/codetheweb/tuyapi">tuyapi</a>, a library for communicating with devices that use the Tuya cloud network. These devices are branded under many different names, but if your device works with the TuyaSmart app or port 6668 is open on your device chances are this library will work.</li>
  <li>A Google Home (mini or not) - or my <a href="https://gist.github.com/made2591/bca41ce13cced70bcb4c1712801726e3">Gist</a> with the colors mapped already for you (it should work, hopefully), otherwise you should reverse them manually by changing the color of the bulb with the Google Home app, running the server, getting the status of the lamp and save the data retrieved;</li>
  <li>A Node.js server - who doens’t have one today?! just grub a raspberry or you can even use your laptop, it will definetly not be a 24/7 shower;</li>
</ul>

<h3 id="setup-your-bulb">Setup your bulb</h3>
<p>Buy your bulb - pay attention to choose the correct socket for your lamp! - and setup your bulb with Smart Life. Then, sync your device with google home by asking him to “sync device”. I suggest to not setup rooms inside the app to avoid collision with rooms you can easily and more efficiently setup in your Google home app.</p>

<h3 id="the-id-key-and-ip">The ID, KEY and IP</h3>
<p>Before setup your node server, you need to discover some hidden information about your bulb. To retrieve needed ID and KEY of your bulb, just follow the instruction given <a href="https://github.com/codetheweb/tuyapi/blob/master/docs/SETUP.md">there</a>. Everywhere it is suggested to fix an IP to your bulb.</p>

<h3 id="how-to-discover-the-colors">How to discover the colors</h3>
<p>I retrieved them by looking at the change of status after every click over the colors available in the Google Home application</p>
<p align="center"><img src="https://i.imgur.com/3mGarQf.jpg" style="width: 30%; marker-top: -10px;" /></p>

<p>The White color looks like that:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="s2">"1"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="s2">"2"</span><span class="p">:</span><span class="s2">"white"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"3"</span><span class="p">:</span><span class="mi">255</span><span class="p">,</span><span class="w">
    </span><span class="s2">"4"</span><span class="p">:</span><span class="mi">255</span><span class="p">,</span><span class="w">
    </span><span class="s2">"5"</span><span class="p">:</span><span class="s2">"fffafa000005ff"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"6"</span><span class="p">:</span><span class="s2">"00ff0000000000"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"7"</span><span class="p">:</span><span class="s2">"ffff500100ff00"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"8"</span><span class="p">:</span><span class="s2">"ffff8003ff000000ff000000ff000000000000000000"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"9"</span><span class="p">:</span><span class="s2">"ffff5001ff0000"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"10"</span><span class="p">:</span><span class="s2">"ffff0505ff000000ff00ffff00ff00ff0000ff000000"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>The Color looks like that:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="s2">"1"</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span><span class="w">
    </span><span class="s2">"2"</span><span class="p">:</span><span class="s2">"colour"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"3"</span><span class="p">:</span><span class="mi">255</span><span class="p">,</span><span class="w">
    </span><span class="s2">"4"</span><span class="p">:</span><span class="mi">255</span><span class="p">,</span><span class="w">
    </span><span class="s2">"5"</span><span class="p">:</span><span class="s2">"f8f8ff00f007ff"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"6"</span><span class="p">:</span><span class="s2">"00ff0000000000"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"7"</span><span class="p">:</span><span class="s2">"ffff500100ff00"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"8"</span><span class="p">:</span><span class="s2">"ffff8003ff000000ff000000ff000000000000000000"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"9"</span><span class="p">:</span><span class="s2">"ffff5001ff0000"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"10"</span><span class="p">:</span><span class="s2">"ffff0505ff000000ff00ffff00ff00ff0000ff000000"</span><span class="w">
</span><span class="p">},</span></code></pre></figure>

<p>If you need to discover yours, or want to experiment with voltage etc, you can do it by changing the <a href="https://gist.github.com/made2591/bca41ce13cced70bcb4c1712801726e3">JSON</a> just in case.</p>

<h3 id="wrap-everything-in-a-loop">Wrap everything in a loop</h3>
<p>And now my stupid and bad written code to give your bathroom some colors in a loop of 3 seconds over the colors file provided above (<a href="https://gist.github.com/made2591/bca41ce13cced70bcb4c1712801726e3">Gist</a> just in case)</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">const</span> <span class="nx">TuyAPI</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'tuyapi'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">sleep</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'sleep'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">device</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TuyAPI</span><span class="p">({</span>
  <span class="na">id</span><span class="p">:</span> <span class="s2">"&lt;YOUR_BULB_ID&gt;"</span><span class="p">,</span>
  <span class="na">key</span><span class="p">:</span> <span class="s2">"&lt;YOUR_BULB_KEY&gt;"</span><span class="p">,</span>
  <span class="na">ip</span><span class="p">:</span> <span class="s2">"&lt;YOUR_IP_KEY&gt;"</span><span class="p">,</span>
  <span class="na">persistentConnection</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>

<span class="nx">device</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'connected'</span><span class="p">,()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Connected to device.'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">device</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'disconnected'</span><span class="p">,()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Disconnected from device.'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">device</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'data'</span><span class="p">,</span> <span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Data from device:'</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">device</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'error'</span><span class="p">,(</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Error: '</span> <span class="o">+</span> <span class="nx">err</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">device</span><span class="p">.</span><span class="nx">connect</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">colours</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">'./colours.json'</span><span class="p">,</span> <span class="s1">'utf8'</span><span class="p">));</span>

<span class="kd">function</span> <span class="nx">applyColour</span><span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">device</span><span class="p">.</span><span class="kd">set</span><span class="p">({</span>
    <span class="na">multiple</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">data</span><span class="p">:</span> <span class="p">{</span>
      <span class="s1">'1'</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="s1">'2'</span><span class="p">:</span> <span class="nx">info</span><span class="p">[</span><span class="s2">"2"</span><span class="p">],</span>
      <span class="s1">'5'</span><span class="p">:</span> <span class="nx">info</span><span class="p">[</span><span class="s2">"5"</span><span class="p">]</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">)</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">funcs</span> <span class="o">=</span> <span class="nx">colours</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">info</span> <span class="o">=&gt;</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">applyColour</span><span class="p">(</span><span class="nx">info</span><span class="p">))</span>

<span class="kd">const</span> <span class="nx">promiseSerial</span> <span class="o">=</span> <span class="nx">funcs</span> <span class="o">=&gt;</span>
  <span class="nx">funcs</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">promise</span><span class="p">,</span> <span class="nx">func</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="nx">func</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">concat</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">result</span><span class="p">),</span> <span class="nx">sleep</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">))),</span>
    <span class="nb">Promise</span><span class="p">.</span><span class="nx">resolve</span><span class="p">([]))</span>

<span class="nx">promiseSerial</span><span class="p">(</span><span class="nx">funcs</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">))</span>

<span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="nx">device</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span> <span class="p">},</span> <span class="mi">1000000</span><span class="p">);</span></code></pre></figure>

<h3 id="one-more-thing">One more thing</h3>
<p>To have a more relaxing experience you can even listen to <a href="spotify:artist:3yQUKaHkSwdGxlk8LxN5iu">The Relaxing Sounds of Swedish Nature</a> with your Google Home or any other device you want!</p>

<p>Thank you everybody for reading and have a good shower!!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/smart-spa-shower</wp:post_id>
        <wp:post_date>2019-01-13T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2019-01-13T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="smart"><![CDATA[["smart",]]></category>
        
          <category domain="post_tag" nicename="home"><![CDATA["home",]]></category>
        
          <category domain="post_tag" nicename="reverse-eng"><![CDATA["reverse-eng",]]></category>
        
          <category domain="post_tag" nicename="life"><![CDATA["life",]]></category>
        
          <category domain="post_tag" nicename="shower"><![CDATA["shower",]]></category>
        
          <category domain="post_tag" nicename="spa"><![CDATA["spa",]]></category>
        
          <category domain="post_tag" nicename="relax"><![CDATA["relax"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Machine Learning is useless]]></title>
        <link>made2591.github.io/posts/machine-learning</link>
        <pubDate>2018-12-19T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="preamble">Preamble</h3>
<p>I would like to say “recently”, but actually is almost a few years I heard - and I’m still hearing a lot about Machine Learning and I didn’t want to believe it until now - believe me, I truly didn’t want to believe it - but yes here we are Machine Learning ufficially replace Big Data as buzzy word of the this past years, most problably will be still the word of the next year and I could not be more sad, frustrated, and worried about. Please haters don’t hate me, Internet don’t misunderstand me, companies don’t hire me, but first of all - please - don’t teach anything to your machines before finishing this post (!) 🤓 because they never learnt anything until now and they always felt good about so please - keep them simple operating system as they are, or at least talk with them before enrolled them in any advanced analytics course.</p>

<p align="center"><img src="https://i2-prod.irishmirror.ie/incoming/article7633457.ece/ALTERNATES/s615b/Ben-Affleck-in-Batman-V-Superman-interview.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="introduction">Introduction</h3>
<p>The first question everyone in the world should first ask to himself before even going to Google searching for the latest super cool tool to solve his/her problem is <em>when a ML tool is good to solve a problem?</em> I said it again, quoting the question because it’s crucial:</p>

<blockquote>
  <p>When a Machine Learning tool is good to solve a problem?</p>
</blockquote>

<p>The answer is quite simple, but it becomes complicated because there are many considerations to do before having the right answer. To better provide an answer to this question, maybe it’s important to remember what Machine Learning is and what it is not.</p>

<h3 id="what-machine-learning-is-not">What Machine Learning is not</h3>
<p>Machine learning is not a one-step solution, like “I need to prepare a cake. I need flour eggs sugar and lemon cream. Done”. It can not solve all business problems or turns struggles into successes: I said it again just to be sure will be printed in the T-Shirt for the next year.</p>

<blockquote>
  <p>Machine Learning can not solve all business problems or turns struggles into successes.</p>
</blockquote>

<p>The 4 commandments.</p>

<h4 id="cons-number-1">Cons number 1</h4>
<p>This is to say that no, you can’t go to your customers - internal or external, it doens’t matter - and convince them with sentence like “I can solve your problem with Machine Learning” because the answer is “No, you can’t” and if you’re now worried because you think you’re not smart enough / prepared enough / young enough / Batman enough to do it then again my opinion is “No, you are not Batman enough for sure, and this is not your fault but please DON’T spread Machine Learning religion more than what has already been done by government, taxi-driver and even icecream-seller”.</p>

<p align="center"><img src="https://fsmedia.imgix.net/96/0b/cb/fe/bf2f/4d5a/b561/767528276171/batman-the-dark-knight.jpeg?rect=0%2C0%2C1280%2C640&amp;dpr=2&amp;auto=format%2Ccompress&amp;w=650" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="cons-number-2">Cons number 2</h4>
<p>Machine Learning is not a tool to increase customer satisfaction - yes, I know you’re thinking about beautifull recommendation system to provide insights and bring your customer to spend 200$ dollars on services / product / whatever you sell because no, machine learning will not provide more money to spend to your customer so most probably no, you will not increase your revenue - like magically transform milions in billions because you now know from your past that you wasted a lot of money in doing / producing / party-rocking / whatever - whatever. Unfortunately, you and your customer will remain poor as you are right now.</p>

<p align="center"><img src="https://d3olfrdxinh85x.cloudfront.net/wp-content/uploads/5-tips-for-communicating-with-unhappy-customers.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="cons-number-3">Cons number 3</h4>
<p>If a problem require identify causality, the Machine Learning probably won’t be a good solution: what I mean with causality? Sorry, wrong question. Why? Well it’s super simple, just think about it for a second before going ahead. The answer is - of course - because you really don’t know the causes of almost anything inside your business and if you’re thinking “No dude, I perfectly know!” then you are most probably making a lot of assumptions about things out of your perimeter - you probably don’t know - or even worst - you’re not interested in - about the problem you want to solve in the business you find yourself.</p>

<p>Why even worst? Because if something is out of your scope, is unlikely finding yourself jump into for any reasons, so he will remain out of your perimeters. The biggest your business is, the more is difficult to have a clear detailed big pictures of causes and consequences of everything and thus, taking / making the right assumption about something.</p>

<p align="center"><img src="https://www.studiarapido.it/wp-content/uploads/2018/01/la-fisica-secondo-aristotele.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="cons-number-4">Cons number 4</h4>
<p>If there is not a lot of relevant data to fill a machine learning model, then it will not produce a valuable solution. This is one is pretty simple: how can you image to produce valuable information from not relevant data. I mean, it’s already the challenge of a lifetime produce valuable insights from cleaned-approved-by-NASA data! Don’t get me wrong, but relevant data are a must, otherwise skip without even investigating a machine learning solution: and please, don’t forget that even in the case ML is the right solution, the model built is no more valuable than the data you provide to it. Repeat it again:</p>

<blockquote>
  <p>The model built is no more valuable than the data you provide to it.</p>
</blockquote>

<p>Ok then….what can machine learning do?</p>

<p align="center"><img src="https://ih1.redbubble.net/image.217134661.9959/flat,1000x1000,075,f.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="what-machine-learning-can-do">What Machine Learning can do</h3>
<p>If you follow AWS/Google/Microsoft/YourFamilyDoctor guidance, they all will agree is saying that <em>It opens doors to innovation, true collaboration and can help applications in providing smarter solutions.</em> - and no, I will not quote this kinda <code class="highlighter-rouge">supermarket sentence</code>. Yes, but then…what can we say about Machine Learning before going for some insights? Because, as far as we all know there are many <em>general problems</em> (more on that later) solved by people around world companies, but only a portion of these companies succed in taking advantage of machine learning models.</p>

<p>Machine Learning is a tool that can provide you solution for solving persistent business problems: ok, fair enough in the end, because this is the same approach we use for automation. You don’t automate something that has to be done only once: ok maybe we both do, but it’s only because we have a problem, OK?!</p>

<p align="center"><img src="http://www.imgcinemas.it/wp-content/uploads/2018/06/nicage.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="when">When</h4>
<p>Starting from that, let’s do a bullet list when a Machine Learning tool is good to solve a problem - our initial question.</p>

<ul>
  <li>If the problem you want to solve is persistent - already discussed;</li>
  <li>If the team that aimed to solve the problem has persistent problem (first evaluate challenges they need to face and starting from the solution they want to put in place to solve the problem, evaluate the pro and cons);</li>
  <li>If the solution needs to scale;</li>
  <li>If the problem requires personalization in order to be solved;</li>
</ul>

<h4 id="how">How</h4>
<p>Still, it’s identify if your problem and team fit these points and, even if you are able to, then you should start worring about what does a successfull ML solution require to be applied.</p>

<ul>
  <li>People: there are several skillsets that are necesserally to have in order to address correctly ML solvable problems. These are Machine Learning Scientist, Applied Scientist, Data Scientist, Data Engineers, Software Engineers, Program Managers and Techincal Program Managers only to name a few of them;</li>
  <li>Time: thinking an ML solution, building it, testing in production and evaluate it along the way it’s a super time consuming activity. This can take weeks, months and possibly even years depending on the problems. And this imply taking in consideration human factors, discussions, alignment, etc.</li>
  <li>Money: there are cost not only for infrastructure, but also in term of right skillset, technologies to be learnt, etc.</li>
</ul>

<h3 id="not-only-data-the-six-questions">Not only Data: the Six Questions</h3>
<p>Much of the data are useless, we all now about this. The problem is that even the ML model results are often hard to understand, and if they seems easy to understand they still could be wrong. Machine Learning cannot help you identify team who can provide data, team that can clean them correctly or team that can correlate dataset with problems. More in general there are a few questions you should first ask to everyone who want to use ML inside your company, before going for an ML solution to solve a business problem.</p>

<ul>
  <li><span style="color:#A04279; font-size: bold;"><strong>What are the made assumptions?</strong></span> Ask detailed explanation about assumptions on data used and algorithm used, to identify critical blocker for your ML solution to perform well.</li>
  <li><span style="color:#A04279; font-size: bold;"><strong>What is your learning target?</strong></span> The learning target of an algorithm is namely the value that should be output or the hypthesis. If you show add for a particular customer, it will buy the product? Hypthesis testing over huge amount of data it’s the basis for ML success.</li>
  <li><span style="color:#A04279; font-size: bold;"><strong>What type of ML problem is it?</strong></span> There are many kind of problems already solved and identify similar problems can arise good discussion points.</li>
  <li><span style="color:#A04279; font-size: bold;"><strong>Why did you choose this algorithm?</strong></span> Ask whoever decided to do something why it was decided to do it like that, which is the ratio behind is key. There could be a baseline in literature to have comparison, etc.</li>
  <li><span style="color:#A04279; font-size: bold;"><strong>How will you evaluate the model performance?</strong></span> Depending on the business problem, performance of the Machine Learning problem can be evaluated and is useful for every team know a priori how they will evaluate results.</li>
  <li><span style="color:#A04279; font-size: bold;"><strong>How confindent are you that can you can generalize result?</strong></span> If the ML will work on specific dataset, maybe is not so a good solution.</li>
</ul>

<p align="center"><img src="https://www.sciencealert.com/images/2018-03/processed/666_web_600.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="scientist">Scientist</h3>
<p>It is important to understand that contribute to - and open source even - new algorithms can be a main driver to scientist to apply for or even only stay in particular company. The collaboration opportunity with open source comunity create best solutions. Since Machine Learning grows fast, another crucial aspect is that building good ML models require scientists that constatly learn and pick up latest trends in ML. I will quote this because it’s CRUCIAL</p>

<blockquote>
  <p>Another crucial aspect is that building good ML models require scientists that constatly learn and pick up latest trends in ML</p>
</blockquote>

<p>Scientists should have access to relevant literature, and the opportunities to attend relevant techtalks, conferences and workshops.</p>

<h3 id="conclusion">Conclusion</h3>
<p>Understand your process and your business internally is mandatory. Figure out if you can correlate data you have with the problem you want to solve is mandatory. Remember also that no ML model will help you in doing this.</p>

<p>Thank you a lot Lauren Thomas for your speech.</p>

<p>Thank you everybody for reading!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/machine-learning</wp:post_id>
        <wp:post_date>2018-12-19T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-12-19T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="ml"><![CDATA["ml",]]></category>
        
          <category domain="post_tag" nicename="fundamentals"><![CDATA["fundamentals",]]></category>
        
          <category domain="post_tag" nicename="approach"><![CDATA["approach",]]></category>
        
          <category domain="post_tag" nicename="work"><![CDATA["work",]]></category>
        
          <category domain="post_tag" nicename="thoughts"><![CDATA["thoughts",]]></category>
        
          <category domain="post_tag" nicename="life"><![CDATA["life"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[My first UniKernel image for sequence prediction]]></title>
        <link>made2591.github.io/posts/compact-prediction-tree</link>
        <pubDate>2018-11-30T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>Predicting the next item of a sequence over a finite alphabet has important applications in many domains. Since I always wanted to implemented something like that, while I was looking for an interesting approach I found this interesting idea based on tree. And you don’t deal with trees since a lot, be prepared because as usual it seams simple, but it not. Moreover, since I like Golang and I always wanted to try <a href="https://github.com/solo-io/unik">UniK</a>, I decided to implement my version of the CPT using Golang and use this exercise as a source to build my first unikernel image.</p>

<p align="center">
    <img src="https://i.imgur.com/fBN2q8z.png" alt="golang" style="width: 28%; marker-top: -10px;" />
    <img src="https://i.imgur.com/c7wzYDI.png" alt="sequenceprediction" style="width: 25%; marker-top: -10px; margin-left:15px" />
    <img src="https://i.imgur.com/suaVhnM.png" alt="unik" style="width: 20%; marker-top: -10px;" />
</p>

<p>The entire code is available in the Github repo <a href="https://github.com/made2591/go-cpt">here</a>.</p>

<h4 id="too-much-all-together">Too much all together</h4>
<p>I knew just a little bit of Golang, almost anything about the algorithm and nothing at all about unik. Let’s start from the algorithm.</p>

<h4 id="compact-prediction-tree">Compact Prediction Tree</h4>
<p>A <strong>CPT</strong> (<em>C</em>ompact <em>P</em>rediction <em>T</em>ree) losslessly compress the training data so that all relevant information is available for each prediction. Nice. The approach originally proposed<sup id="fnref:op"><a href="#fn:op" class="footnote">1</a></sup> by the T. Gueniche and P. F. Viger is incremental, offers a low time complexity for its training phase and it is easily adaptable for different applications and contexts. The performance of <strong>CPT</strong> with state of the art techniques, namely PPM (<em>P</em>rediction by <em>P</em>artial <em>M</em>atching), DG (<em>D</em>ependency <em>G</em>raph) and *all-K-th-order Markov chain. The results show that <strong>CPT</strong> yield higher accuracy on most datasets (up to 12% more than the second best approach), has better training time than DG and PPM, and is considerably smaller than all-K-th-Order Markov.</p>

<h4 id="the-structure">The structure</h4>
<p>The entire code is based on two foundamental structure: a trie<sup id="fnref:trie"><a href="#fn:trie" class="footnote">2</a></sup> or <code class="highlighter-rouge">PredictionTree</code> (<a href="https://github.com/made2591/go-cpt/blob/master/model/predictionTree/PredictionTree.go">code</a> of the package) and n <code class="highlighter-rouge">InvertedIndexTable</code> (<a href="https://github.com/made2591/go-cpt/blob/master/model/invertedIndexTable/InvertedIndexTable.go">code</a>).</p>

<h4 id="prediction-tree">Prediction Tree</h4>
<p>A Prediction Tree is a struct composed by 3 element:</p>
<ul>
  <li>Item – the actual item stored in the tree, that in our case represent a 32bit int;</li>
  <li>Children – the children of the tree, a slice of <code class="highlighter-rouge">PredictionTree</code> (see the code);</li>
  <li>Parent – A reference to the Parent tree of the tree</li>
</ul>

<p>This is the reason a Prediction Tree is basically a trie data structure which compresses the entire training data into the form of a tree. Let’s say you have 4 difference sequence that contains a set of symbol predefined, like the one below:</p>

<ul>
  <li>[A, C, F, E]</li>
  <li>[A, C, B]</li>
  <li>[F, D, A]</li>
  <li>[F, E, D]</li>
</ul>

<p>Then, the respective Prediction Tree will be like the one below:</p>

<p align="center"><img src="https://i.imgur.com/N8FKLFq.png" alt="perceptron" style="width: 30%; marker-top: -10px;" /></p>

<h4 id="inverted-index-table">Inverted Index Table</h4>
<p>The Inverted Index Table maintain a reference for each symbol to respective sequences it belongs to. Let’s say you have 4 difference sequence that contains a set of symbol predefined, like the one below:</p>

<ul>
  <li>[A, C, F, E]</li>
  <li>[A, C, B]</li>
  <li>[F, D, A]</li>
  <li>[F, E, D, C]</li>
</ul>

<p>Then, the respective Inverted Index Table will be like the one below:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center">seq_1</th>
      <th style="text-align: center">seq_2</th>
      <th style="text-align: center">seq_3</th>
      <th style="text-align: center">seq_4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">A</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">B</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
    </tr>
    <tr>
      <td style="text-align: center">C</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">D</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">E</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">F</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">0</td>
      <td style="text-align: center">1</td>
      <td style="text-align: center">1</td>
    </tr>
  </tbody>
</table>

<p>In the code a list of sequence references is maintained instead of a table.</p>

<p>#### Training (build the structs)
The training step consists in fullfill the structs by scanning a list of training sequences (list of list of symbols).</p>

<h4 id="testing-prediction">Testing (prediction)</h4>
<p>The prediction step involves making predictions for each testing sequence in an iterative manner. For a single row, the sequences similar to that row are found thanks to the Inverted Index Table. The consequent of the similar sequences are isolated and maintained in a dictionary with their scores. In the end, this dictionary is used to return the item with the highest score as the final prediction.</p>

<ul>
  <li>
    <p>The first step consists in finding the sequences <em>similar</em> to the target sequence [A,C]. These similar sequences are identified by finding the unique items in the target sequence, finding the set of sequence IDs in which a particular unique item is present and then, taking an intersection of the sets of all unique items. So the sequences in which A is present are the 1 and 2. C also is present in 1, 2 and 4. So the sequences somehow similar to [A,C] - our target sequence - is the intersection of set [1,2] and [1,2,4], thus [1,2] - or [A, C, F, E] and [A, C, B];</p>
  </li>
  <li>
    <p>The second step consists in finding the <em>consequent</em> of each similar sequence to the target sequence - still [A,C]. For each similar sequence, consequent is defined as the sub-sequence after the last occurrence of the last item of the target sequence in the similar sequence, without the items present in the target sequence. As we said the similar sequences are [1,2] - [A, C, F, E] and [A, C, B].</p>
  </li>
</ul>

<p>[A, C, F, E]: the subsequence after last occurence of C is [F, E]. Both of them are not present in [A,C], thus the consequent of this similar sequence is [F, E]. If you encountered in this set element part of the original target sequence, remove them;
[A, C, B]: the subsequence after last occurence of C is [B]. Again, B is not present in [A,C], thus the consequent of this similar sequence is [B];</p>

<ul>
  <li>The third step consists in adding scoring all the consequents of all the similar sequences for the target sequence in a dictionary along with their score. Let be the dictionary empty at the beginning - the score for the items in the Consequent [F, E] is calculated by following this rule: if the item is not present in the dictionary, then the score = 1 + (1 / number of similar sequences) + (1 / number of items currently in the countable dictionary + 1) * 0.001. Otherwise, score = the same multiplied by the oldscore.</li>
</ul>

<p>So for element E, i.e. the first item in the consequent of the first similar sentence, the score will be
score[F] = 1 + (1/3) + 1/(0+1) * 0.001 = 1.3343
score[E] = 1 + (1/3) + 1/(1+1) * 0.001 = 1.3338
score[B] = 1 + (1/3) + 1/(2+1) * 0.001 = 1.3336</p>

<p>Finally, [A,C] the key is returned with the greatest value in the dictionary of scores as the prediction. In the case of the above example, F is returned as a sequence prediction.</p>

<h3 id="unikimage">UniKImage</h3>

<blockquote>
  <p>True, linux is monolithic, and I agree that microkernels are nicer… As has been noted (not only by me), the linux kernel is a minuscule part of a complete system: Full sources for linux currently runs to about 200kB compressed. And all of that source is portable, except for this tiny kernel that you can (probably: I did it) re-write totally from scratch in less than a year without having /any/ prior knowledge.</p>

  <p>Linus Torvalds, 1992</p>
</blockquote>

<p><a href="https://github.com/solo-io/unik">UniK</a> is a tool for compiling application sources into unikernels (lightweight bootable disk images) and MicroVM rather than binaries. UniK runs and manages instances of compiled images across a variety of cloud providers as well as locally: you can utilize it with a simple docker-like command line interface, that let you make and build unikernels and MicroVM as easy as building containers. UniK is built to be easily extensible, allowing (and encouraging) adding support for unikernel/MicroVM compilers and cloud providers. <a href="https://github.com/solo-io/unik/blob/master/docs/architecture.md">here</a> more details about the architecture.</p>

<h4 id="steps-to-build-image">Steps to build image</h4>
<p>To have the sequence prediction engine available as a bootable image, I used as said in the beginning. You can have a look at the repository on how to install everything is required. In the next paragraph I will provide someinsight you can find the original repository.</p>

<h5 id="install-and-configure-unik">Install and configure UniK</h5>
<p>Install unik by following instruction in official repository from <a href="https://github.com/solo-io/unik/blob/master/docs/install.md">here</a>.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">git clone https://github.com/solo-io/unik.git
<span class="nb">cd </span>unik
make</code></pre></figure>

<p>then follow configuration step <a href="https://github.com/solo-io/unik/blob/master/docs/configure.md">here</a>.</p>

<h5 id="golang-server">Golang server</h5>
<p>Again, taken from unik repository. You have to ensure the project is cloned in $GOPATH, then:</p>

<ul>
  <li>Go installed and your $GOPATH configured (see getting started with Go)</li>
  <li>Your project should be located within your system’s $GOPATH (if you’re unfamiliar with Go and the $GOPATH convention, read more here)</li>
  <li>There should be a main package in the root directory of your project</li>
  <li>Godeps installed (run go get github.com/tools/godep once Go is installed)</li>
  <li>Run GO15VENDOREXPERIMENT=1 godep save ./… from the root of your project.</li>
</ul>

<p>This will create a Godeps/Godeps.json file as well as place all dependencies of your project in the ./vendor directory. This will allow UniK to compile your application entirely using only the root directory of your project.</p>

<p>Open a shell and run the daemon - then keep it running:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">unik daemon <span class="nt">--debug</span></code></pre></figure>

<p>To build and run the image - remember to use godep to let unik include dependencies first!! - run:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">unik build <span class="nt">--name</span> go-cpt-image <span class="nt">--path</span> ./ <span class="nt">--base</span> rump <span class="nt">--language</span> go <span class="nt">--provider</span> virtualbox <span class="nt">--force</span>
unik run <span class="nt">--instanceName</span> go-cpt-instance <span class="nt">--imageName</span> go-cpt-image</code></pre></figure>

<p>To retrieve the running instances:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">unik instances</code></pre></figure>

<p>You should get something like this:</p>
<p align="center"><img src="https://github.com/made2591/go-cpt/blob/master/unik.png?raw=true" alt="golang" style="width: 100%; marker-top: -10px;" /></p>

<p>You can see IP assigned to instances in the last column of the output. To see the logs of the running instances run:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">unik logs <span class="nt">--instance</span> go-cpt-instance</code></pre></figure>

<p>What this image does is actually expose the different endpoint to initialize training and make prediction by rest api - <code class="highlighter-rouge">it's only a draft</code>:</p>

<p>A sample file are already uploaded into the upload folder: you can modify the <code class="highlighter-rouge">main.go</code> root of the project to avoid cutting the training and testing set. Otherwise, to see the run you can both execute the code locally or</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">curl http://&lt;YOUR_RUNNING_INSTANCES&gt;:8080/initcpt</code></pre></figure>

<p>You should see predictions for the first 10 sequences :-)</p>
<p align="center"><img src="https://github.com/made2591/go-cpt/blob/master/predictions.png?raw=true" alt="golang" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="conclusion">Conclusion</h4>
<p>Many thanks to <a href="https://github.com/solo-io/unik/graphs/contributors">UniK contributors</a> for sure, to <a href="https://github.com/NeerajSarwan">NeerajSarwan</a> for his work over CPT and all who want to contribute</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:op">
      <p>The original paper is available at <a href="https://www.researchgate.net/publication/263696690_Compact_Prediction_Tree_A_Lossless_Model_for_Accurate_Sequence_Prediction">here</a>.&nbsp;<a href="#fnref:op" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:trie">
      <p><a href="https://en.wikipedia.org/wiki/Trie">Trie</a> (Wikipedia).&nbsp;<a href="#fnref:trie" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/compact-prediction-tree</wp:post_id>
        <wp:post_date>2018-11-30T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-11-30T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="unik"><![CDATA["unik",]]></category>
        
          <category domain="post_tag" nicename="cpt"><![CDATA["cpt",]]></category>
        
          <category domain="post_tag" nicename="ml"><![CDATA["ml",]]></category>
        
          <category domain="post_tag" nicename="sequence"><![CDATA["sequence",]]></category>
        
          <category domain="post_tag" nicename="prediction"><![CDATA["prediction"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Migrations in modern companies: how to expect the unexpected from a real-life point of view]]></title>
        <link>made2591.github.io/posts/app-migrations</link>
        <pubDate>2018-11-18T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="prelude">Prelude</h3>
<p><code class="highlighter-rouge">Disclaimer</code> this post contains references to real problems, addressed in a disuruptive and totally not informed way. Lot of employees were mistreated to have enough material to write this post. What you will read is played by professionals: dont’t try this in your Company.</p>

<p align="center"><img src="https://i.imgur.com/48kN2Tb.jpg" alt="matrixbug" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="the-truth-about-companies">The truth about companies</h4>
<p>Today every company in this beautifull world suffers the same problem: the migration problem. Yes, I know you got it and you’re kind of thinking “what the fuck?! Am I NOT alone in this shit?!?!” and the answer is “Yes. You’re not. And most probably is the only good news, if it is”. Yeah, you correctly understood THAT’s The - Problem - (of) TODAY, but it was already yesterday and most probably - and unfortunately - will be even tomorrow. And, of course, this Problem - in memories of all employees became crazy for this, let call it simply The One from now on - doesn’t have a real solution. It’s not like choosing where you want to spend two weeks in the summer - maybe it should. Let’s investigate a little bit why 🧐</p>

<p align="center"><img src="https://i.imgur.com/fI5kqqB.jpg" alt="matrixbug" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="lets-go-somewhere-else">Let’s go somewhere else</h4>
<p>Ok I would say everybody lives this migration p sorry - The One. But migration of… what, exactly? Well, I work in IT but this time in a sense it doesn’t care too much: applications, of course, but sometimes even buildings, printers, desks. That is… funny, and weird, at the same time. It seems like a certain point both the tangible and intangible things inside the company they start feeling bad where they are. So let’s move. But… Why?!</p>

<p>Yeah THAT’s a good question… you know what? Who really knows. There are many different-already-written-answers to this and so many books were sold. I imagine the process like a night in a pub between friends, someone just propose an idea, and then after a while you can see piece of things office moving around, new hardware suffering old age, old application suffering new weather inside fresh datacenters, and so on. It’s like the companies at certain point start to feel unconfortable in the place they are: and they migrate, like an herd of elephants that are bored by sun, looking for a place in the shade. Totally comprehensible, they have done with this place: it’s the time for a change.</p>

<p align="center"><img src="https://i.imgur.com/HLzG6d0.jpg" alt="matrixbug" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="choose-the-destination">Choose the destination</h4>
<p>Where these applications go? From the experience I collected so far, I found the DEFINITIVE answer: it depends on the quarter. Sometimes is better moving to North, in that sort of old temple where everything is green and cheap (<em>really?</em>  3,2,1, ready: fight), some other prefer exotical places. Actually, to answer this question we should first see from where these applications will take the plane, to find a common airport for them to move - more on this later. It’s funny ‘cause - again as in real life - it’s like looking for last minute flights, for somewhere you don’t know where, bringing with you you don’t know how much you will be able to, with someone that will come prepared and who will not, people wearing wrong hats considering the sun at destination, someone who will be enthusiast at the beginning, someone else who won’t, someone that since the very first night at the pub wasn’t, but comes out just 20 minutes before leaving by saying “can I come with you I broke up with my old application” - mmm? - etc.</p>

<p>It seems funny, right 😃 ?! but you know it isn’t 😈, in reality it’s like an hurricane: that is, when you know it reached you, it’s always too late. Do you know that feeling when everyone around you have already booked the summer vacation, it’s still December and you feel like what the fuck I don’t even know yet if I will survive the Christmas? Perfect, that’s exactly the feeling and level of anxiety the companies share. Fortunately, the destination is green, relaxed and cool.</p>

<p align="center"><img src="https://i.imgur.com/8EfrjVv.jpg" alt="matrixbug" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="tryining-fixing-the-unfixable">Tryining fixing the unfixable</h4>
<p>Once arrived, everybody starts looking for the best room. And there always someone complaining because the last year there was a view to the see, the sunset, the mountains, the fucking dolphins or whatever. Unfortunately you know it’s not a vacation, it’s permanent and the company moved: and it’s quite impossible stop an elephant as far as I know.
So in the company journey people start splitting between people that agree, people that disgree and people that misagree, i.e. people that agree, or disagree, by misunderstanding. Complicated to explain, but somehow (I guess) simple to imagine 😅</p>

<p>So the company thought once arrived it would be only a matter of fixing the applications, but now it discovered it has to fix people inside. No ones excluded. The problem is no only more fixing the unfixable - because some piece were lost during movement and/or who really knows the reasons. The problem is making people agree, while the company has already started moving.</p>

<h3 id="conclusion">Conclusion</h3>
<p>Instead of spending resources in finding out how to migrate the company, plan how to migrate people because applications are vanishing, instead people are not…. instead, they constitute the company itself 🙃</p>

<p>Bye</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/app-migrations</wp:post_id>
        <wp:post_date>2018-11-18T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-11-18T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="fundamentals"><![CDATA[["fundamentals",]]></category>
        
          <category domain="post_tag" nicename="approach"><![CDATA["approach",]]></category>
        
          <category domain="post_tag" nicename="work"><![CDATA["work",]]></category>
        
          <category domain="post_tag" nicename="thoughts"><![CDATA["thoughts",]]></category>
        
          <category domain="post_tag" nicename="life"><![CDATA["life"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ACT-R by John R. Anderson - Part III]]></title>
        <link>made2591.github.io/posts/act-r-part-III</link>
        <pubDate>2018-11-15T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/act-r-part-III</wp:post_id>
        <wp:post_date>2018-11-15T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-11-15T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="cognitive"><![CDATA["cognitive",]]></category>
        
          <category domain="post_tag" nicename="architecture"><![CDATA["architecture",]]></category>
        
          <category domain="post_tag" nicename="reasoning"><![CDATA["reasoning",]]></category>
        
          <category domain="post_tag" nicename="knowledge"><![CDATA["knowledge",]]></category>
        
          <category domain="post_tag" nicename="representation"><![CDATA["representation"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How my Elman network learnt to count]]></title>
        <link>made2591.github.io/posts/elman-student</link>
        <pubDate>2018-11-13T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>This is actually a sort of back-to-the-future post because it’s related to something I completed one year ago: I built this Elman network and it learnt to count. What I shame, I forgot it, now it’s kind of its first birthday so let’s celebrate :D</p>

<p align="center"><img src="https://static1.squarespace.com/static/550ca181e4b00ab6c2a10330/t/55afd73be4b0ba2638779743/1437587260614/boy-going-back-to-school.jpg?format=750w" alt="matrixbug" style="width: 100%; marker-top: -10px;" /></p>

<p>This is Elman, the best in class in adding int32 numbers. For everybody who already knows what I will talk about (what?!), <a href="https://github.com/made2591/go-perceptron-go">here</a>’s the Github repo. I’m sorry for the name, it’s still go-perceptron-go but that repo contains my GoLang ANN.</p>

<h3 id="lets-start-from">Let’s start from</h3>
<p>You were wondering what the f**k is an Elman network: to be honest, I didn’t understand exactly but <a href="https://made2591.github.io/posts/neuralnetwork">this</a> post related to the perceptron could be a good starting point - at least, somehow linked cause in the end this network share a lot with multilayer perceptron. Ignored? Perfect. In one sentence: an Elmann network is a MFNN with an extra context layer. That is a Multilayer Feedforward Neural Network with an extra context layer: the point is that, unfortunately, this context layer create a closed circle in the network - thus, in the way the information is progated.</p>

<p>That means that Elman network are actually RNN, or Recurrent Neural Network even. That are…wait. Let’s make a step back.</p>

<p align="center"><img src="https://i.imgur.com/GbUJP5R.png" alt="matrixbug" style="width: 40%; marker-top: -10px;" /></p>

<h4 id="rnns-vs-standard-anns">RNNs vs Standard ANNs</h4>
<p>As you know an ANN can be described as a set of neuron units (read perceptron), organized in layers, linked together in several ways to achieve specific - mainly classification - jobs. What it came out is that by changing the links used to attach the neural network layers you can expect different behaviour. What does it mean changing the way the information flow?</p>

<p>The idea behind RNNs is to make use of <em>sequential information</em>. In a traditional neural network we assume that all inputs (and outputs) are independent between each other but, for many tasks… that’s a very bad idea. For instance, if you want to predict the next word in a sentence you better know which words came before it.</p>

<p>RNNs are called <em>recurrent</em> because they perform the same task for every element of a sequence, with the output being depended on the previous computations. Another way to think about RNNs is that they have a <em>memory</em> which captures information about what has been calculated so far. In theory RNNs can make use of information in arbitrarily long sequences, but in practice they are limited to looking back only a few steps.</p>

<h4 id="base-structures---code">Base structures - <a href="https://github.com/made2591/go-perceptron-go/tree/master/model/neural">code</a></h4>
<p>To create a neural network, the first thing you have to do is dealing with the definition of data structures. I create a <code class="highlighter-rouge">neural</code> package to collect all files related to architecture structure and elements.</p>

<h5 id="pattern---code">Pattern - <a href="https://github.com/made2591/go-perceptron-go/blob/master/model/neural/pattern.go">code</a></h5>
<p>The <code class="highlighter-rouge">Pattern</code> struct represent a single input struct. Look at the code:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// Pattern struct represents one pattern with dimensions and desired value</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">Pattern</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Features</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="x">
	</span><span class="n">SingleRawExpectation</span><span class="x"> </span><span class="kt">string</span><span class="x">
	</span><span class="n">SingleExpectation</span><span class="x"> </span><span class="kt">float64</span><span class="x">
	</span><span class="n">MultipleExpectation</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p>It satisfies our needs with only four fields:</p>
<ul>
  <li><code class="highlighter-rouge">Features</code> is a slice of 64 bit float and this is perfect to represent input dimension,</li>
  <li><code class="highlighter-rouge">SingleRawExpectation</code> is a string and is filled by parser with input classification (in terms of belonging class),</li>
  <li><code class="highlighter-rouge">SingleExpectation</code> is a 64 bit float representation of the class which the pattern belongs,</li>
  <li><code class="highlighter-rouge">MultipleExpectation</code> is a slice of 64 bit float and it is used for multiple class classification problems;</li>
</ul>

<p>Why patterns? Because, our goal is to teach an ANN doing something, in this case counting, so… our patterns will be our binary number expressed as slice of 0 and 1. Immagine that we are giving a children a list of operation with numbers - in binary, poor little child. Anyway, this is to say: that child in a way or in another (definitely in another) will learn how to sum integer.</p>

<p>Who gives these number? The function <code class="highlighter-rouge">CreateRandomPatternArray(d, k)</code> that actually return a slice of <code class="highlighter-rouge">Pattern</code> (binary number). Perfect! We have numbers!</p>

<h5 id="neuron---code">Neuron - <a href="https://github.com/made2591/go-perceptron-go/blob/master/model/neural/neuronUnit.go">code</a></h5>
<p>The <code class="highlighter-rouge">NeuronUnit</code> struct represent a single computation unit. Look at the code:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// NeuronUnit struct represents a simple NeuronUnit network with a slice of n weights.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">NeuronUnit</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Weights</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="x">
	</span><span class="n">Bias</span><span class="x"> </span><span class="kt">float64</span><span class="x">
	</span><span class="n">Lrate</span><span class="x"> </span><span class="kt">float64</span><span class="x">
	</span><span class="n">Value</span><span class="x"> </span><span class="kt">float64</span><span class="x">
	</span><span class="n">Delta</span><span class="x"> </span><span class="kt">float64</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p>A neuron corresponds to the simple binary perceptron originally proposed by Rosenblat. It is made of:</p>
<ul>
  <li><code class="highlighter-rouge">Weights</code>, a slice of 64 bit float to represent the way each dimensions of the pattern is modulated,</li>
  <li><code class="highlighter-rouge">Bias</code>, a 64 bit float that represents NeuronUnit natural propensity to spread signal,</li>
  <li><code class="highlighter-rouge">Lrate</code>, a 64 bit float that represents learning rate of neuron,</li>
  <li><code class="highlighter-rouge">MultipleExpectation</code>, a 64 bit float that represents the desired value when I load the input pattner into network in Multi NeuralLayer Perceptron,</li>
  <li><code class="highlighter-rouge">Delta</code>, a 64 bit float that mantains error during execution of training algorithm (later);</li>
</ul>

<p>Again, every neuron of Elmann is a neuron in our neural child (what?!). Next step</p>

<h5 id="again-perceptrons">Again perceptrons?</h5>
<p>As you know, the single perceptron schema is implemented by a single neuron. The easiest way to implement this simple classifier is to establish a threshold function, insert it into the neuron, combine the values (eventually using different weights for each of them) that describe the stimulus in a single value, provide this value to the neuron and see what it returns in output. The schema show how it works:</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/6/60/ArtificialNeuronModel_english.png" alt="perceptron" /></p>

<p>We know that multilayer neural networks are a combo of element like the one shown above etc. Thus, in what is different an Elman network? Actually, as we said the only difference is the presence of a context layer - yes, the training algorithm is the back propagation as the one explained for perceptron (<strong>almost</strong>). Let’s say that an Elmann network is a three-layer network with the addition of this set of <em>context units</em>. The middle (hidden) layer is connected to these context units fixed with a weight of one. At each time step, the input is fed-forward and a learning rule is applied. The fixed back-connections save a copy of the previous values of the hidden units in the context units (since they propagate over the connections before the learning rule is applied). Thus the network can maintain a sort of state, allowing it to perform such tasks as <em>sequence-prediction</em> that are beyond the power of a standard multilayer perceptron.</p>

<h6 id="back-propagation---differences">Back propagation - differences</h6>
<p>Ok, the code is almost the same as defined for Perceptron, available <a href="https://github.com/made2591/go-perceptron-go/blob/master/model/neural/multiLayerNetwork.go">here</a>. Actually, it is because in the end the only difference is that we want the neural network to be able to store the neural hidden values at every step in the context. In fact, to preserve the MLPerceptron struct I extended the two method involved in training, <code class="highlighter-rouge">BackPropagate</code> and <code class="highlighter-rouge">Execute</code>, with an optional argument (options …int).</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// BackPropagation algorithm for assisted learning. Convergence is not guaranteed and very slow.</span><span class="x">
</span><span class="c">// Use as a stop criterion the average between previous and current errors and a maximum number of iterations.</span><span class="x">
</span><span class="c">// [mlp:MultiLayerNetwork] input value [s:Pattern] input value (scaled between 0 and 1)</span><span class="x">
</span><span class="c">// [o:[]float64] expected output value (scaled between 0 and 1)</span><span class="x">
</span><span class="c">// return [r:float64] delta error between generated output and expected output</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">BackPropagate</span><span class="p">(</span><span class="n">mlp</span><span class="x"> </span><span class="o">*</span><span class="n">MultiLayerNetwork</span><span class="p">,</span><span class="x"> </span><span class="n">s</span><span class="x"> </span><span class="o">*</span><span class="n">Pattern</span><span class="p">,</span><span class="x"> </span><span class="n">o</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="p">,</span><span class="x"> </span><span class="n">options</span><span class="x"> </span><span class="o">...</span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="n">r</span><span class="x"> </span><span class="kt">float64</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

    </span><span class="k">var</span><span class="x"> </span><span class="n">no</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="p">;</span><span class="x">
    </span><span class="c">// execute network with pattern passed over each level to output</span><span class="x">
    </span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">options</span><span class="p">)</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="n">no</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">Execute</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span><span class="x"> </span><span class="n">s</span><span class="p">,</span><span class="x"> </span><span class="n">options</span><span class="p">[</span><span class="m">0</span><span class="p">])</span><span class="x">
    </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="n">no</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">Execute</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span><span class="x"> </span><span class="n">s</span><span class="p">)</span><span class="x">
    </span><span class="p">}</span><span class="x">

    </span><span class="o">...</span><span class="x">

        </span><span class="c">// copy hidden output to context</span><span class="x">
        </span><span class="k">if</span><span class="x"> </span><span class="n">k</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="o">&amp;&amp;</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">options</span><span class="p">)</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="o">&amp;&amp;</span><span class="x"> </span><span class="n">options</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">

            </span><span class="k">for</span><span class="x"> </span><span class="n">z</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">Features</span><span class="p">);</span><span class="x"> </span><span class="n">z</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">z</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

                </span><span class="c">// save output of hidden layer to context</span><span class="x">
                </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">z</span><span class="p">]</span><span class="o">.</span><span class="n">Value</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">z</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">Features</span><span class="p">)]</span><span class="o">.</span><span class="n">Value</span><span class="x">

            </span><span class="p">}</span><span class="x">

        </span><span class="p">}</span><span class="x">

    </span><span class="o">...</span></code></pre></figure>

<p>and during the execution part of the network this means propagate to context:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// save output of hidden layer to context if nextwork is RECURRENT</span><span class="x">
</span><span class="k">if</span><span class="x"> </span><span class="n">k</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="o">&amp;&amp;</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">options</span><span class="p">)</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="o">&amp;&amp;</span><span class="x"> </span><span class="n">options</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">

    </span><span class="k">for</span><span class="x"> </span><span class="n">z</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">Features</span><span class="p">);</span><span class="x"> </span><span class="n">z</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">z</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

        </span><span class="n">log</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">log</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span><span class="x">
            </span><span class="s">"level"</span><span class="x">				</span><span class="o">:</span><span class="x"> </span><span class="s">"debug"</span><span class="p">,</span><span class="x">
            </span><span class="s">"len z"</span><span class="x"> 			</span><span class="o">:</span><span class="x"> </span><span class="n">z</span><span class="p">,</span><span class="x">
            </span><span class="s">"s.Features"</span><span class="x">		</span><span class="o">:</span><span class="x"> </span><span class="n">s</span><span class="o">.</span><span class="n">Features</span><span class="p">,</span><span class="x">
            </span><span class="s">"len(s.Features)"</span><span class="x"> </span><span class="o">:</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">Features</span><span class="p">),</span><span class="x">
            </span><span class="s">"len mlp.NeuralLayers[0].NeuronUnits"</span><span class="x"> </span><span class="o">:</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">),</span><span class="x">
            </span><span class="s">"len mlp.NeuralLayers[k].NeuronUnits"</span><span class="x"> </span><span class="o">:</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">),</span><span class="x">
        </span><span class="p">})</span><span class="o">.</span><span class="n">Debug</span><span class="p">(</span><span class="s">"Save output of hidden layer to context."</span><span class="p">)</span><span class="x">

        </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">z</span><span class="p">]</span><span class="o">.</span><span class="n">Value</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">z</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">Features</span><span class="p">)]</span><span class="o">.</span><span class="n">Value</span><span class="x">

    </span><span class="p">}</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<h5 id="where-is-the-context">Where is the context</h5>
<p>As you most probably noticed, I made a magic trick: to avoid create a new neural network struct, I used the input layer as layer to also store the context layer. That is the reason I loop with index z starting from len(s.Features) in both the <code class="highlighter-rouge">BackPropagate</code> and <code class="highlighter-rouge">Execute</code>.</p>

<p>How to run it?</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">go get github.com/made2591/go-perceptron-go
<span class="nb">cd</span> <span class="nv">$GOPATH</span>/src/made2591/go-perceptron-go
go run main.go</code></pre></figure>

<p>Thank you everybody for reading!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/elman-student</wp:post_id>
        <wp:post_date>2018-11-13T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-11-13T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="golang"><![CDATA["golang",]]></category>
        
          <category domain="post_tag" nicename="ann"><![CDATA["ann",]]></category>
        
          <category domain="post_tag" nicename="elman"><![CDATA["elman",]]></category>
        
          <category domain="post_tag" nicename="adding"><![CDATA["adding",]]></category>
        
          <category domain="post_tag" nicename="neural"><![CDATA["neural",]]></category>
        
          <category domain="post_tag" nicename="networks"><![CDATA["networks"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ACT-R by John R. Anderson - Part II]]></title>
        <link>made2591.github.io/posts/act-r-part-II</link>
        <pubDate>2018-11-07T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>In my <a href="https://made2591.github.io/posts/act-r-part-I">previous post</a> I wrote about the cognitive architecture ACT-R, mainly putting together what I learnt by research over the topic. In this post, I would like to go more in depth about how ACT-R works, the concepts behind and try to provide my interpretation of some technical examples, regarding coding of the modeling and everything related.</p>

<h4 id="what-really-is-act-r">What really is ACT-R</h4>
<p>ACT-R is a production system theory that tries to explain human cognition by developing a model of the knowledge structures that underlie cognition. There are two types of knowledge representation in ACT-R:</p>

<ul>
  <li>Declarative knowledge;</li>
  <li>Procedural knowledge;</li>
</ul>

<p>Declarative knowledge corresponds to things we are aware we know and can usually describe to others.  Examples of declarative knowledge include sentence like:</p>

<p>George Washington was the first president of the United States.
An atom is like the solar system.</p>

<p>Procedural knowledge is knowledge which we display in our behavior but which we are not conscious of. For instance, no one can describe the rules by which we speak a language and yet we do. In ACT-R declarative knowledge is represented in structures called <code class="highlighter-rouge">chunks</code> whereas procedural knowledge is represented in <code class="highlighter-rouge">productions</code>. Thus, chunks and productions are the basic building blocks of an ACT-R model.</p>

<p>This blog post aims to go more in depth about the formal notation used for specifying chunks and production rules and to describe how the two types of knowledge interact to produce cognition.</p>

<h4 id="chunks-aka-declarative-knowledge">Chunks a.k.a. declarative knowledge</h4>
<p>In ACT-R, elements of declarative knowledge are called chunks. Chunks represent knowledge that a person might be expected to have when they solve a problem. A chunk is defined by two elements:</p>
<ul>
  <li>its <strong>type</strong>: you can think of types as categories (e.g., birds);</li>
  <li>its slots: you can think of slots as category attributes (e.g., color or size);</li>
</ul>

<p>Look at the example:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="nv">Action023</span><span class="o">:</span>
    <span class="ss">isa</span> <span class="ss">chase</span>
    <span class="ss">agent</span> <span class="ss">dog</span>
    <span class="ss">object</span> <span class="ss">cat</span>
<span class="nv">Fact3</span><span class="o">+</span><span class="m">4</span><span class="o">:</span>
    <span class="ss">isa</span> <span class="ss">addition</span><span class="o">-</span><span class="ss">fact</span>
    <span class="ss">addend1</span> <span class="ss">three</span>
    <span class="ss">addend2</span> <span class="ss">four</span>
    <span class="ss">sum</span> <span class="ss">seven</span></code></pre></figure>

<p>Below are chunks that encode the facts that the dog chased the cat and that 4+3=7. The type of the first chunk is chase and its slots are agent and object. The isa slot gives the type of the chunk. The type of the second chunk is addition-fact and its slots are addend1, addend2, and sum.</p>

<h4 id="production-rules-aka-procedural-knowledge">Production rules a.k.a. procedural knowledge</h4>
<p>There no a simple definition of a procedural rule. As we saw in previous post, they represent some how behaviour, <em>procedure</em>. Formally:</p>
<blockquote>
  <p>A production rule is a statement of a particular contingency that controls behavior.</p>
</blockquote>

<p>Look at the example:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="nv">IF</span> <span class="ss">the</span> <span class="ss">goal</span> <span class="ss">is</span> <span class="ss">to</span> <span class="ss">classify</span> <span class="ss">a</span> <span class="ss">person</span>
    <span class="ss">and</span> <span class="ss">he</span> <span class="ss">is</span> <span class="ss">unmarried</span>
<span class="nv">THEN</span> <span class="ss">classify</span> <span class="ss">him</span> <span class="ss">as</span> <span class="ss">a</span> <span class="ss">bachelor</span>

<span class="nv">IF</span> <span class="ss">the</span> <span class="ss">goal</span> <span class="ss">is</span> <span class="ss">to</span> <span class="ss">add</span> <span class="ss">two</span> <span class="ss">digits</span> <span class="ss">d1</span> <span class="ss">and</span> <span class="ss">d2</span> <span class="ss">in</span> <span class="ss">a</span> <span class="ss">column</span>
    <span class="ss">and</span> <span class="ss">d1</span> <span class="o">+</span> <span class="ss">d2</span> <span class="o">=</span> <span class="ss">d3</span>
<span class="nv">THEN</span> <span class="ss">set</span> <span class="ss">as</span> <span class="ss">a</span> <span class="ss">subgoal</span> <span class="ss">to</span> <span class="ss">write</span> <span class="ss">d3</span> <span class="ss">in</span> <span class="ss">the</span> <span class="ss">column</span></code></pre></figure>

<p>The condition of a production rule (the IF part) consists of a specification of the chunks in various buffers.    The action of a production rule (the THEN part) basically involves the modifications of those chunks or requests for other chunks.  The above are informal English specifications of production rules.  They give an overview of what the production does in the context of the declarative memory structures used, but do not necessarily detail everything that needs to happen within the production. You will learn the syntax for precise production specification within the ACT-R system.</p>

<h3 id="formalism">Formalism</h3>
<p>Since ACT-R is even a language, then let’s start with production rules.</p>

<h4 id="production-rules-the-format">Production rules: the format</h4>
<p>A production rule is a condition-action pair. The condition (also known as the left-hand side) specifies a pattern of chunks that must be present in the buffers for the production rule to apply. The action (right-hand side) specifies some actions to take.</p>

<p>The buffers are the interface between the procedural memory system and the other components (modules) of the ACT-R architecture. For instance, the goal buffer is the interface to the goal module. Each buffer can hold one chunk at a time, and the actions of a production affect the contents of the buffers. In according to KISS principle, let’s start by only concerning two buffers - one for holding the current goal and one for holding information retrieved from the declarative memory module.</p>

<p>The general form of a production rule is:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="p">(</span><span class="ss">p</span> <span class="nv">Name</span>
  <span class="ss">list</span> <span class="ss">of</span> <span class="ss">buffer</span> <span class="ss">tests</span>
<span class="o">==&gt;</span>
  <span class="ss">list</span> <span class="ss">of</span> <span class="ss">buffer</span> <span class="ss">changes</span>
<span class="p">)</span></code></pre></figure>

<p>The buffer tests consist of a set of patterns to match against the current buffers’ contents. If all of the patterns correctly match, then the production is said to match and it can be selected. It is possible for more than one production to be selected, and from all the selected productions one will be chosen to fire and that production’s actions will be performed. The process of choosing a production from those that are selected is call <em>conflict resolution</em>, and it will be discussed in detail in later units. For now, what is important is that</p>

<blockquote>
  <p>Only one production may fire at a time.</p>
</blockquote>

<p>After a production fires, selection and conflict resolution will again be performed and that will continue until the model has finished.</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="p">(</span><span class="nv">P</span> <span class="ss">example</span><span class="o">-</span><span class="ss">counting</span>                <span class="p">|</span>    <span class="nv">English</span> <span class="nv">Description</span>
   <span class="o">=</span><span class="ss">goal</span><span class="o">&gt;</span>                          <span class="p">|</span>      <span class="nv">If</span> <span class="ss">the</span> <span class="ss">goal</span> <span class="ss">is</span>
      <span class="ss">isa</span>         <span class="ss">count</span>            <span class="p">|</span>          <span class="ss">to</span> <span class="ss">count</span>
      <span class="ss">state</span>       <span class="ss">counting</span>         <span class="p">|</span>          <span class="ss">the</span> <span class="ss">current</span> <span class="ss">state</span> <span class="ss">is</span> <span class="ss">counting</span>
      <span class="ss">number</span>       <span class="o">=</span><span class="ss">num1</span>           <span class="p">|</span>          <span class="ss">there</span> <span class="ss">is</span> <span class="ss">a</span> <span class="ss">number</span> <span class="ss">we</span> <span class="ss">will</span> <span class="ss">call</span> <span class="o">=</span><span class="ss">num1</span>
   <span class="o">=</span><span class="ss">retrieval</span><span class="o">&gt;</span>                     <span class="p">|</span>         <span class="ss">and</span> <span class="ss">a</span> <span class="ss">chunk</span> <span class="ss">has</span> <span class="ss">been</span> <span class="ss">retrieved</span>
      <span class="ss">isa</span>         <span class="ss">count</span><span class="o">-</span><span class="ss">order</span>      <span class="p">|</span>          <span class="ss">of</span> <span class="ss">type</span> <span class="ss">count</span><span class="o">-</span><span class="ss">order</span>
      <span class="ss">first</span>       <span class="o">=</span><span class="ss">num1</span>            <span class="p">|</span>          <span class="ss">where</span> <span class="ss">the</span> <span class="ss">first</span> <span class="ss">number</span> <span class="ss">is</span> <span class="o">=</span><span class="ss">num1</span>
      <span class="ss">second</span>      <span class="o">=</span><span class="ss">num2</span>            <span class="p">|</span>          <span class="ss">and</span> <span class="ss">it</span> <span class="ss">is</span> <span class="ss">followed</span> <span class="ss">by</span> <span class="ss">another</span> <span class="ss">number</span>
                                   <span class="p">|</span>          <span class="ss">we</span> <span class="ss">will</span> <span class="ss">call</span> <span class="o">=</span><span class="ss">num2</span>
<span class="o">==&gt;</span>                                <span class="p">|</span>      <span class="nv">Then</span>
   <span class="o">=</span><span class="ss">goal</span><span class="o">&gt;</span>                          <span class="p">|</span>          <span class="ss">change</span> <span class="ss">the</span> <span class="ss">goal</span>
      <span class="ss">number</span>       <span class="o">=</span><span class="ss">num2</span>           <span class="p">|</span>          <span class="ss">to</span> <span class="ss">continue</span> <span class="ss">counting</span> <span class="ss">from</span> <span class="o">=</span><span class="ss">num2</span>
   <span class="o">+</span><span class="ss">retrieval</span><span class="o">&gt;</span>                     <span class="p">|</span>        <span class="ss">and</span> <span class="ss">request</span> <span class="ss">a</span> <span class="ss">retrieval</span>
      <span class="ss">isa</span>         <span class="ss">count</span><span class="o">-</span><span class="ss">order</span>      <span class="p">|</span>          <span class="ss">of</span> <span class="ss">a</span> <span class="ss">count</span><span class="o">-</span><span class="ss">order</span> <span class="ss">fact</span>
      <span class="ss">first</span>       <span class="o">=</span><span class="ss">num2</span>            <span class="p">|</span>          <span class="ss">for</span> <span class="ss">the</span> <span class="ss">number</span> <span class="ss">that</span> <span class="ss">follows</span> <span class="o">=</span><span class="ss">num2</span>
<span class="p">)</span></code></pre></figure>

<h4 id="production-rules-the-format-1">Production rules: the format</h4>
<p>The condition of the preceding production specifies a pattern to match in the goal buffer and a pattern to match in the retrieval buffer:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="o">=</span><span class="ss">goal</span><span class="o">&gt;</span>
    <span class="ss">isa</span>         <span class="ss">count</span>
    <span class="ss">state</span>       <span class="ss">counting</span>
    <span class="ss">number</span>      <span class="o">=</span><span class="ss">num1</span>
<span class="o">=</span><span class="ss">retrieval</span><span class="o">&gt;</span>
    <span class="ss">isa</span>         <span class="ss">count</span><span class="o">-</span><span class="ss">order</span>
    <span class="ss">first</span>       <span class="o">=</span><span class="ss">num1</span>
    <span class="ss">second</span>      <span class="o">=</span><span class="ss">num2</span></code></pre></figure>

<p>A pattern starts by naming which buffer is to be tested followed by <script type="math/tex">></script>. The names <em>goal</em> and <em>retrieval</em> specify the goal buffer and the retrieval buffer. It is also required to prefix the name of the buffer with <script type="math/tex">=</script> - more details on this later. After naming a buffer, the first test must specify the chunk-type using the <em>isa</em> test and the name of a chunk-type. That may then be followed by any number of tests on the slots for that chunk-type. A slot test consists of an optional modifier (which is not used in any of these tests), the slot name and a specification of the value it must have. The value may be either a specific constant value or a variable.</p>

<p>Thus, this part of the first pattern:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="o">=</span><span class="ss">goal</span><span class="o">&gt;</span>
    <span class="ss">isa</span>         <span class="ss">count</span>
    <span class="ss">state</span>       <span class="ss">counting</span></code></pre></figure>

<p>means that the chunk in the goal buffer must be of the chunk-type count and the value of its state slot must be the explicit value counting. The next slot test in the goal pattern involves a variable:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="ss">number</span>      <span class="o">=</span><span class="ss">num1</span></code></pre></figure>

<p>The <em>=</em> prefix in a production is used to indicate a variable. Variables are used in productions to test general conditions. They can be used to test that a slot holds any value, that two slots hold the same value or that two slots hold different values. The name of the variable can be any symbol and should be chosen to help make the purpose of the production clear. A variable is only meaningful within a specific production. The same variable name used in different productions does not have any relation between the two uses.</p>

<p>The first time a variable is used in a production it gets assigned (bound to) the value of the specified slot from the chunk in the buffer. If the slot does not have a value, then the pattern does not match. Further uses of that variable within the production will be tests against the specific value to which it is bound.</p>

<p>So, this slot test from the goal pattern:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="ss">number</span>      <span class="o">=</span><span class="ss">num1</span></code></pre></figure>

<p>causes the variable called =num1 to be bound to the current value of the number slot from the chunk in the goal buffer, if it has a value.</p>

<p>Now, we will look at the retrieval buffer’s pattern in detail:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="o">=</span><span class="ss">retrieval</span><span class="o">&gt;</span>
    <span class="ss">isa</span>         <span class="ss">count</span><span class="o">-</span><span class="ss">order</span>
    <span class="ss">first</span>       <span class="o">=</span><span class="ss">num1</span>
    <span class="ss">second</span>      <span class="o">=</span><span class="ss">num2</span></code></pre></figure>

<p>First it tests that the chunk is of type count-order. Then it tests the first slot of the chunk with the variable =num1. Since that variable was bound in the goal test this is testing that this slot has that same value. Finally, it tests the second slot which will bind its value to the =num2 variable.</p>

<p>In summary, this production will match if the goal is of type count, the chunk in the retrieval buffer is of type count-order, the chunk in the goal buffer has the value counting in its state slot, the value in the number slot of the goal and the first slot of the retrieval buffer match, and there is a value in the second slot of the retrieval buffer.</p>

<p>One final thing to note is that =goal and =retrieval, as used to specify the buffers, are also variables. They will be bound to the chunk that is in the goal buffer and the chunk that is in the retrieval buffer respectively.</p>

<h4 id="action-side">Action side</h4>
<p>The right-hand side (RHS - the part after the arrow) or action side of a production consists of a small set of actions. The typical actions are to change the contents of the buffers as in our example:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="o">=</span><span class="ss">goal</span><span class="o">&gt;</span>
    <span class="ss">start</span>       <span class="o">=</span><span class="ss">num2</span>
<span class="o">+</span><span class="ss">retrieval</span><span class="o">&gt;</span>
    <span class="nv">ISA</span>         <span class="ss">count</span><span class="o">-</span><span class="ss">order</span>
    <span class="ss">first</span>       <span class="o">=</span><span class="ss">num2</span></code></pre></figure>

<p>The actions are specified similarly to the conditions. They start with the name of a buffer followed by “&gt;” and then any number of slot and value specifications.</p>

<p>If the buffer name is prefixed with “=” then the action is to modify the chunk currently in that buffer. Thus this action on the goal buffer:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="o">=</span><span class="ss">goal</span><span class="o">&gt;</span>
    <span class="ss">start</span>       <span class="o">=</span><span class="ss">num2</span></code></pre></figure>

<p>changes the value of the start slot of the chunk in the goal buffer to the value of the =num2 variable.</p>

<p>If the buffer name is prefixed with “+” then the action is a request to the buffer’s module. Typically this results in the module replacing the chunk in the buffer with a different one. Requests to the declarative memory module (the module for which the retrieval buffer is the interface) are always a request to retrieve a chunk from declarative memory that matches the specification provided and to place that chunk into the retrieval buffer. Different modules may handle different types of requests and may respond in other ways.</p>

<p>Thus, this request:</p>

<figure class="highlight"><pre><code class="language-prolog" data-lang="prolog"><span class="o">+</span><span class="ss">retrieval</span><span class="o">&gt;</span>
    <span class="nv">ISA</span>         <span class="ss">count</span><span class="o">-</span><span class="ss">order</span>
    <span class="ss">first</span>       <span class="o">=</span><span class="ss">num2</span></code></pre></figure>

<p>is asking the declarative memory module to retrieve a chunk which is of type count-order and with a first slot that has the value bound to =num2 and place it into the retrieval buffer. If there exists such a chunk, then it will be placed into the retrieval buffer.</p>

<h3 id="conclusion">Conclusion</h3>

<p>In Part III I will talk about how to install and run a model in ACT-R. Stay tuned!</p>

<p>Thank you everybody for reading!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/act-r-part-II</wp:post_id>
        <wp:post_date>2018-11-07T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-11-07T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="cognitive"><![CDATA["cognitive",]]></category>
        
          <category domain="post_tag" nicename="architecture"><![CDATA["architecture",]]></category>
        
          <category domain="post_tag" nicename="reasoning"><![CDATA["reasoning",]]></category>
        
          <category domain="post_tag" nicename="knowledge"><![CDATA["knowledge",]]></category>
        
          <category domain="post_tag" nicename="representation"><![CDATA["representation"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[ACT-R by John R. Anderson - Part I]]></title>
        <link>made2591.github.io/posts/act-r-part-I</link>
        <pubDate>2018-10-30T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>I’ve always been fascinated about cognitive systems and all the theories about them. Unfortunately, I never had the chance to actively work on a cognitive architecture: making experiments over these technologies is difficult because it’s difficult to me even only think about some possible toyproblem to solve. So this article is more about the basics, or at least what I found interesting about the topic.</p>

<h3 id="act-r">ACT-R</h3>
<p>One of the most famous cognitive architecture is ACT-R: ACT-R a.k.a. “Adaptive Control of Thought—Rational” is a cognitive architecture mainly developed by John Robert Anderson at Carnegie Mellon University. If you don’t know Anderson, no worries but from now on keep in mind that he obtained a B.A. from the University of British Columbia in 1968, a Ph.D. in Psychology from Stanford in 1972 to finally become an assistant professor at Yale in 1972. This in the first 25 years of his life. This is to say: if you don’t understand anything about what you will read, it’s most probably not your fault, neither mine’s…and neither Anderson’s actually - it seems there’s a bug in Matrix.</p>

<p align="center"><img src="https://i.imgur.com/o9uif2Z.gif" alt="matrixbug" style="width: 100%; marker-top: -10px;" /></p>

<p>ACT-R aims to define the basic and irreducible cognitive and perceptual operations that enable the human mind. In theory, each task that humans can perform should consist of a series of these discrete operations. As a cognitive architecture, ACT-R is actually a <em>theory</em> about <em>how human cognition works</em>. On the exterior, ACT-R looks like a programming language; however, its constructs reflect <em>assumptions</em> about human cognition. These assumptions are based on numerous facts derived from psychology experiments.</p>

<p>Like a programming language, ACT-R is a framework: for different tasks (e.g., Tower of Hanoi, memory for text or for list of words, language comprehension, communication, aircraft controlling), researchers create models (or <em>programs</em>) that are written in ACT-R and that, beside incorporating the ACT-R’s view of cognition, add their own assumptions about the particular task. These assumptions can be tested by comparing the results of the model with the results of people doing the same tasks. By “results” we mean the traditional measures of cognitive psychology:</p>

<ul>
  <li>Time to perform the task;</li>
  <li>Accuracy in the task;</li>
  <li>More recently, neurological data such as those obtained from FMRI - yes, it will definetly burn your brain but ehy, it’s for science;</li>
</ul>

<p>One important feature of ACT-R that distinguishes it from other theories in the field is that it allows researchers to collect quantitative measures that can be directly compared with the quantitative measures obtained from human participants.</p>

<p>ACT-R has been used successfully to create models in domains such as:</p>

<ul>
  <li>Learning and memory;</li>
  <li>Problem solving and decision making;</li>
  <li>Language and communication;</li>
  <li>Perception and attention;</li>
  <li>Cognitive development;</li>
  <li>Individual differences;</li>
</ul>

<p>Beside its applications in cognitive psychology, ACT-R has been used in</p>

<ul>
  <li>Human-computer interaction to produce user models that can assess different computer interfaces;</li>
  <li>Education (cognitive tutoring systems) to “guess” the difficulties that students may have and provide focused help;</li>
  <li>Computer-generated forces to provide cognitive agents that inhabit training environments;</li>
  <li>Neuropsychology, to interpret FMRI data;</li>
</ul>

<p>Some of the most successful applications, the Cognitive Tutors for Mathematics, are used in thousands of schools across the country. Such “Cognitive Tutors” are being used as a platform for research on learning and cognitive modeling as part of the Pittsburgh Science of Learning Center.</p>

<p><span style="color:#A04279; font-size: bold;"><strong>CONFUSED?</strong></span> Just go ahead, it will hopefully be clearer in a while.</p>

<h3 id="the-architecture">The architecture</h3>
<p>The entire ACT-R architecture can be summarized in a set of <em>elements</em>:</p>

<ul>
  <li>A visual module for <em>identifying objects</em> in the <em>visual field</em>;</li>
  <li>A manual module for controlling the <em>hands</em>;</li>
  <li>A declarative module for retrieving information from <em>memory</em>;</li>
  <li>A goal module for keeping track of current goals and intentions;</li>
  <li>A production module;</li>
</ul>

<p>Is not a coincidence that this few things resemble a very simple <em>Wall-e</em>: in the end, we have eyes, we act in the worlds with hands, we decide by using the memory - of several kinds, in different ways - and we act to achieve a goal. As a - I would say complex - <em>Wall-e</em>.</p>

<p align="center"><img src="https://i.imgur.com/fF7SKST.png" alt="perceptron" style="width: 100%; marker-top: -10px;" /></p>

<p>Let’s start from the tricky one: the production module.</p>

<h4 id="the-production-module">The production module</h4>
<p>I think we all agree without be cognitive experts than one of the key points of the human thoughts is the <em>coordination</em> - at every level you can think about: there are several ways ours systems coordinate themself in relations with the I/O of others, and this is something complex to model. But remember, we are describing a framework, a theory… by design, some hooks are provided to let human fullfil with what is required to have an indipendent cognitive architecture.</p>

<p>Coordination in the behavior of these modules is achieved through a central production system: despite the name “central”, you should not imaginge this system as a hole in which all information are stored / elaborated and somehow cross-joined.</p>

<blockquote>
  <p>This central production system is not sensitive to most of the activity of these modules but rather can only respond to a limited amount of information that is deposited in the <em>buffers</em> of these modules - see again the picture above.</p>
</blockquote>

<p><span style="color:#A04279; font-size: bold;"><strong>CONFUSED?</strong></span> No worries: actually, it isn’t difficult to imagine. Is like saying you are not aware (hopefully) of all the information are in the visual field but only about the object(s) you are currently attending to. Similarly, people are not aware of all the information in long-term memory but only the fact currently <em>retrieved</em>.</p>

<h4 id="the-buffers-and-the-modules">The buffers and the modules</h4>
<p>As we said, the central production system can recognize patterns in <em>buffers</em>: it can even make changes to these buffers, as, for instance, when it makes a
request to perform an action in the manual buffer. For cognitive reasons we are not interested right now, the information in these modules is largely encapsulated, and the modules communicate only through the information they make available in their buffers. Actually, the theory <em>is not committed to exactly how many modules there are inside</em>, but a number have been implemented as part of the central system. The important thing to remember is that:</p>

<blockquote>
  <p>The buffers of these modules hold the limited information that the production system can respond to.</p>
</blockquote>

<h4 id="real-brain---modules-mapping">Real-brain -&gt; modules mapping</h4>
<p>As part of the architecture, we said there’s a <em>goal module</em> to keep track of current goals and intentions: we will return on what this means later, but for the moment imagine that you - as a common <em>agent</em> - are in a sort of equilibrium - let’s say you are in statis. You don’t act to change the environment around you as far as you don’t have a reason, or some sort of irrational trigger to do it, that could be identified by the consciuness, soul, whatever. The GOAL module, as all the module, comunicate throught a buffer. Let call it the GOAL buffer: this keeps track of one’s internal state in solving a problem, it is associated with the dorsolateral prefrontal cortex (DLPFC). The retrieval buffer is associated with the ventrolateral prefrontal cortex (VLPFC) and holds information retrieved from long-term declarative memory. There are many reasons to keep this distinction between DLPFC and VLPFC valid: for our purpose, it’s fair enought know there is a certain number of neuroscience results that agree on this.</p>

<h4 id="perceptualmotor-and-manual-modules">Perceptual–Motor and manual modules</h4>
<p>The perceptual-motor modules’ buffers are based on some cognitive theories we don’t want to focus on for now. The manual buffer is responsible for control of the hands and is associated with the adjacent motor and somatosensory cortical areas devoted to controlling and monitoring hand movement. There also are rudimentary vocal and aural systems. Let’s summarize these modules as modules that share the same things: they somehow interact actively (by changing it) and/or passively (by notice the changes) of the environments and put some form of information in their respective buffers, to be accessible by the central production system.</p>

<p><span style="color:#A04279; font-size: bold;"><strong>CONFUSED?</strong></span> Me too. But stay tuned… the exciting part is coming. AGAIN :D</p>

<h3 id="the-critical-cycle-in-actr">The critical cycle in ACT–R</h3>
<p>The <code class="highlighter-rouge">critical cycle</code> in ACT–R is one in which the buffers hold representations determined by the external world and internal modules. Then patterns in these buffers are recognized, a production fires, and the buffers are then updated for another cycle. The assumption in ACT–R is that this cycle takes about 50ms to complete. The conditions of the production rule specify a pattern of activity in the buffers that the rule will match, and the action specifies changes to be made to buffers.</p>

<p><span style="color:#A04279; font-size: bold;"><strong>NOTE</strong></span> This somehow resembles how an expert system works: have you ever worked with CLIPS, or any other logical language like Prolog? Hold on :)</p>

<p align="center"><img src="https://physicsworld.com/wp-content/uploads/2016/08/PW-2016-08-17-BALL-quantum-causality.jpg" alt="quantum" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="mixture-of-parallel-and-serial">Mixture of parallel and serial</h3>
<p>This is the coolest part of the system: within each module, there is a great deal of <em>parallelism</em>. For instance, the visual system is simultaneously processing the whole visual field, and the declarative system is executing a parallel search through many memories in response to a retrieval request. Also, the processes within different modules can go on in parallel and asynchronously.</p>

<p>This give to the architecture some sort of non-deterministic behaviour that to me keeps open the chance to model intentions. I mean, not only the way an Intention Module can be implemented: actually, a distribution over the way intentions are represented in there. Let’s think about this: how much fast can be someone to avoid parallel - let’s say - dangerous stimuli coming in the their visual field? It depends: if s/he’s an athlete maybe faster and in a more efficient way, otherwise in a - kinda - <em>casual</em> way, guided by many other deterministic information - like how many hours you dreamt, or whatever, but still things - let’s say - you are not interested at all in modeling. Using other words, let’s imagine your actions are somehow a results of one or more production rule(s), i.e. in this context, encoded arbitrary behaviours that are part of your perceptual-motor modules (but even your emotional, etc). Then, the way they are picked up and fired, if subject to parallel access is eventual consistent by design. One of the interpretation over a way some casual can happen is to study the probability distribution, let call it the likelyhood this will happen. And actually, it’s something we control because as we gonna discover in a while, is that the equations that guide ACT-R are strictly related to probability.</p>

<p>From an high level perspective, actually, it’s a matter of chances being able to <em>do something</em> - even the definition of better is relative - instead of something else. I think this is really cool cause somehow keep open the possibilty of ACT-R as a model of not only <em>one expert systems</em>, but actually one system that occasionally act as an expert system. Like humans, that are not equally (and of course, I mean, even punctually) able to achieve each of them the goals their able to achieve if you think about them as a whole but as a single subject.</p>

<p>However, there are also two levels of serial bottlenecks in the system:</p>

<ul>
  <li>First, the content of any buffer is limited to a single declarative unit of knowledge, called a <code class="highlighter-rouge">chunk</code> in ACT–R. Thus, only a single memory can be retrieved at a time or only a single object can be encoded from the visual field;</li>
  <li>Second, only a single production is selected at each cycle to fire: that is not such a big limiti if you think about it because we can somehow accept you’re not gonna take exactly at the same moment two different decisions. To be a physic for a while, this even respects the theory of relativity that should state the conventional concept of simultaneity doesn’t exist, if I’m not wrong 🤔</li>
</ul>

<h3 id="a-declarative-chunk-and-activation-function">A declarative Chunk and Activation function</h3>
<p>The declarative memory system and the procedural system constitute the cognitive core of ACT–R. Let’s have a look at a declarative chunk - or, a single declarative unit of knowledge. In the picture below there’s a visual presentation of a declarative (again, see later) chunk with its subsymbolic quantities</p>

<p align="center"><img src="https://i.imgur.com/HbZZXwW.png" alt="perceptron" style="width: 75%; marker-top: -10px;" /></p>

<p>where:</p>
<ul>
  <li><script type="math/tex">W_j</script> is the <code class="highlighter-rouge">attentional weights</code>;</li>
  <li><script type="math/tex">S_{ji}</script> is the <code class="highlighter-rouge">strenghts of association</code>;</li>
  <li><script type="math/tex">B_i</script> is the <code class="highlighter-rouge">base level activation</code>;</li>
</ul>

<p>These are no more than values: keep them apart for a minute. Imagine that access to information in declarative memory is not instantaneous and <strong>an important component of the ACT–R theory concerns the activation processes that control this access</strong>. A set of equations and parameters have been devised in ACT–R that controls this activation process.</p>

<blockquote>
  <p>The activation of a chunk is a sum of a base-level activation, reflecting its general usefulness in the past, and an associative activation, reflecting its relevance to the current context.</p>
</blockquote>

<h4 id="activation-function">Activation function</h4>
<p>For the base-level activation, it rises and falls with practice and delay according to the equation:</p>

<script type="math/tex; mode=display">B_i = ln(\sum_{j=1}^{n}t_j^{-d})</script>

<p>where <script type="math/tex">t_j is the time since the j_{th} practice of an item.</script> This equation reflects the log odds an item will reoccur as a function of <em>how it has appeared in the past</em>. This is to say, each presentation has an impact on odds that decays away as a power function (production the power law of forgetting) and different presentations add up (it turns out producing the power law of practice). Fair enough? Fri, in the ACT-R community, <script type="math/tex">.5</script> has emerged as the default value for the parameter <em>d over a range</em> of applications.</p>

<p>There are two equations mapping activation onto probability of retrieval and latency. With respect to probability of retrieval, the assumption is</p>

<blockquote>
  <p>The chunks will be retrieved only if their activation threshold is over a threshold.</p>
</blockquote>

<p>This is because activation values are noisy: there is only a certain probability that any chunk will be above threshold. This is somehow resemble ANN, am I wrong? Have a look <a href="https://made2591.github.io/posts/neuralnetwork">here</a>, I implemented and discussed a little bit a simple one of them here.</p>

<p>The probability that the activation will be greater than a threshold is given by the following equation:</p>

<script type="math/tex; mode=display">P_i = \frac{1}{1 + e^{\frac{\tau-A_i}{s}}}</script>

<p>where <script type="math/tex"></script> controls the noise in the activation levels and is typically set at about <script type="math/tex">.4</script>. If a chunk is successfully retrieved, the latency of retrieval will reflect the activation of a chunk. The time to retrieve the chunk is given as:</p>

<script type="math/tex; mode=display">T_i = Fe^{-A_i}</script>

<p>with <script type="math/tex">F \approx 0.35e^{\tau}</script></p>

<p>Although we have a narrow range of values for the noise parameter <script type="math/tex">s</script>, the retrieval threshold, and latency factor, <script type="math/tex">F</script>, are parameters that have varied substantially from model to model.</p>

<h4 id="procedural-memory">Procedural Memory</h4>
<p>As we already said, the production system can detect the patterns that appear in the buffers and decide what to do next to achieve coherent behavior: in a sense, the production system achieves the control and adaptiveness of thought. The key idea is that at any point in time multiple production rules might apply, but because of the seriality in production rule execution, only one can be selected, and this is the one with the highest utility - that is somehow related to experience even. Production rule utilities are noisy, continuously varying quantities just like declarative activations and play a similar role in production selection as activations play in chunk selection.</p>

<p>The utility of a production rule $i$ is defined as:</p>

<script type="math/tex; mode=display">U_i = P_iG - C_p</script>

<p>where:</p>
<ul>
  <li><script type="math/tex">P_i</script> is an estimate of the probability that if production rule <script type="math/tex">i</script> is chosen the current goal will be achieved;</li>
  <li><script type="math/tex">G</script> is the value of that current goal;</li>
  <li><script type="math/tex">C_i</script> is an estimate of the cost (typically measured in time) to achieve that goal;</li>
</ul>

<p>Both <script type="math/tex">P_i</script> and <script type="math/tex">C_i</script> are learned from experience with that production rule.</p>

<h3 id="conclusion">Conclusion</h3>

<p>I want to go more in depth with some more details about knowledge representation, so stay tuned :D</p>

<p>UPDATE: <a href="https://made2591.github.io/posts/act-r-part-II">ACT-R - Part II</a> available now</p>

<p>Thank you everybody for reading!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/act-r-part-I</wp:post_id>
        <wp:post_date>2018-10-30T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-10-30T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="cognitive"><![CDATA["cognitive",]]></category>
        
          <category domain="post_tag" nicename="architecture"><![CDATA["architecture",]]></category>
        
          <category domain="post_tag" nicename="reasoning"><![CDATA["reasoning",]]></category>
        
          <category domain="post_tag" nicename="knowledge"><![CDATA["knowledge",]]></category>
        
          <category domain="post_tag" nicename="representation"><![CDATA["representation"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[DRY, immutable, opinionated, agnostic]]></title>
        <link>made2591.github.io/posts/dry-immutable-opinionated</link>
        <pubDate>2018-10-21T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="prelude">Prelude</h3>
<p>As far as I know there are many ways to <em>create</em> today in IT.</p>

<p>What is becoming more difficult is doing it properly and taking the right decisions but (spoiler)…</p>

<blockquote>
  <p>But… I’m starting feeling that my repository is on the right direction to be <em>self.deployable</em> and agnostic. Above the infrastructure, which is provisioned by terragrunt and terraform, one or more actor(s) is placed (i.e. Jenkins, but whoever it is), the actors will be redeployed, the pipelines restored and they will start redeploy applications (even pieces of infrastructure with dependencies) on their behalf to the various parts of the infrastructure.</p>
</blockquote>

<p>Since I’m an IT guy, I continuosly reiterate that I do not know a lot about computer science. It’s ok, I’m confortable with this and everyday I feel a little bit more heartened, because I’m not alone and in the end if you properly have defined process to deploy stuff, you can accomplish your job quite easily, even without being an hero. Thus, I would like to talk about three concepts appeared somehow behind the scenes (not so hidden), most probably existing since years, everybody of us (I guess) had already deal with :)</p>

<p>For everybody who simply want to jump to the related git repository I used to experiment with these concepts, the github repo is reachable here: <a href="https://github.com/made2591/immutable">immutable</a>.</p>

<h4 id="opinionated">Opinionated</h4>
<p>Several universities make the claim that, when deciding where to put sidewalks, they first let students wear paths through the grass. This told them where to pave and ensured the best use of their walkways: like in the picture below.</p>

<p><img src="https://i.imgur.com/euEnC9n.jpg" alt="opinionated" /></p>

<p>Thus you can think of these well worn paths in cloud architecture as a procedure, or design, that gets repeated over and over again, to the point that it should just become a boilerplate. Rather than everyone composing the same 99% of code, we can generate that code, and focus on the 1% that is unique. Opinionated tooling is designed to guide you down a path that is considered a best practice. Additionally, since best practice is the default, the amount of unique code we maintain is dramatically reduced. Opinionated tooling doesn’t eliminate options, however, it simply assumes some sensible defaults and relies on the user to understand when it makes sense to deviate from those defaults.</p>

<p>Instead of writing CloudFormation from scratch to build and orchestrate ECS, ECR, EC2, ELB, VPC, and IAM resources ourselves, we can start with a smart set of defaults, and just fill in a few blanks, customizing only the parts that we want changed, and let our opinionated tool generate the boilerplate CloudFormation. Actually, most of the libraries and framework used by software / platform / site engineers around the world are opinionated - and maybe sometimes we aren’t even aware about it.</p>

<p>As far as I learned in the last months, the part of a platform should be for real opinionated is the most critical: the infrastructure part (mainly network) but also everything that is around. Let’s say you have to create a simple web server, a security group to control the access, two separated stages that differ between each other only on environment settings (dimensions, HA, etc): there are some best practises you should follow to create this scenario.</p>

<p>Some of them came out of the box from providers - think about access that is by default denied for obvious reasons - some others needs to be implemented: what you can bet on is that every of them should be opinionated. A configurable server provision process with enabled (re)deployment tools should impose all pre-commit automation happening via recursive makefiles, all provisioning done via ssh, and all deployments completed within a git receive-hook (which is setup during provision, along with the git repo). The fact is that many environments like the ones we are building / will build are in place today / were already built in the past.</p>

<p>Even if I didn’t found a set of opinionated terraforms<sup id="fnref:opin"><a href="#fn:opin" class="footnote">1</a></sup>, I will collect them in <a href="https://github.com/made2591/immutable">immutable</a> and start using default patterns to accomplish an opinionated state. For what concerns example, I think that <a href="https://getmu.io/">Mu</a> is a good opinionated cloudformation-oriented framework to taste what does it mean <em>opinionated library</em>. Also, what I found interesting is <a href="https://github.com/dtan4/terraforming">terraformation</a> and a few other tools to move from one language to another. Why? Talk about it later :-)</p>

<h4 id="immutable">Immutable</h4>
<p>The immutable concept is something coming from the functional programming paradigm: if you look on Internet about, the best definition you get of an immutable object (<em>unchangeable</em> object) is <em>an object whose state cannot be modified after it is created</em>. This is in contrast to a mutable object (changeable object), which can be modified after it is created. Why immutable? It’s super simple: because everything that is immutable is <em>still working and will work forever</em> - (or not, but is irrelevant from a logical point view), by design, cause it was built and released, full stop - in 80s’ we all would say compiled in a <em>binary</em>. Think about the old 80s’ bank applications running around the world: they still work because they are <em>binary</em> objects - at least conceptually - running on mainframes and relying on TCP/IP. It’s not a coincidence that binaries, mainframes and TCP/IP are still the only things working (I mean, for real) since 80s’, the best gifts we received from our ancestors - that often are our olds collegues or parents, in this just born world made of cables :-)</p>

<p><img src="https://i.imgur.com/bIPCBmG.jpg" alt="immutable" /></p>

<p>Thus, the infrastructure should be immutable, the applications as much as possible serverless, taking advantage of services - in strict sense, like queues and identity management. The machines should be avoided in favour of containers, but when they are needed should be packered and traited like real containers.</p>

<p>Many times I heard the sentence “why we should create an ami for this? then we should mantain it” but honestly, what happens in the end is that you still have to maintain some machines, but without using a provisioner you lost the concept behind the immutability. The immutability is something that let you ignore your binary / object / describing state or whatever, since the exact moment you decided to release it until you will move to the next release, because it represents the best you were able to built until a fixed point in time.</p>

<p>This is similar to what I’m building in <a href="https://github.com/made2591/immutable">immutable</a>: the idea is that you define your design once, trying to decoupling as much as possible from your IasS provider - at least, conceptually - and be able to restore everything from scratch with a single pull. What you should be aware, is that to avoid errors you have to not repeat yourself.</p>

<h4 id="dry">DRY</h4>
<p>In software engineering, don’t repeat yourself (DRY) is a principle of software development aimed at reducing repetition of software patterns, replacing it with abstractions or using data normalization to avoid redundancy<sup id="fnref:wiki"><a href="#fn:wiki" class="footnote">2</a></sup>. In IaaC, this implies defining resources, configuration, environment, provider and states once, separately, and avoid as much as possible writing twice what you can write once. This starting from the common environment variables shared across different setup to the resource definition that should use parameters, built-in functions and the maximum expressive power of the language you are using to avoid repetition. The code is clearer, more robust, more safe, and we all like formalism - hopefully. More specifically, the DRY principle is stated as “Every piece of knowledge must have a single, unambiguous, authoritative representation within a system”.</p>

<p><img src="https://i.imgur.com/RbFzUWe.jpg" alt="dry" /></p>

<p>In my immutable experiment, the <a href="https://github.com/made2591/immutable/tree/master/infrastructure">infrastructure folder</a> contains two folder inside, <code class="highlighter-rouge">live</code> and <code class="highlighter-rouge">modules</code>. To build the infrastructure, I mainly made use of ansible, packer, terraform and terragrunt. The latter let my terraform code be as DRY-driven as possible: unfortunately, this is tricky to achieve especially because dialogue between modules is complicated and not always <em>plannable</em> without a real run. To define the folder structure at infrastructure level, I created two folder (see the <a href="https://www.gruntwork.io/">official doc</a> for more information): from high level perspective, the live folder contains the configurations patterns and values for two staging enviroment, called dev and prod. The modules folder my <em>.tf</em> files to setup the AWS infrastructure. Both the two folder are configured as much as possible to follow the DRY approach, mostly thanks to terragrunt: unfortunately, there are still some repetition I would like to remove as soon as I understand how :)</p>

<p>Above the infrastructure, which is provisioned by terragrunt and terraform, one or more actor(s) is placed (i.e. Jenkins, but whoever it is), the actors will be redeployed, the pipelines restored and they will start redeploy applications (even pieces of infrastructure with dependencies) on their behalf to the various parts of the infrastructure. I’m starting feeling that my repository is on the right direction to be <em>self.deployable</em> and agnostic…</p>

<h4 id="agnostic">Agnostic</h4>
<p>I started looking at Terraform as more than just a simple provisioner that allows you to safely and predictably create, change, and improve infrastructure.
From a purely practical point of view, Terraform is nothing but an open source tool that codifies APIs into declarative configuration files that can be shared among team members, treated as code, edited, reviewed, and versioned. So why one should decide to use terraform, given a cloud provider that provides its own language? Let’s say the latter is AWS, you could directly use CloudFormation (beware! CloudFormation stays here for <em>any other language provided by your cloudprovider</em>, whatever the cloudprovider is). What do these two languages ​​share?</p>

<p><img src="https://i.imgur.com/uhpBCNj.jpg" alt="agnostic" /></p>

<p>They are both languages, with an expressive power. Let’s say that the language provided by your cloud provider is based on a <script type="math/tex">L_p</script> language and has an expressive power <script type="math/tex">x</script>. Terraform is powerful <script type="math/tex">\leq x</script>, because it relies on sdk so it could be <em>equal</em> or, at least, <em>as powerful as</em> <script type="math/tex">L_p</script>. What happens for real is that everyone sees it as <em>less powerful</em> and takes advantage of CloudFormation, because in the end it can not chase the expressive power of the language of the cloudprovider - still to verify how much greater this expressive power drive you to produce spaghetti, but this is another argument of discussion.
But, at least conceptually, if you act to pursue as much as possible decoupling between you and your IaaS, the more you describe your world with an agnostic dialet, the more tomorrow you will be able to easily move or start integrate with other environments, provided by some other providers. That’s the reason why - imho - is better being friends of nobody that provider-addicted for laziness.</p>

<h3 id="conclusion">Conclusion</h3>
<p>I think this post comes first as a consequence of my new role as a Platform Engineer: all of us build, everyday, mainly because of the graffiti on the wall (<em>calling all creators</em>). I wanted to share this kind of - honestly, I really don’t know how to call it - <em>vision</em> about my work I realized should be - hopefully - a good one to follow.</p>

<p>A still <em>only-partially</em> related git repository I used to experiment with these concepts is reachable here: <a href="https://github.com/made2591/immutable">immutable</a>.</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:opin">
      <p>But there are repository like <a href="https://github.com/GovTechSG/terraform-aws-vpc">this</a> that provided opionated configurations to start from.&nbsp;<a href="#fnref:opin" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:wiki">
      <p><a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Wikipedia</a>&nbsp;<a href="#fnref:wiki" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/dry-immutable-opinionated</wp:post_id>
        <wp:post_date>2018-10-21T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-10-21T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="dry"><![CDATA[["dry",]]></category>
        
          <category domain="post_tag" nicename="immutable"><![CDATA["immutable",]]></category>
        
          <category domain="post_tag" nicename="opinionated"><![CDATA["opinionated",]]></category>
        
          <category domain="post_tag" nicename="agnostic"><![CDATA["agnostic",]]></category>
        
          <category domain="post_tag" nicename="aws"><![CDATA["aws",]]></category>
        
          <category domain="post_tag" nicename="future"><![CDATA["future",]]></category>
        
          <category domain="post_tag" nicename="iaas"><![CDATA["iaas",]]></category>
        
          <category domain="post_tag" nicename="coding"><![CDATA["coding",]]></category>
        
          <category domain="post_tag" nicename="erlangen"><![CDATA["erlangen",]]></category>
        
          <category domain="post_tag" nicename="bayern"><![CDATA["bayern",]]></category>
        
          <category domain="post_tag" nicename="germany"><![CDATA["germany"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Go Erlangen!]]></title>
        <link>made2591.github.io/posts/go-erlangen</link>
        <pubDate>2018-09-24T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="a-little-tool-for-a-small-city">A little tool for a small city</h3>
<p>Here we are!! I recently moved to Germany to join the adidas - platform engineering team. <a href="https://github.com/made2591/go-erlangen">This</a> is a really small piece of GOde (:P) I wrote for Erlangen (my new place) citizens ^^</p>

<h4 id="needs">Needs</h4>
<p>You will only need an <a href="https://www.internationalshowtimes.com/">https://www.internationalshowtimes.com/</a> movie api key. You can get one quite easily by going <a href="https://www.internationalshowtimes.com/signup.html">here</a></p>

<h4 id="scope">Scope</h4>
<p>You would simply like to be informed about new OV movies on air in cinemas from your shell…here we go! The script in the repo provide you a draft to start from ^^</p>

<h4 id="improvements">Improvements</h4>
<p>Webinterface, scheduling, notification…enjoy the city - and the repo!</p>

<p>Thank you everybody for reading!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/go-erlangen</wp:post_id>
        <wp:post_date>2018-09-24T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-09-24T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="erlangen"><![CDATA["erlangen",]]></category>
        
          <category domain="post_tag" nicename="bayern"><![CDATA["bayern",]]></category>
        
          <category domain="post_tag" nicename="germany"><![CDATA["germany"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[[Not completed yet] Implementing a Blockchain using Kafka]]></title>
        <link>made2591.github.io/posts/kakfa-and-blockchain</link>
        <pubDate>2018-04-11T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>I recently started interesting about the concept of <em>streaming</em> - not videos, of course - mainly because in the last months I collected several sources to be used as starting point: so, waiting for my Google Home Mini to be shipped, I decided to mix togheter two words I often see surfing the Web. The first is Kafka - that is a distributed streaming platform (ok but what exactly does that mean - <em>for real</em>? Be patience, I will try to introduce the tool in this article) and the second is Blockchain (I don’t like this world, believe me or not I think it’s like Big Data, in the sense that <em>everybody knows the principles but nobody wants to deal with the maths</em>): this two concepts have kind of <em>similarity</em>, I guess 🧐
I have a problem with memory, so I first talk about how Kafka works just to remind me the key concepts for the next month, because I use to forget everything I learn - d***q.</p>

<p align="center"><img src="https://s3-eu-west-1.amazonaws.com/spiked-online.com/kafka_review.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="ingriedents">Ingriedents</h3>
<ul>
  <li>Kafka;</li>
  <li>Blockchain (?) -&gt; you don’t need maths;</li>
</ul>

<h4 id="kafka-reasons">Kafka: reasons</h4>
<p>A streaming platform has three key capabilities:</p>
<ul>
  <li>Publish and subscribe to streams of records, similar to a message queue or enterprise messaging system: the publish–subscribe is a messaging pattern where senders of messages, called publishers, do not program the messages to be sent directly to specific receivers, called subscribers, but instead categorize published messages into classes without knowledge of which subscribers, if any, there may be. Similarly, subscribers express interest in one or more classes and only receive messages that are of interest, without knowledge of which publishers, if any, there are. We’ll see that this are key features of the way Kafka actually works out of the box;</li>
  <li>Store streams of records in a fault-tolerant durable way: this is main due to the <em>distributed charateristics</em> of the Kafka platform - more on this later;</li>
  <li>Process streams of records as they occur: simple? Not at all, but Kafka fortunately takes of this by design;</li>
</ul>

<p>So, why people around the world use Kafka? To do exactly…what? The Apache official response is to <em>build real-time streaming data pipelines that reliably get data between systems or applications</em> and to <em>build real-time streaming applications that transform or react to the streams of data</em>. Ok, but… a little bit useless, for common users. This is the main reason I used Kafka to experiment with Blockchain (more later on this boring thing). Just to be clear: I am NOT a Kafka expert and I am NOT a Blockchain fan, so please if you’re a looking for a Blockchain maniac post with an accelerated course about elliptic curves, please don’t waste your time XD this is probably not the right piece of Web for you.</p>

<h4 id="kafka-overview">Kafka: overview</h4>
<p>So this Kafka sounds magical, it does these things, the point know is understanding <em>how</em>: first, Kafka runs as a cluster on one or more servers that can span multiple datacenters. Nothing special. Second, the Kafka cluster stores streams of records in categories called <em>topics</em> - think about AWS SNS topic, it’s really the same (shame on AWS! just kidding). Third, each record consists of a key, a value, and a timestamp. There Kafka box includes four core APIs:</p>
<ul>
  <li>Producer APIs: to publish a stream of records to one or more Kafka topics;</li>
  <li>Consumer APIs: to subscribe to one or more topics and process the stream of records produced to them;
And these could be enough to implement the publish/subscribe mechanism, but there are also</li>
  <li>Stream APIs: to process <em>stream</em> (?), aka consuming an input stream from one or more topics, do something on input stream, and producing an output stream to one or more output topics;</li>
  <li>Connector APIs: allows building and running reusable producers or consumers that connect Kafka topics to existing applications or data systems. For example, a connector to a relational database might capture every change to a table;</li>
</ul>

<p>The communication between the clients and the servers is done with a simple, high-performance, language agnostic TCP protocol. The picture below is directly from the Kafka website - thank you guys!</p>

<p align="center"><img src="https://image.ibb.co/juudSH/imageedit_9560608901.png" alt="perceptron" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="kafka-topics">Kafka: topics</h4>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A topic is a category or feed name to which records are published.
</code></pre></div></div>

<p>Topics are always multi-subscriber, thus a topic can have zero, one, or many consumers that subscribe to the data written to it.</p>

<p><strong>For each topic, the Kafka cluster maintains a partitioned log that looks like this</strong>:</p>

<p align="center"><img src="https://image.ibb.co/njQ7Mc/imageedit_1_7046918343.png" alt="perceptron" style="width: 75%; marker-top: -10px;" /></p>

<p>Each <strong>partition</strong> is an ordered, immutable sequence of records that is continually appended to a structured commit log. The records in the partitions are each assigned a sequential id number called the <strong>offset</strong> that uniquely identifies each record within the partition.</p>

<p>The Kafka cluster durably persists all published records - whether or not they have been consumed — using a configurable retention period. For example, if the retention policy is set to 2 days, then for the 2 days after a record is published, it is available for consumption, after which it will be discarded to free up space. Kafka’s performance is effectively constant with respect to data size so storing data for a long time is not a problem.</p>

<p align="center"><img src="http://image.ibb.co/iv7ySH/imageedit_4_8265886645.png" alt="perceptron" style="width: 75%; marker-top: -10px;" /></p>

<p>The only metadata retained on a per-consumer basis is the offset or position of that consumer in the log: this offset is controlled by the consumer. Thus, normally a consumer will advance its offset linearly as it reads records, but, in fact, since the position is controlled by the consumer it can consume records in any order it likes and also, eventually, reprocess data from the past, or skip ahead to the most recent record.</p>

<p>Kafka consumers are very cheap — they can come and go without much impact on the cluster or on other consumers, so you can use our command line tools to “tail” the contents of any topic without changing what is consumed by any existing consumers.</p>

<p>The <strong>partitions</strong> in the log serve several purposes. First, they allow the log to scale beyond a size that will fit on a single server. Each individual partition must fit on the servers that host it, but a topic may have many partitions so it can handle an arbitrary amount of data. Second they act as the unit of parallelism.</p>

<h4 id="kafka-partitions">Kafka: partitions</h4>
<p>We already said but it’s crucial to understand the meaning of the partition</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A partition is an ordered, immutable sequence of records that is continually appended to—a structured commit log
</code></pre></div></div>

<p>Ordered. Immutable. Sequence of records. Just keep these words in mind when you are thinking about a partition. Partitions are distributed over the servers in the Kafka cluster with each server handling data and requests for a share of the partitions. Each partition is replicated across a configurable number of servers for fault tolerance.</p>

<p>How this mechanism works and how the parallelism is accomplished? To answer this, we need the concept of <em>leader</em> and <em>follower</em>.</p>

<p>Each partition has one server which acts as the “leader” and zero or more servers which act as “followers”. The leader handles all read and write requests for the partition while the followers passively replicate the leader. If the leader fails, one of the followers will automatically become the new leader. Each server acts as a leader for some of its partitions and a follower for others so load is well balanced within the cluster.</p>

<h3 id="kafka-actors">Kafka: actors</h3>
<p>Ok, at this point you should have a <em>quite complete</em> idea about what Kafka is, what are the features exposed, what APIs ara available, what kind of problems it try to resolve, etc etc. Let’s talk about <em>actors</em> of this distributed platform!</p>

<h4 id="kafka-producers">Kafka: producers</h4>
<p>Producers publish data to the topics of their choice. The producer is responsible for choosing which record to assign to which partition within the topic. This can be done in a round-robin fashion simply to balance load or it can be done according to some semantic partition function (say based on some key in the record). More on the use of partitioning in a second!</p>

<h4 id="kafka-consumers">Kafka: consumers</h4>
<p>Consumers label themselves with a <strong>consumer group name</strong>, and each record published to a topic is delivered to one consumer instance within each subscribing consumer group. Consumer instances can be in separate processes or on separate machines. The are two rules:</p>

<ul>
  <li>
    <p>If all the consumer instances have the same consumer group, then the records will effectively be load balanced over the consumer instances: of course, this is simple to be done from Kafka side, because it can identifies more instances acting as kind of duplicated consumers;</p>
  </li>
  <li>
    <p>If all the consumer instances have different consumer groups, then each record will be broadcast to all the consumer processes: consumers are, from a Kafka perspective, different from each one, thus record are sent to everyone;</p>
  </li>
</ul>

<h4 id="kakfa-example">Kakfa: example</h4>
<p>The picture from the Kafka doc shows a 2-server Kafka cluster hosting 4 partitions (named P0-P3) with 2 consumer groups. Consumer group A has 2 consumer instances and consumer group B has 4 four instances.</p>

<p align="center"><img src="http://image.ibb.co/jnppZx/imageedit_2_8366438504.png" alt="perceptron" style="width: 70%; marker-top: -10px;" /></p>

<p>A topic could be something like “news for a (fixed) neighborhood”: let’s say that there is a Consumer Group for those news - imagine this Consumer Group as a machine that, for instance, acts like a Telegram Bot sender on its behalf. The Consumer Group for this topic is unique so - eventually neighborhoods close to the given district may be interested too, but the reasoning I’m doing is to state <em>topics have a small number of consumer groups</em>. Of course, this dependes on the nature of the topic. In the example - actually, in real world - each Consumer Group is composed of many consumer instances, for scalability and fault tolerance. Think about this configuration as nothing more than publish-subscribe semantics where the subscriber is a cluster of consumers instead of a single process.</p>

<h5 id="kafka-consumption">Kafka: consumption</h5>
<p>The way consumption is implemented in Kafka is by <em>dividing up</em> - not literally - the partitions in the server over the consumer instances so that <strong>each instance is the exclusive consumer of a “fair share” of partitions at any point in time</strong>. This process of maintaining membership in the group is handled by the Kafka TCP protocol dynamically. If new instances join the Consumer Group they will take over some partitions from other instances of the Consumer Group; if an instance dies, its partitions will be distributed to the remaining instances.</p>

<p><span style="color:#A04279; font-size: bold;"><strong>Note</strong></span>: Kafka only provides a total order over records within a partition, not between different partitions in a topic. Remember that <strong>for each topic, the Kafka cluster maintains a partitioned log</strong>, so records of 1 single topic are spread across 1 or more partitions. Per-partition ordering combined with the ability to partition data by key is sufficient for most applications. However, if you require a total order over records this can be achieved with a topic that has only 1 partition, though this will mean <strong>only 1 consumer process per consumer group</strong>.</p>

<h4 id="kafka-gains-and-guarantees">Kafka: gains and guarantees</h4>
<p>Ok, why all these information about consumpation, topics, partitions, etc? Because Kafka provide us really interesting guarantees.</p>

<h5 id="guarantees">Guarantees</h5>

<ul>
  <li>Messages sent by a producer to a particular topic partition will be appended in the order they are sent. That is, if a record <strong>M1</strong> is sent by the same producer as a record <strong>M2</strong>, and <strong>M1</strong> is sent first, then <strong>M1</strong> will have a lower offset than <strong>M2</strong> and appear earlier in the log;</li>
  <li>A consumer instance sees records in the order they are stored in the log;</li>
  <li>For a topic with replication factor N, we will tolerate up to N-1 server failures without losing any records committed to the log;</li>
</ul>

<h5 id="gains">Gains</h5>
<p>Are Kafka streams better than classical messaging system? I would like to say “Yes, of course”, but I use to think that in the end “it always depends” on what you need to do. In any case, messaging traditionally has two models: queuing and publish-subscribe.</p>

<table>
  <thead>
    <tr>
      <th>Paradigm</th>
      <th>Pro</th>
      <th>Cons</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Queue</td>
      <td>Allows you to divide up the processing of data over multiple consumer instances, which lets you scale your processing.</td>
      <td>Isn’t multi-subscriber — once one process reads, the data it’s gone.</td>
    </tr>
    <tr>
      <td>Publish-subscribe</td>
      <td>Allows you broadcast data to multiple processes.</td>
      <td>Has no way of scaling processing since every message goes to every subscriber.</td>
    </tr>
  </tbody>
</table>

<p>The Consumer Group concept in Kafka generalizes these two paradigms. As with a queue implementation, the Consumer Group allows you to divide up processing over a collection of processes (the members or instances of the Consumer Group itself). As with a publish-subscribe implementation, Kafka allows you to broadcast messages to multiple Consumer Groups.</p>

<p>What about the guarantees?</p>

<table>
  <thead>
    <tr>
      <th>Paradigm</th>
      <th>Pro</th>
      <th>Cons</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Queue</td>
      <td>Retains records in-order on the server, so if multiple consumers consume from the queue then the server hands out records in the order they are stored.</td>
      <td>The server hands out records in order, but the records are delivered <em>asynchronously</em> to consumers, so they may arrive out of order on different consumers: this effectively means the ordering of the records is lost in the presence of parallel consumption.</td>
    </tr>
  </tbody>
</table>

<p>In Kafka, the notion of parallelism is defined within the topics in the partitions - so by design. Kafka is able to provide both ordering guarantees and load balancing over a pool of consumer processes. This is achieved by assigning the partitions in the topic to the consumers in the consumer group so that each partition is consumed by exactly one consumer in the group. By doing this Kafka ensures that the consumer is the only reader of that partition and consumes the data in order. Since there are many partitions this still balances the load over many consumer instances. Note however that there cannot be more consumer instances in a consumer group than partitions.</p>

<p>Further, Kafka allows producers to wait on acknowledgement so that a write isn’t considered complete until it is fully replicated and guaranteed to persist even if the server written to fails. A retail application might take in input streams of sales and shipments, and output a stream of reorders and price adjustments computed off this data.</p>

<p>Some other Kafka features are Geo-Replication, Multi-tenancy and others but - I’m honest - I didn’t study these topics because they are not related to the experiment I want to doing after with Blockchain.</p>

<h4 id="blockchain-reasons">Blockchain: reasons</h4>
<p>I promise, these are the only words I want to say about Blockchain:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A Blockchain is a continuously growing list of records, called blocks, which are linked and secured using cryptography. Each block typically contains a hash pointer as a link to a previous block, a timestamp and transaction data.
</code></pre></div></div>

<p>Do you see some similarities with something you just read somewhere else :)? Despite the fact that this concept are relatively simple, I read a lot about block chain but in the end I always tried to learn by doing: this is to say you can’t really know how a Blockchain works without build your own. So…let’s build a Blockchain!</p>

<h5 id="blockchain-overview">Blockchain: overview</h5>
<p>First of all, thanks a lot to <a href="https://hackernoon.com/learn-blockchains-by-building-one-117428612f46">Daniel van Flymen</a> for its incredible explanation about how a Blockchain works, so please have a look at his beautiful work: you can even check out the entire code he prepared in <a href="https://github.com/dvf/blockchain">its repository</a>. I followed its step to understand the basics, so please put apart the Kafka part for the moment.</p>

<h5 id="blockchain-one-file-required">Blockchain: one file required</h5>
<p>Daniel created a single Python file containing a Blockchain class whose constructor creates an initial empty list (to store your blockchain), and another to store transactions. The Blockchain class is responsible for managing the chain. It will store transactions and have some helper methods for adding new blocks to the chain. Ok, wait a moment: we already know what a Blockchain is, but we didn’t talk about blocks.</p>

<h5 id="blockchain-blocks">Blockchain: blocks</h5>
<p>What does a Block look like? A Block is no more than an <em>object</em> with an index, a timestamp (in Unix time), a list of transactions, a proof (more on that later), and the hash of the previous Block. Following Daniel guide, here’s an example of what a single Block looks like:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">block</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'index'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s">'timestamp'</span><span class="p">:</span> <span class="mf">1506057125.900785</span><span class="p">,</span>
    <span class="s">'transactions'</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="s">'sender'</span><span class="p">:</span> <span class="s">"8527147fe1f5426f9dd545de4b27ee00"</span><span class="p">,</span>
            <span class="s">'recipient'</span><span class="p">:</span> <span class="s">"a77f5cdfa2934df3954a5c7c7da5df1f"</span><span class="p">,</span>
            <span class="s">'amount'</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
        <span class="p">}</span>
    <span class="p">],</span>
    <span class="s">'proof'</span><span class="p">:</span> <span class="mi">324984774000</span><span class="p">,</span>
    <span class="s">'previous_hash'</span><span class="p">:</span> <span class="s">"2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824"</span>
<span class="p">}</span></code></pre></figure>

<p>Thus, each new block contains within itself, the hash of the previous Block. This is crucial because it’s what gives blockchains immutability: if an attacker corrupted an earlier Block in the chain then all subsequent blocks will contain incorrect hashes. So what? Well, this will make sense later, but the point is that there is only a valid chain. You can notice also that a block contains a list of transactions. What is a transaction?</p>

<h5 id="blockchain-transactions">Blockchain: transactions</h5>
<p>A transaction is a concept often related to virtual money: it could be anything, you can think about the transactions list as the always growing list of data to be validated and manipulated during time, with a specific constraint: they have to be immutable, consistent, and stored forever. The concept of money transaction fits well with these needs, because of its nature characteristics. So, the next step is to provide your class a way to a way of adding transactions to a Block. The new_transaction() method is responsible for this, and it’s pretty straight-forward to implement by your-self. After new_transaction() adds a transaction to the list, it returns the index of the block which the transaction will be added to — the next one to be mined. This will be useful later on, to the user submitting the transaction.</p>

<h5 id="blockchain-create-a-block">Blockchain: create a block</h5>
<p>When your Blockchain is instantiated you need to seed it with a - so called - <strong>genesis block</strong> — or block with no predecessors. You also need to add a “proof” to your genesis block which is the result of mining (or Proof of Work). What does it mean mine? Wait for it :D
In addition to creating the genesis block in your constructor, you also have to provide three methods: new_block(), new_transaction() and hash().
The name are self-explanotory, you can have a look at the code directly. At this point, you must be wondering how new blocks are created, forged or mined.</p>

<h5 id="blockchain-proof-of-work">Blockchain: Proof of Work</h5>
<p>A <strong>Proof of Work</strong> algorithm (PoW) is the way used to create or mine new Blocks on the Blockchain. The goal of PoW is to discover a number which solves a problem. The number must be difficult to find but easy to verify — computationally speaking — by anyone on the network. This is the core idea behind Proof of Work and yes, it’s really similar to the concept behind RSA, that is based on prime numbers and hardly invertible functions.</p>

<p>Let’s decide that the hash of some integer <em>x</em> multiplied by another <em>y</em> must end in 0. So, hash(x * y) = gdf798…0. And for this simplified example, let’s fix x = 5. Implementing this in Python:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">sha256</span>
<span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c"># We don't know what y should be yet...</span>
<span class="k">while</span> <span class="n">sha256</span><span class="p">(</span><span class="n">f</span><span class="s">'{x*y}'</span><span class="o">.</span><span class="n">encode</span><span class="p">())</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="s">"0"</span><span class="p">:</span>
    <span class="n">y</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">print</span><span class="p">(</span><span class="n">f</span><span class="s">'The solution is y = {y}'</span><span class="p">)</span></code></pre></figure>

<p>The solution here is y = 21. Since, the produced hash ends in 0:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="nb">hash</span><span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="mi">21</span><span class="p">)</span> <span class="o">=</span> <span class="mf">1253e9373</span><span class="n">e</span><span class="o">...</span><span class="mf">5e3600155</span><span class="n">e860</span></code></pre></figure>

<p>In Bitcoin, the Proof of Work algorithm is called Hashcash and it’s not too different from the basic example above. It’s the algorithm that miners race to solve in order to create a new block. In general, the difficulty is determined by the number of characters searched for in a string. The miners are then rewarded for their solution by receiving a coin—in a transaction. The network is able to easily verify their solution.</p>

<p>The implementation of the Proof of Work is really simple: the rule used by Daniel is “find a number <em>p</em> that when hashed with the previous block’s solution a hash with 4 leading 0s is produced.”.</p>

<p>At this point, your class is almost complete and you’re ready to begin interacting with it using HTTP requests.</p>

<p>Using the Flask microframework you can easy map HTTP endpoints to Python functions allowing you talking to your blockchain over the web using HTTP requests. This is done by providing three routes (actually, there are more than three)</p>
<ul>
  <li>/transactions/new to create a new transaction to a block</li>
  <li>/mine to tell our server to mine a new block.</li>
  <li>/chain to return the full Blockchain.</li>
</ul>

<p>The transaction endpoint accepts request for a transaction that looks like this:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
 </span><span class="s2">"sender"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my address"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"recipient"</span><span class="p">:</span><span class="w"> </span><span class="s2">"someone else's address"</span><span class="p">,</span><span class="w">
 </span><span class="s2">"amount"</span><span class="p">:</span><span class="w"> </span><span class="mi">5</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>The mining endpoint is where the magic happens, and it’s easy to understand what it does:</p>

<ul>
  <li>calculate the Proof of Work;</li>
  <li>reward the miner (us) by adding a transaction granting us 1 coin;</li>
  <li>forge the new Block by adding it to the chain;</li>
</ul>

<p>The recipient of the mined block is the address of your node. And most of what we’ve done here is just interact with the methods on the Blockchain class. But…a Blockchain is decentralized: at the moment, even if more than one node is running over the same network, it mantains a private version of the chain. And this is the point arised at the very beginning: how can multiple nodes share the same - actually, the unique real transactions chain? They can’t without a mechanism providing a sort of consensus, implemented by an algorithm (the Consensus Algorithm, sounds good?) to let multiple node work over the same - decentralized - chain.</p>

<h5 id="blockchain-consensus">Blockchain: consensus</h5>
<p>The first point to deal with consensus is to deal with other nodes in the network. So, before the implementation of Consensus Algorithm, you need a way to let a node know about neighbouring nodes on the network. Each node on our network should keep a registry of other nodes on the network. Thus, you’ll need some more endpoints:</p>

<ul>
  <li>/nodes/register to accept a list of new nodes in the form of URLs;</li>
  <li>/nodes/resolve to implement our Consensus Algorithm, which resolves any conflicts—to ensure a node has the correct chain;</li>
</ul>

<p>The Blockchain class has also a set() to hold the list of nodes. This is a cheap way of ensuring that the addition of new nodes is idempotent—meaning that no matter how many times we add a specific node, it appears exactly once. It is really simple to implement the logic to register new nodes</p>

<p>As mentioned, a conflict is when one node has a different chain to another node. To resolve this, we’ll make the rule that the longest valid chain is authoritative. In other words, the longest chain on the network is the de-facto one. Using this algorithm, we reach Consensus amongst the nodes in our network.</p>

<p>So with the valid_chain() method you can check if a chain is valid by looping through each block and verifying both the hash and the proof. With the resolve_conflicts() method you can loops through all your neighbouring nodes, downloads their chains and verifies them using the above method. If a valid chain is found, whose length is greater than your, you replace your chain with the longest and so on. And that’s all.</p>

<p>### Let’s build a Kafka-based Blockchain
Again, I want first to thanks the author of this experiment so <a href="https://hackernoon.com/a-blockchain-experiment-with-apache-kafka-97ee0ab6aefc">Luc Russell</a> for its incredible explanation about how a to use Kafka as transport layer for the Blockchain, so please have a look at his beautiful work: you can even check out the entire code he prepared in <a href="https://github.com/lucrussell/kafka-blockchain">its repository</a>. I followed its step to understand the basics, and extend its file to provide a complete example of multiple nodes interacting between each others.</p>

<p>On startup, your Kafka consumer will try to do three things: initialize a new blockchain if one has not yet been created; build an internal representation of the current state of the blockchain topic; then begin reading transactions in a loop. The initialization step looks for the highest available offset on the blockchain topic. If nothing has ever been published to the topic, the blockchain is new, so it starts by creating and publishing the genesis block.</p>

<p>The read_and_validate_chain() method does two things:</p>

<ul>
  <li>first, it creates a consumer to read from the blockchain topic;</li>
  <li>second, it begins reading block messages from the blockchain topic;</li>
</ul>

<p>The initialization step setup the Consumer Group to the blockchain group to allow the broker to keep a reference of the offset the consumers have reached, for a given partition and topic. The auto_offset_reset=OffsetType.EARLIEST indicates that the node begins downloading messages from the start of the topic. The auto_commit_enable=True lets periodically notify the broker of the offset we’ve just consumed (as opposed to manually committing). The reset_offset_on_start=True is a switch which activates the auto_offset_reset for the consumer.</p>

<h4 id="docker-compose">Docker compose</h4>
<p>The Docker-compose</p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/kakfa-and-blockchain</wp:post_id>
        <wp:post_date>2018-04-11T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-04-11T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="kafka"><![CDATA["kafka",]]></category>
        
          <category domain="post_tag" nicename="blockchain"><![CDATA["blockchain",]]></category>
        
          <category domain="post_tag" nicename="experiment"><![CDATA["experiment"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[HAL: AWS s3-sns based single-slack-command bot to handle your VPC]]></title>
        <link>made2591.github.io/posts/hal-s3-sns</link>
        <pubDate>2018-03-24T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>I recently build a <a href="https://slack.com">Slack</a> command to help me handle actions on my VPC. The only thing you need is an <a href="http://aws.amazon.com">AWS account</a> - Free Tier it’s ok. I <a href="https://made2591.github.io/posts/free-tier-cloudwatch">recently wrote</a> about how to maximize resources, with particular focus on the number of hours you have in Free Tier - using specific CloudWatch Rules. In this article, I want to describe how I extended my architecture to invoke <em>actions</em> - potentially, all the action provided by Amazon Web Services official SDK(s) - with a single Slack command. I decided to call this slack command HAL because I think it’s a really dangerous command 😜</p>

<p align="center"><img src="https://i2.wp.com/filmdoctor.co.uk/wp-content/uploads/2014/06/1920x1080_49-movies-2001-space-odyssey-hal-9000-hd-wallpaper_mvrh.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="ingredients">Ingredients</h3>
<p>You will need:</p>
<ul>
  <li><a href="http://aws.amazon.com">AWS account</a> (free tier it’s ok)</li>
  <li><a href="https://aws.amazon.com/en/Lambda/">AWS Lambda</a></li>
  <li><a href="https://aws.amazon.com/en/s3/">AWS S3</a></li>
  <li><a href="https://aws.amazon.com/en/sns/">AWS SNS</a></li>
  <li><a href="https://slack.com">Slack</a></li>
</ul>

<h4 id="general-schema">General schema</h4>
<p>The schema I created to handle my actions is the following</p>

<p align="center"><img src="http://image.ibb.co/muaGH7/hal_aws_bot.png" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="recipe">Recipe</h3>
<p>As I already said in a preview post on AWS Services, I recommend you to pay a lot of attention. You always have to know exactly what are you doing, to avoid surprise in billing in the end of the month. Fortunately, there are a lot of documentations on Amazon official site, so you only have to read them.</p>

<h4 id="one-slack-command-to-rule-them-all">One slack command to rule them all</h4>
<p>Immagine to have a chatbot able to recognize sentence orders:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HAL, start my jenkins instances and stop the kafka cluster.
</code></pre></div></div>

<p>Or</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Schedule my-Lambda to run in the next 3 hours.
</code></pre></div></div>

<p>This sentences both invoke particular predefined actions in your VPC, but if you you want a bot able to understand them, you have no choice: you need something able to understand natural language. This is tricky because even if you can do this efficiently - I mean, recognize instances, actions, contexts, retrieve ids of resources and so on - in the end you have to deal with the mapping between what you (actually, your bot) understood and what you effectively want to do in your VPC (or house, etc). But…if you think about it, why should you use natural language? I mean, you use regular language to talk to machines every day, without any problems: git add, docker-compose up, ps aux, etc are all specific commands precisely understood by machines, like clicks in web applications are able to reach specific url. The <em>parameters</em> and parametric thinking solve - in a sense - the problems of create something as much as possible generic, durable, but…in the end, formally defined. Regular.</p>

<p>And that’s why I decided to implement a grammar - the old style way. Imagine to have two sets: <script type="math/tex">C</script>, the set of contexts (ec2, Lambda, etc) and <script type="math/tex">A_c</script> the set of action for the specific context <script type="math/tex">c \in C</script>. You can invoke one single command with one or more specified context, each of them followed by one or more actions available in the specific context, each of them followed by 0 or more parameters - if needed. It seems difficult to create something like this, but - believe me - it is not. The grammar is really simple:</p>

<ul>
  <li>S := /hal (C;)+</li>
  <li>C := <script type="math/tex">c \in C</script> (-&gt; A(c)) | <script type="math/tex">c \in C</script> (-&gt; A(c),)+;</li>
  <li>A(c) := <script type="math/tex">a \in A_c</script> (a-zA-Z0-9)*;</li>
</ul>

<p>Ok, I mixed a little bit of notation: first, don’t get confused by the uppercase symbols (S, C, A) and the the set C and A. The grammar start symbol is S: it produces the string <em>“/hal”</em> followed by the result of at least one (I used regex expression +) production of the symbol C followed by <em>”;”</em>. Thus, our command would be something like</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/hal [result of C]; ... [result of C]; from 1 to n
</code></pre></div></div>

<p>The C symbol produces a string in the form <em>“c”</em> with <script type="math/tex">c \in C</script>, followed by the result of 1 or more (I used regex expression + and or symbol | to prevent insert a comma <em>”,”</em>) concatenation of <em>”-&gt;”</em> with the production of the symbol A (related to the chosen context c) followed by <em>”,”</em>. Let be c = <em>“ec2”</em>, our C symbol would produce something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ec2 -&gt; [result of A(ec2)]
</code></pre></div></div>

<p>Or, if more than one action is produced, each one except the last is followed by the commma <em>”,”</em> and the result will be something like (for instance, for three actions over the same context):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ec2 -&gt; [result of A(ec2), result of A(ec2), result of A(ec2)]
</code></pre></div></div>

<p>Finally, given a context c, the symbol <script type="math/tex">A(c)</script> produces a concatenation of one of the actions <script type="math/tex">a</script> available in the context (i.e., with <script type="math/tex">a \in A_c</script>) followed by 0-n parameters. Given a = <em>“start”</em>, with <script type="math/tex">a \in A_c</script>, then the symbol A(c) will produce:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>start all
</code></pre></div></div>

<p>or</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>start docker jenkins
</code></pre></div></div>

<p>or simply</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>start
</code></pre></div></div>

<p>Putting all toghether and extending the set of context and actions, we get something like:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/hal ec2 -&gt; start docker jenkins, -&gt; stop kafka; Lambda -&gt; create new nodejs;
</code></pre></div></div>

<p>This command is easy to write, readable and easily to parse using a little bit of string manipulation without going crazy. Of course, you can define your own grammar!</p>

<h4 id="a-single-aws-lambda-to-execute-actions">A single AWS Lambda to execute actions</h4>
<p>Let’s forget for a moment the grammar. Let say that you have the result of your commands in a JSON request in the form:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"context"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"value"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"action"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"value"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"parameters"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="err">...</span><span class="w">
    </span><span class="p">{</span><span class="w">
        </span><span class="s2">"context"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"value"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"action"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"value"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"parameters"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">]</span></code></pre></figure>

<p>Ok, this is simple to handle. The only things you need to do is mapping context and actions to specific action in your VPC - using an AWS Lambda function. You will use this mapping also to <em>validate</em> your command later, so I decided to wrote a JSON file to a closed S3 bucket. In the next paragraph, I describe this JSON configuration file and how to create a s3 bucket.</p>

<h4 id="s3-unique-configuration-endpoint">S3: unique configuration endpoint</h4>
<p>Have a look at the configuration below</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="s2">"ec2"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"start"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"start_instances_action"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"stop"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"stop_instances_action"</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="s2">"Lambda"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"invoke"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"invoke_Lambda"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"create"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"create_Lambda"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"schedule"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"schedule_Lambda"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>The keys at the first level provide the set <script type="math/tex">C</script> of specific contexts you want to handle with your grammar. Keys of each context provide the set of specific actions <script type="math/tex">A(c)</script> available in the context and the value of each action key is the name of the method to invoke during the AWS Lambda execution. To create an s3 bucket, follow <a href="https://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">this</a> guidelines, then put your JSON configuration file in the bucket. You will need the name of the bucket and the of the file in it late to setup AWS Lambda(s). Let’s create the core Lambda that will execute passed actions.</p>

<h4 id="aws-lambda-vpc-actions">AWS Lambda: VPC Actions</h4>
<p>I created this Lambda using Python: you can of course working with the other supported language. The code is available <a href="https://gist.github.com/made2591/6c4c35590831101f203f8b5b26d4e2f9">in this Github Gist</a>.</p>

<p>The <code class="highlighter-rouge">VPCAction</code> class implements the methods defined in the configuration file created and uploaded to the s3 bucket: in my example, the Lambda context methods are missing but this is not a problem because the <code class="highlighter-rouge">getActionConfiguration</code> method looks (this is done using the <code class="highlighter-rouge">getattr</code> method) for an acation in the <code class="highlighter-rouge">VPCAction</code> class and if there isn’t a match, assign an empty action to prevent errors during execution of (eventually not-defined) actions (better, defined in configuration so available in commands, but actually not implemented yet).</p>

<p>If the action is allowed and pass each check, the response of the respective method called on the specific context with given parameters is saved in a dictionary and then returned as result.</p>

<p>Another interesting point is the <code class="highlighter-rouge">isinstance</code> check done in the handler method is to prevent errors while testing your Lambda. In fact, this Lambda will be invoked by using <code class="highlighter-rouge">AWS SNS</code>, so it has to be able to deal with events coming from the SNS publish-subscribe system. I will talk later about this. After you give to the role assumed by this Lambda the right policy to get into the s3 and to work with ec2 instances, you can test it by creating a test event like the ones defined in the previous paragraph.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="s2">"context"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ec2"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"stop"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"parameters"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"docker"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"jenkins"</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span></code></pre></figure>

<p>Done? Ok. Let’ attach the SNS trigger to the Lambda. It’s really simple: starting from the web console, you can add a trigger to your Lambda and the only thing you have to do is provide the ARN of the topic. To define a topic for HAL and get an ARN, follow <a href="https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html">this</a> guidelines.</p>

<p>Let’s go ahead by creating another Lambda to handle slack command. I used Node.js for my <code class="highlighter-rouge">SlackEntryPoint</code> AWS Lambda: for the moment, create an empty function, just to test message coming from the Slack command we will create later: just put a log and return the event passed for debug purpose.</p>

<p>Let’s define an endpoint for the empty Lambda</p>

<h4 id="api-gateway">API Gateway</h4>
<ul>
  <li>In AWS go to the API Gateway section;</li>
  <li>Click the “Create API” button and fill in the details;</li>
  <li>Click the Create method button in the top right, and select POST from the drop down on the left (and click the small tick);</li>
  <li>In the Integration type select Lambda function, and select the region your AWS account is set to and start typing - for instance, in my case <code class="highlighter-rouge">SlackEntryPoint</code> (the empty Lambda) - for a list of your Lambdas to appear;</li>
  <li>Click “Save”;</li>
  <li>On the following screen click the box Integration Request and scroll down to the Mapping Requests section to define a Body Mapping template;</li>
  <li>Click Add mapping template and type application/json into the box and click the small tick;</li>
  <li>Click the pen icon next to the word Input passthrough and select Mapping template from the dropdown;</li>
  <li>In the Template box put the code available <a href="https://gist.github.com/made2591/f173b4af0a2d6b4e87887507b59260f9">here</a>;</li>
  <li>Click the small tick to save these settings and select the Deploy API button;</li>
</ul>

<p>At the top of the page you should now be given a HTTPS URL (similar to http://xyz.execute-api.zone-1.amazonaws.com/stage). This URL is needed for the creation of the Slack command /hal.</p>

<h4 id="slack-command">Slack command</h4>
<p>When you create a Slack application (see step 4 of <a href="https://made2591.github.io/posts/free-tier-cloudwatch">my previous post</a> for more details), you can easily add a command to invoke request. The only things you need is a URL as endpoint - the one we have just defined above. If you have a look a look at the <a href="https://api.slack.com/slash-commands">documentation</a>, you find out that each time you invoke the Slack command, the message (and its data) will be sent to the configured external URL via HTTP POST. For example, imagine a workspace at example.slack.com installed an app with a command called /weather. If someone on that workspace types /weather 94070 in their #test channel and hits enter, this data would be posted to the external URL:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">token</span><span class="o">=</span>gIkuvaNzQIHg97ATvDxqgjtO
<span class="nv">team_id</span><span class="o">=</span>T0001
<span class="nv">team_domain</span><span class="o">=</span>example
<span class="nv">enterprise_id</span><span class="o">=</span>E0001
<span class="nv">enterprise_name</span><span class="o">=</span>Globular%20Construct%20Inc
<span class="nv">channel_id</span><span class="o">=</span>C2147483705
<span class="nv">channel_name</span><span class="o">=</span><span class="nb">test
</span><span class="nv">user_id</span><span class="o">=</span>U2147483697
<span class="nv">user_name</span><span class="o">=</span>Steve
<span class="nb">command</span><span class="o">=</span>/weather
<span class="nv">text</span><span class="o">=</span>94070
<span class="nv">response_url</span><span class="o">=</span>https://hooks.slack.com/commands/1234/5678
<span class="nv">trigger_id</span><span class="o">=</span>13345224609.738474920.8088930838d88f008e0</code></pre></figure>

<p>This data will be sent to your URL as a HTTP POST with a <code class="highlighter-rouge">Content-type</code> header set as <code class="highlighter-rouge">application/x-www-form-urlencoded</code>: because we defined a Body Mapping template to deal with x-www-form-urlencoded content-type, we can use the link provided by API Gateway console after the deploy and start testing our command (better if in a private channel). If you type and return /hal, you could see a json version of the information provided by Slack.</p>

<h4 id="aws-simple-notification-service">AWS Simple Notification Service</h4>
<p>You can fill your <code class="highlighter-rouge">SlackEntryPoint</code> Lambda with the code available <a href="https://gist.github.com/made2591/9db86b9c3256ea60620b7923f9ee9297">in this Github Gist</a> - I know, it’s not so good, but it’s ok for a test. That’s the part where AWS SNS is used: SNS is the way I delegate the action parsed by my SlackEntryPoint Lambda to my VPCAction Lambda to both reduced timeout error - still there, if my Lambda are not cached (1st call) - returned by Slack and to split in pieces without invoking a Lambda from a Lambda (it is possible, but I think slower). In particular, SlackEntryPoint in order:</p>

<ul>
  <li>checkSecurity (validate Slack provided token, and in my case alse my ID, my private channel and so on);</li>
  <li>parseText (provided as arguments of my /hal command);</li>
  <li>checkIntegrity (this parts use the same configuration file of the bucket previously created);</li>
  <li>publishActionOnSNSTopic (and invoke the VPCActions Lambda - excluding grammar errors);</li>
</ul>

<h4 id="optional-aws-lambda-to-send-information-on-change-of-status">Optional: AWS Lambda to send information on change of status</h4>
<p>I recently wrote a Lambda to let me know the change of status: of course, you can create a Lambda able to send generic message, and let VPC Actions publish the message over a SNS topic to provide slack response customized by the action you invoked. My third Lambda for this project is available <a href="https://gist.github.com/made2591/acc61010fa119929718e122ca69d8a92">here</a>.</p>

<p align="center"><img src="http://image.ibb.co/iDTW0S/hal_aws_bot_2.png" style="width: 100%; marker-top: -10px;" /></p>

<p>Thank you everybody for reading!</p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/hal-s3-sns</wp:post_id>
        <wp:post_date>2018-03-24T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-03-24T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="aws"><![CDATA["aws",]]></category>
        
          <category domain="post_tag" nicename="s3"><![CDATA["s3",]]></category>
        
          <category domain="post_tag" nicename="sns"><![CDATA["sns",]]></category>
        
          <category domain="post_tag" nicename="ec2"><![CDATA["ec2",]]></category>
        
          <category domain="post_tag" nicename="lambda"><![CDATA["Lambda",]]></category>
        
          <category domain="post_tag" nicename="slack"><![CDATA["slack",]]></category>
        
          <category domain="post_tag" nicename="bot"><![CDATA["bot"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[JarvisButton: how to invoke multiple AWS Lambda with one AWS IoT Button (not Enterprise ed.)]]></title>
        <link>made2591.github.io/posts/aws-jarvis-button</link>
        <pubDate>2018-03-18T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>If you have an <a href="http://aws.amazon.com">AWS account</a> in Free Tier, bla bla bla ok stop: I am a AWS Lambda maniac. I only wrote about them (<a href="https://made2591.github.io/posts/aws-lambda">here</a>, <a href="https://made2591.github.io/posts/aws-step-functions">here</a>). In this article, I want to talk about my new purchase that is - of course - related to AWS Lambda: the AWS IoT Button. It first made its appearance on the IoT scene in October of 2015 at AWS re:Invent with the introduction of the AWS IoT service. That year all re:Invent attendees received the AWS IoT Button providing them the opportunity to get hands-on with AWS IoT. So cute. Since that time, AWS IoT button has been made broadly available to anyone interested in the clickable IoT device. Here it is! 😎😎😎</p>

<p align="center"><img src="http://image.ibb.co/eKamNx/IMG_9032.jpg" style="width: 100%; marker-top: -10px;" /></p>

<p>Sooooooo expensive :P</p>

<h3 id="ingredients">Ingredients</h3>
<p>You will need:</p>
<ul>
  <li><a href="http://aws.amazon.com">AWS account</a> (free tier it’s ok)</li>
  <li><a href="https://aws.amazon.com/en/lambda/">AWS Lambda</a></li>
  <li><a href="https://slack.com">Slack</a></li>
</ul>

<h3 id="recipe">Recipe</h3>
<p>As I already said in a preview post on AWS Services, I recommend you to pay a lot of attention. You always have to know exactly what are you doing, to avoid surprise in billing in the end of the month. Fortunately, there are a lot of documentations on Amazon official site, so you only have to read them.</p>

<h4 id="one-click--one-lambda">One click =&gt; One Lambda</h4>
<p>The first thing you have to learn with AWS IoT Button is that you can do anything special: you simply download the app, you click on the button and, in a bunch of seconds, AWS create certificates, call the NSA, setup something you will pay forever, remove movies from your Netflix to-view-list, destroy your VPC, recreate your VPC, and then let your mobile application associate the button with one of your (previously created) AWS Lambda. And that’s all.</p>

<p align="center"><img src="http://static1.businessinsider.com/image/5183bcd4ecad04a057000020/obamas-approval-rating-has-plunged-to-its-worst-mark-in-nine-months.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="scenario">Scenario</h3>
<p>Ok, my idea of the IoT Button was different: first, I thought to able to handle three different clicks - this is not, but in the end it is my fault. I didn’t read anything - I mean, literaly - before purchasing the AWS IoT Button. I didn’t want, I hadn’t time, I didn’t want to break a 3 dollars dash button and I hadn’t so much interest in this button. I was simply bored, I bought it, as most of us do.</p>

<p>Just to be clear: there is an Enterprise version of the button (more <a href="https://aws.amazon.com/it/blogs/aws/introducing-the-aws-iot-button-enterprise-program/">here</a>) but I think I got the occasion to create a sort of my own version of this - eventually, even more efficient.</p>

<h3 id="goal">Goal</h3>
<p>Did you ever seen IronMan? If not, I don’t know what do you live for: in any case, in the movie J.A.R.V.I.S - (<em>Just A Rather Very Intelligent System</em>) is the name given to the personal assistant - actually, it is only a voice - of R. Downey Jr, that plays the role of the famous superhero. J.A.R.V.I.S knows everything, understands everythings, I’m pretty sure that in one movie of the saga is able to bypass the Oracle Cloud (?!) as if it were the Accenture’s VPC (just kidding Accenture guys). The goal is to create something able to handle more than one click: so, I thought to use time, the only thing that the button <em>pass</em> to the AWS Lambda. The only thing you have to do is defining a sort of <em>alphabet</em> - something very similar to a morse code. But, it can’t be a real morse code, because you only have one type of click. Fortunately, this is enough to create - with elapsing of time - a Turing machine equivalent system. Or maybe not? I’m still thinking about it.</p>

<h3 id="grammar">Grammar</h3>
<p>My grammar is simple: I want my button able to do three things:</p>
<ul>
  <li>Tell me the weather forecast;</li>
  <li>Gather news for me;</li>
  <li>Provide me navigation button;</li>
</ul>

<p>Of course, it could tell me about movies, VPC status, home status, etc. I don’t want to link this JarvisButton to everything I wrote until now. As I was saying, one bit is exactly what we need to do what we want to do.</p>

<table>
  <thead>
    <tr>
      <th>Field</th>
      <th>Values</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Weather</td>
      <td>1</td>
    </tr>
    <tr>
      <td>News</td>
      <td>2</td>
    </tr>
    <tr>
      <td>Navigation</td>
      <td>3</td>
    </tr>
  </tbody>
</table>

<p>The desired behaviour is: I want to know about weather. I click and set the counter. I wait for 3 seconds: I click to execute the action. Done. If I want to invoke news gathering, I click two times to set the counter. I wait for 3 seconds: I click to execute the action. Done.</p>

<h3 id="implementation">Implementation</h3>
<p>First, create a DynamoDB Table - actually, you could also use an s3 bucket - because you have to store only 1 record on this table [what? yes, 1 record]. The record is composed by three field:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s2">"count"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s2">"timestamp"</span><span class="p">:</span><span class="w"> </span><span class="mi">1521307832</span><span class="w"> </span><span class="p">}</span></code></pre></figure>

<p>The logic beside this is really simple. Let be:</p>
<ul>
  <li><code class="highlighter-rouge">now</code> a variable containing the request Unix timestamp in seconds (math rounded);</li>
  <li><code class="highlighter-rouge">data</code> a variable containing the record described above - so that <code class="highlighter-rouge">data['timestamp']</code> will be the Unix timestamp of the record;</li>
  <li><code class="highlighter-rouge">COUNTER_LIMIT</code> and <code class="highlighter-rouge">UPPER_LIMIT</code> two constants - for instance, 3 and 10;</li>
</ul>

<p>Thus, I click the button and…:</p>
<ul>
  <li>If the difference between <code class="highlighter-rouge">now</code> (request time) and <code class="highlighter-rouge">data['timestamp']</code> is minor than the <code class="highlighter-rouge">COUNTER_LIMIT</code>, increment the counter (and update the timestamp);</li>
  <li>If the difference between <code class="highlighter-rouge">now</code> (request time) and <code class="highlighter-rouge">data['timestamp']</code> is between the <code class="highlighter-rouge">COUNTER_LIMIT</code> and the <code class="highlighter-rouge">UPPER_LIMIT</code>, execute the action associated to value of the counter, then reset the counter;</li>
  <li>If the difference between <code class="highlighter-rouge">now</code> (request time) and <code class="highlighter-rouge">data['timestamp']</code> is major than the <code class="highlighter-rouge">UPPER_LIMIT</code>, reset the counter;</li>
</ul>

<p><span style="color:#ffcc00; font-size: bold;">NOTE</span>: there are also two precautions.</p>
<ul>
  <li>first, the increment has to be <em>circular</em>, because if it is not your code could look for value of counter not associated with any of the action.</li>
  <li>second, you have to reset the value of the counter to 1, without executing anything if the count is zero (so, if the action has been executed) but you click your button again without reset-time elapsed yet.</li>
</ul>

<p>I implemented a short version of the algorithm below, but you can have a look at the code - one single lambda (despite I use a previous lambda to get my news) <a href="https://github.com/made2591/jarvis-button">here</a>.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">increment</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">now</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">actions</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Restart (new val: "</span><span class="o">+</span><span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]</span><span class="o">+</span><span class="s2">")"</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Increment (new val: "</span><span class="o">+</span><span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]</span><span class="o">+</span><span class="s2">")"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">data</span><span class="p">[</span><span class="s1">'timestamp'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">execute</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">now</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Execute action "</span><span class="o">+</span><span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]);</span>
    <span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nx">data</span><span class="p">[</span><span class="s1">'timestamp'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">reset</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">now</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Reset and restart count!"</span><span class="p">);</span>
    <span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="nx">data</span><span class="p">[</span><span class="s1">'timestamp'</span><span class="p">]</span> <span class="o">=</span> <span class="nx">now</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">logic</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">reqdate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
    <span class="nx">reqdate</span><span class="p">.</span><span class="nx">setHours</span><span class="p">(</span><span class="nx">reqdate</span><span class="p">.</span><span class="nx">getHours</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// this is for UTC/timezone/whatever</span>
    <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">reqdate</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span><span class="o">/</span><span class="mi">1000</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">((</span><span class="nx">now</span> <span class="o">-</span> <span class="nx">data</span><span class="p">[</span><span class="s1">'timestamp'</span><span class="p">])</span> <span class="o">&lt;</span> <span class="nx">COUNTER_LIMIT</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">data</span> <span class="o">=</span> <span class="nx">increment</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">now</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">((</span><span class="nx">now</span> <span class="o">-</span> <span class="nx">data</span><span class="p">[</span><span class="s1">'timestamp'</span><span class="p">])</span> <span class="o">&gt;=</span> <span class="nx">COUNTER_LIMIT</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">now</span> <span class="o">-</span> <span class="nx">data</span><span class="p">[</span><span class="s1">'timestamp'</span><span class="p">])</span> <span class="o">&lt;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">UPPER_LIMIT</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">data</span> <span class="o">=</span> <span class="nx">reset</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">now</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">actions</span><span class="p">[</span><span class="nx">data</span><span class="p">[</span><span class="s1">'count'</span><span class="p">]](</span><span class="nx">now</span><span class="p">);</span>
            <span class="nx">data</span> <span class="o">=</span> <span class="nx">execute</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">now</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">((</span><span class="nx">now</span> <span class="o">-</span> <span class="nx">data</span><span class="p">[</span><span class="s1">'timestamp'</span><span class="p">])</span> <span class="o">&gt;=</span> <span class="nx">UPPER_LIMIT</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">data</span> <span class="o">=</span> <span class="nx">reset</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">now</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>With this logic, you can implement the number of action you want! Of course, you can use a s3 to handle the JSON record needed to handle multiple click.</p>

<h3 id="jarvisbutton-mouth">JarvisButton mouth</h3>
<p>I used Slack as a mouth for my JarvisButton: each morning, and during the day, I can click my button and get exactly what I want 🤘🤘🤘 😎😎😎</p>

<p align="center"><img src="http://image.ibb.co/js92Cx/weather.png" style="width: 100%; marker-top: -10px;" /></p>

<p align="center"><img src="http://image.ibb.co/hB4DKc/news.png" style="width: 100%; marker-top: -10px;" /></p>

<p align="center"><img src="http://image.ibb.co/jUBFXx/navigator.png" style="width: 100%; marker-top: -10px;" /></p>

<p>If you search for inspiration, have a look at my github repo <a href="https://github.com/made2591/jarvis-button">here</a>.</p>

<h3 id="my-advise">My advise</h3>
<ul>
  <li>Start by logging the update of the record in the AWS Lambda Console, then add the logic to execute action (I used a dict of function and I simply call them, eventually invoking other lambda;</li>
  <li>Augment the number of seconds between each click because the AWS IoT Button shuts down after the call and you will need more than three second to power it on again, make another call without losing your time window opportunity;</li>
</ul>

<p>Github repo <a href="https://github.com/made2591/jarvis-button">here</a>.</p>

<p>Thank you everybody for reading!</p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/aws-jarvis-button</wp:post_id>
        <wp:post_date>2018-03-18T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-03-18T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="aws"><![CDATA["aws",]]></category>
        
          <category domain="post_tag" nicename="iot"><![CDATA["iot",]]></category>
        
          <category domain="post_tag" nicename="button"><![CDATA["button",]]></category>
        
          <category domain="post_tag" nicename="lambda"><![CDATA["lambda",]]></category>
        
          <category domain="post_tag" nicename="slack"><![CDATA["slack"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[I'm still learning]]></title>
        <link>made2591.github.io/posts/doing-vs-learning</link>
        <pubDate>2018-03-15T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="prelude">Prelude</h3>
<p>Ok, first of all: I know, I have already used the yoda picture below <a href="https://made2591.github.io/posts/fundamentals">in the past</a>, but even if I am not at all a fan of the Star Wars saga, I like it. ATTENTION! This is a deeply desperate post: don’t judge me, I’m sad, I’m alone, it’s raining, I don’t feel to have any perspective but there’s a positive thing: I’m still learning. So… let’s divide the complaints by sectors.</p>

<p><img src="http://starwarsblog.starwars.com/wp-content/uploads/2017/05/yoda-advice-featured-1.jpg" alt="jobs" /></p>

<h3 id="to-companies">To companies</h3>
<p>In the last year I learnt a lot about processes. I understood that the processes are <em>those things that make things work</em> and, because of that, they should be appreciated. I learnt to appreciate them. But, in the end, I also learnt they make things complicated, and therefore <em>things stop working</em>. What a shame. Why do companies not change the processes that actually do not work?! I don’t know, but I think because it’s impossible - or near-to. I understood that processes are like the foundations of a house: if they are badly built at the beginning, you can not change them and sooner or later the house collapses. What does it mean <em>badly</em> built? Why should you build bad foundations, I mean, you - Father of The Company [oooo, acclamations, claps] - why did you create such a mess? There’s not an answer to this question, but I’m pretty sure it’s not a founding fathers fault if your company is bad organized. I guess the causes are related (at least) to two things: the will and the employees.</p>

<p><img src="https://image.ibb.co/d9KkCx/how_to_incorporate_a_private_company_in_singapore.jpg" alt="jobs" /></p>

<h4 id="about-will">About will</h4>
<p>The mission should be grow as a group, not as a company: the growth of The Company should be a consequence, not the triggering cause. I heard a lot of slogan in the past screaming sentences to inspire employees, to make feel them part of this freaking-awesome-community that is The Company they are working for, bla bla bla. Stop. If the employees have to be inspired by the company, those employees - let me say - are (kind of) <em>losing the flame</em>. At the same time, if the company is made of employees that have to be inspired, I think there is something wrong in the company. From my perspective, there are three possible scenario: the emplooyes are not the right people for the company, the company has not the right principles in its playbooks, or both of them and destiny did the rest. I think that each employee should continue working on himself, no matter if it is spurred or not by his working place. It’s not a matter of inspiring, creating, or telling stories: it’s a matter of doing things. If people want to do a good job, they simply do it. If they don’t want, there’s a reason and if the company don’t know the reason, there’s a problem. So, I think a company should work on will, mainly because finding the will in a large group of employees it could be very challenging, especially because people evolve. And that’s why the source of company problems is often searched in the employees approach.</p>

<p><img src="http://www.serialminds.com/wp-content/uploads/2016/10/Stranger-Things-Will-2.jpg" alt="jobs" /></p>

<h4 id="about-employees">About employees</h4>
<p>Employees become older, they lose passion, will, they change priorities, grow, build their career and in the end they start delegating. I mean, even the first chiefs, in the end, stopped doing and started delegating. The point is that when you start delegating, things change and go better or worst: in this second case, it’s not because people are wrong - not always, I guess. It’s more about the change itself, the passage of informations means <em>losing</em> part of them. This is part of evolution and re-intepretation, but wait: core decisions has to be taken from the part of the employees that haven’t lose passion and are still interested in the company and - still - able to cope with temporal technological evolution. I’m start thinking that the <em>driver</em> is too much times simply <em>money</em> - not “we don’t have money” or “how much money do we earn from doing this?” - but simply “money” or a symbol, like $. But, ehi! It’s a company, not a church, dudes! The goals is money, it’s an institution, a inviolable principle. Sounds right, it’s not a church: maybe I’m a dreamer, but I still think that making decisions thinking about money - it’s a matter of time - bring you to ruin. This decisions let companies outsourcing, insourcing, cloudsourcing, resourcing, people, software and hardware: the result is that nobody is able to deal with a world that is changing to fast to let employees be <em>consistently</em> and <em>knowingly</em> involved in what they are doing. There is always someone who knows more than someone else, on this, on the other, who is more suitable than someone else. This state of confusion leads to the fear of hiring people who are not expert in something, that are not able to solve company’s actual problem: that problem arised yesterday, come out months before, without nobody looking in the right direction. Again, maybe I am a dreamer, but I think it’s more interesting having someone able to learn <em>how</em> to solve problem, interested in learning <em>why</em> the problem arised, and passioned - still - enough to learn from to the one (or ones) that eventually has solved it. Someone with the passion of learning something, the will of change himself, that someone expert in solving specific (or all kinf of) problems. But (there’s always some <em>but</em> in complaints) I think this is more related to another aspect of the companies, which basically concerns the recruiters.</p>

<p><img src="https://i.pinimg.com/originals/8f/9d/70/8f9d70ff98add4dd0d38074e39099799.jpg" alt="jobs" /></p>

<h3 id="to-recruiters">To recruiters</h3>
<p>Ok, recruiters, you could be or not part of The company, but you are of course part of A company, I guess. Listen to me: it’s not a matter of what a candidate can do, what he has done or he’s actually doing: it’s definitely so much more a matter of what a candidate can learn, how much a candidate can understand while he’s learning and if he’s passionate enough to still do it over and over again. I don’t have skills in any of the things I have done, because I did them. I forgot them. It’s natural. Even my professor of Maths was not able to resolve the problems - at least, not so fast as its students - that he proposed to us after so many years of teaching. He has an incredible background, plenty of logics, theorems, foundamentals, etc. But he’s not a machine: people forget things. The point is: how much fast are you in re-learning something? This what you should looking for: evaluate people to hire - but also, and mostly (I guess) <strong>already in</strong> the company - to find out if they are still interested in learning, in what they do for the company, and eventually why, if they are not anymore. Again, maybe I am a dreamer, but I think that nobody can work - more in general - doing somethings, for an entire life, without looking for a satisfaction. It’s literally impossible: this should be the role of the people inside the company that do things for the internals - chiefs, HR, leaders, doesn’t matter who. That’s the point! People - me even - usually sit on sentences like “I don’t have time”, “I don’t want to sacrifice <em>whatever</em>”. I read a nice aphorism about this in the past:</p>

<p><span style="color:#ffcc00; font-size: bold; margin-left: 10%;"><em>The difference between having no time for something and having it’s called interest.</em></span></p>

<p>I am interested in learning and I learnt to learn<sup id="fnref:note"><a href="#fn:note" class="footnote">1</a></sup>: the problem is that, in the end, it’s not sufficient. I still don’t know why, if you are a developer this is not enough. Ok, there’s another problem: because, if you are a developer like me, of course you encountered some bad recruiters in the past. What were they looking for? You don’t know. If I was a recruier, I would like to know (again) how much fast a candidate could be in learning somethings he has already done in the past, or or how much time he needs to learn something new, something he hasn’t done before. Maybe this is something related to <em>us</em>, the developers.</p>

<p><img src="http://hr.sparkhire.com/wp-content/uploads/2015/11/Spark-Hire-Analytical-Skills-Recruiters-870x400.jpg" alt="jobs" /></p>

<h3 id="to-developers">To developers</h3>
<p>If you are a developer, your life is almost certainly complicated: first, as in many other technical works, the dialogue with those who do not belong to the world of development is difficult. Why? Because it is difficult to explain the problems, it’s difficult to justify the time needed to complete tasks, it’s difficult to make decisions without (often) having the support of other developers. I live this scenario every day. So, why developers do not work together? Actually, I think they do in the right company. But… in accordance with the needs of The company, often working together turns into work on different project along and after a while having n people working on m different projects without any kind of intersection. What if you put developers together? This is strange, because it’s difficult for them to explain the problems, it’s difficult to justify the time needed to complete tasks, it’s difficult to make decisions without (often) having the support of other developers.</p>

<p><img src="http://www.nu.or.id/o-client/nu_or_id/pictures/post/big/1466889900576ef6acb2202.jpg" alt="jobs" /></p>

<p>Let’s focus on individuals: why it so difficult for them to work together, to work alone, to be developers? It’s simple: they (we) are scared. How to blame them (us, actually), I say. In a continuously changing environment, what you can do to be able to deal with several technological stack? Of course, focusing (both at work and at home) on only one of them is not a solution because tomorrow you could be remain without work and not be able to cover the gap to understand something new starting from zero. At the same time, you can’t study in depth everything because it’s impossible - probably even sacrifing each aspect of your life and, in any case, this could not be a solution. So the only thing you can do is to superficially know a little bit about everything, while keeping - or, at least, trying to keep - yourself ready to learn something new, something that could be the fashion of tomorrow, and the shame of the day after tomorrow. Next time: philosophy.</p>

<h3 id="epilogue">Epilogue</h3>
<p>And back to the companies: how to be still attractive in your company or for other company? There are those who prefer coding skills, who not, who looks at what you did, who looks at what you do, who looks at what you studied, who looks at how many languages you speak, how many awards you have taken, how far you have been away from home.</p>

<p>In my honest opinion, I think each of us should have opportunity in terms of what he can do, not in terms of what he had done. But… ehi, I could be wrong: in the end, I’m still learning.</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:note">
      <p>Just to be clear, I think you can’t learn to be intestered. It’s a curse.&nbsp;<a href="#fnref:note" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/doing-vs-learning</wp:post_id>
        <wp:post_date>2018-03-15T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-03-15T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="learning"><![CDATA[["learning",]]></category>
        
          <category domain="post_tag" nicename="approach"><![CDATA["approach",]]></category>
        
          <category domain="post_tag" nicename="work"><![CDATA["work",]]></category>
        
          <category domain="post_tag" nicename="thoughts"><![CDATA["thoughts",]]></category>
        
          <category domain="post_tag" nicename="life"><![CDATA["life"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[AWS Free Tier, Docker and Jenkins: smart resources handling with CloudWatch Events and Slack]]></title>
        <link>made2591.github.io/posts/free-tier-cloudwatch</link>
        <pubDate>2018-03-11T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>If you have an <a href="http://aws.amazon.com">AWS account</a> in Free Tier, you have (updated: March, 13th 2018) 750 hours/month to run EC2 (small ones) in your VPC. You also have a lot of other resources, such as AWS Lambda functions (I wrote about them <a href="https://made2591.github.io/posts/aws-lambda">here</a> and <a href="https://made2591.github.io/posts/aws-step-functions">here</a>) and CloudWatch Events. In this article, I talk about smart resources handling and some trick - actually, not so smart XD - I setup to take the best from the services. Attention!!! Picture Spoiler</p>

<p align="center"><img src="http://image.ibb.co/hGzYvH/aws_clock.png" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="ingredients">Ingredients</h3>
<p>For this article, you will need the following:</p>
<ul>
  <li>An <a href="http://aws.amazon.com">AWS account</a> (free tier it’s ok, but API Gateway is not included);</li>
  <li><a href="https://aws.amazon.com/ec2/?nc1=h_ls">AWS EC2</a>;</li>
  <li><a href="https://aws.amazon.com/en/lambda/">AWS Lambda</a>;</li>
  <li><a href="https://aws.amazon.com/cloudwatch/?nc1=h_ls">AWS CloudWatch Events</a>;</li>
  <li><a href="https://slack.com">Slack</a> - it’s a plus;</li>
</ul>

<h3 id="recipe">Recipe</h3>
<p>As I already said in a preview post on AWS Services, I recommend you to pay a lot of attention. You always have to know exactly what are you doing, to avoid surprise in billing in the end of the month. Fortunately, there are a lot of documentations on Amazon official site, so you only have to read them.</p>

<h4 id="what-and-when">What and when</h4>
<p>Ok, let’s start from the AWS EC2. You can create really slow and not-efficient machines of type t2-what? ssh-session expired. Just kidding.</p>

<p>The crucial part is that you have 750 hours free. Despite the case you can change Amazon Time, this implies that you can have an instance up and running for 1 year: in fact, 24*31 = 744 &lt; 750. That’s a huge amount of time before closing your AWS account. Of course, you will not use all this hours of execution in a month. Let’s suppose you will use 12 hours a day - it’s too much, but let’s keep it simple. This was my initial setup: in this case, you can run 2 instances for 12 hours a day for 1 years. Not’s so bad, even if the instances are really slow. You can scale di reasoning up to 6 instances for 4 hours a day…even 24 for 1 hours: if you’re wondering what you can do with 24 1 vCPU with 1 GB of RAM, ask to those crazy guys in the wab that built a 64-Raspberry PI Cluster. Got it?</p>

<h3 id="scenario">Scenario</h3>
<p>I will talk about a really simple (also, not so efficient) scenario: 2 EC2 machines, the first one to run a Jenkins and the second one to run docker-daemon. I will not go through the details about how to setup a Jenkins CI/CD pipeline, there are plenty of guides better than mine. Instead, I will show you the step to automatically reach your instances after each reboot: this problem is arised by AWS, because each time you reboot an instance, if no Elastic IP (more <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">here</a>) is attached, another Public IP will be assigned and you don’t know a priori which one. First, let’s talk about scheduling of start and stop.</p>

<h4 id="step-15-start-and-stop-your-instances">Step 1/5: Start and Stop your instances</h4>
<p>There are many ways (maybe?) to start and stop your instances: I decided to use AWS Lambda because you can easily create and manage them. This time I decided to use Python to build my StartAndStop Lambda. Before going ahead with code, please remember to assign the right policy to the Role used by the Lambda function (you can choose the role during the setup after the click of Create Function button). From the official AWS Doc, the Statement to add to the policy attached to the Role you choose is the following:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
    </span><span class="s2">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
    </span><span class="s2">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"ec2:Start*"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"ec2:Stop*"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>The code of the function is really simple:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">boto3</span><span class="p">,</span> <span class="n">os</span>

<span class="k">def</span> <span class="nf">lambda_handler</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
    <span class="n">ec2</span> <span class="o">=</span> <span class="n">boto3</span><span class="o">.</span><span class="n">client</span><span class="p">(</span><span class="s">'ec2'</span><span class="p">,</span> <span class="n">region_name</span><span class="o">=</span><span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">'region'</span><span class="p">])</span>

    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">event</span><span class="p">[</span><span class="s">'instances'</span><span class="p">])</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span> <span class="s">"message"</span> <span class="p">:</span> <span class="s">"No instances passed"</span> <span class="p">}</span>

    <span class="k">if</span> <span class="n">event</span><span class="p">[</span><span class="s">'action'</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="o">!=</span> <span class="s">'start'</span> <span class="ow">and</span> <span class="n">event</span><span class="p">[</span><span class="s">'action'</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="o">!=</span> <span class="s">'stop'</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span> <span class="s">"message"</span> <span class="p">:</span> <span class="s">"Passed action not allowed: '"</span> <span class="o">+</span> <span class="n">event</span><span class="p">[</span><span class="s">'action'</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="o">+</span> <span class="s">" over '"</span> <span class="o">+</span> <span class="n">event</span><span class="p">[</span><span class="s">'action'</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">)</span><span class="o">+</span><span class="s">"'"</span> <span class="p">}</span>

    <span class="k">if</span> <span class="n">event</span><span class="p">[</span><span class="s">'action'</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="o">==</span> <span class="s">'start'</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">start_instances</span><span class="p">(</span><span class="n">InstanceIds</span><span class="o">=</span><span class="n">event</span><span class="p">[</span><span class="s">'instances'</span><span class="p">])</span>

    <span class="k">if</span> <span class="n">event</span><span class="p">[</span><span class="s">'action'</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">)</span> <span class="o">==</span> <span class="s">'stop'</span><span class="p">:</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">ec2</span><span class="o">.</span><span class="n">stop_instances</span><span class="p">(</span><span class="n">InstanceIds</span><span class="o">=</span><span class="n">event</span><span class="p">[</span><span class="s">'instances'</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">response</span></code></pre></figure>

<p>This AWS Lambda use <code class="highlighter-rouge">boto3</code> library to start and stop instances: the expected request is like the following:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="s2">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"stop"</span><span class="p">,</span><span class="w">
  </span><span class="s2">"instances"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"YourJenkinsInstanceID"</span><span class="p">,</span><span class="w"> </span><span class="s2">"YourDockerInstanceID"</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>Done? Let’s go with CloudWatch Events.</p>

<h4 id="step-25-schedule-aws-lambda-execution">Step 2/5: Schedule AWS Lambda execution</h4>
<p>Amazon CloudWatch Events delivers a near real-time stream of system events that describe changes in Amazon Web Services (AWS) resources. Using simple rules that you can quickly set up, you can match events and route them to one or more target functions or streams. More in details, I used <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">ScheduledEvents</a> function to schedule my Lambda: with Scheduled Events, you can create rules that self-trigger on an automated schedule in CloudWatch Events using cron or rate expressions. All scheduled events use UTC time zone and the minimum precision for schedules is 1 minute.</p>

<table>
  <thead>
    <tr>
      <th>Field</th>
      <th>Values</th>
      <th>Wildcards</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Minutes</td>
      <td>0-59</td>
      <td>, - * /</td>
    </tr>
    <tr>
      <td>Hours</td>
      <td>0-23</td>
      <td>, - * /</td>
    </tr>
    <tr>
      <td>Day-of-month</td>
      <td>1-31</td>
      <td>, - * ? / L W</td>
    </tr>
    <tr>
      <td>Month</td>
      <td>1-12 or JAN-DEC</td>
      <td>, - * /</td>
    </tr>
    <tr>
      <td>Day-of-week</td>
      <td>1-7 or SUN-SAT</td>
      <td>, - * ? L #</td>
    </tr>
    <tr>
      <td>Year</td>
      <td>1970-2199</td>
      <td>, - * /</td>
    </tr>
  </tbody>
</table>

<p>I want to start my docker-daemon and jenkins server both at 9am and stop them at 9pm. To do that:</p>

<ul>
  <li>First, open <a href="https://console.aws.amazon.com/cloudwatch/">CloudWatch Console</a>, then click on <strong>Rules</strong> on the left;</li>
  <li>Click on the blue button Create Rule, select Schedule, select cron expression and place your expression. My cron expression to start each day (forever) my instances is the following, but you have to deal with UTC and your timezone of course.</li>
</ul>

<p><span style="color:#A04279; font-size: bold;">            0 8 * * ? *</span></p>

<ul>
  <li>Then, on the right panel, click on the Add target button. Choose Lambda from the select box, then select the AWS Lambda function created in the Step 1. In Configure input form, click on Constant and copy and paste - with your instance ids:</li>
</ul>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w"> </span><span class="s2">"action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"start"</span><span class="p">,</span><span class="w"> </span><span class="s2">"instances"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"YourJenkinsInstanceID"</span><span class="p">,</span><span class="w"> </span><span class="s2">"YourDockerInstanceID"</span><span class="p">]</span><span class="w"> </span><span class="p">}</span></code></pre></figure>

<ul>
  <li>Finally, click on configure details and - it’s just a suggest - write the Instance IDs involved in the request in your description. To test if the rule triggers you can setup cron to run after a few mitutes and then change to the desired time.</li>
</ul>

<p align="center"><img src="http://image.ibb.co/eFU59c/rules_1.png" style="width: 100%; marker-top: -10px;" /></p>

<p>To stop instances, create another rule with	0 20 * * ? * - remember that it is UTC time zone!!! - and invoke the same AWS Lambda function with action value equal to “stop” in your Constant JSON input.</p>

<h4 id="step-35-have-always-updated-dns">Step 3/5: Have always updated DNS</h4>
<p>The best way to deal with Public DNS is by assigning an Elastip IP to your instances, or setup a third-level-domain service inside each of your instance (like no-ip)…or use again Lambda (and Slack) to alert you whanever there is a change of status.</p>

<p>This time, the IAM Policy System requires from you (actually, your Lambda function) something more: this function should be able to ask for instance details. To do that, it needs - at least - read access to EC2 Instances details (I think there is a policy to do that). In any case, you don’t have to deal with super restrictive policy, because your Lambda is not exposed through API Gateway and is called only by a CloudWatch Event. Thus, you can add - at least, for this experiment - the <em>AmazonEC2FullAccess</em> managed policy (<a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_examples_ec2_region.html">this</a> is the description page, I guess) to your Role.</p>

<p>For this Lambda, I used Node.js (just to make things a little bit confusing for you). First, install <code class="highlighter-rouge">slack-node</code> in the folder you will upload to your AWS Lambda Console with the command</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">npm</span><span class="w"> </span><span class="err">install</span><span class="w"> </span><span class="err">slack-node</span><span class="w"> </span><span class="err">--save</span></code></pre></figure>

<p>Then, create a <code class="highlighter-rouge">index.js</code> file in the folder and copy and paste the following.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">const</span> <span class="nx">Slack</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"slack-node"</span><span class="p">);</span>
<span class="c1">// Load the AWS SDK for Node.js</span>
<span class="kd">const</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">"aws-sdk"</span><span class="p">);</span>
<span class="c1">// Set the region </span>
<span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span><span class="na">region</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REGION</span><span class="p">});</span>

<span class="c1">// Create EC2 service object</span>
<span class="kd">var</span> <span class="nx">ec2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">EC2</span><span class="p">();</span>

<span class="kd">function</span> <span class="nx">composeMsg</span><span class="p">(</span><span class="nx">infos</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="s2">""</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">info</span> <span class="k">of</span> <span class="nx">infos</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">msg</span> <span class="o">+=</span> <span class="s2">"Instance: "</span><span class="o">+</span><span class="nx">info</span><span class="p">[</span><span class="s2">"name"</span><span class="p">]</span><span class="o">+</span><span class="s2">" (id: "</span><span class="o">+</span><span class="nx">info</span><span class="p">[</span><span class="s2">"id"</span><span class="p">]</span><span class="o">+</span><span class="s2">", ip: "</span><span class="o">+</span><span class="nx">info</span><span class="p">[</span><span class="s2">"ip"</span><span class="p">]</span><span class="o">+</span><span class="s2">") has status "</span><span class="o">+</span><span class="nx">info</span><span class="p">[</span><span class="s2">"status"</span><span class="p">]</span><span class="o">+</span><span class="s2">"</span><span class="err">\</span><span class="s2">n"</span><span class="o">+</span><span class="s2">"PublicDNS: "</span><span class="o">+</span><span class="nx">info</span><span class="p">[</span><span class="s2">"dns"</span><span class="p">]</span><span class="o">+</span><span class="s2">"</span><span class="err">\</span><span class="s2">n</span><span class="err">\</span><span class="s2">n"</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">msg</span><span class="p">;</span>

<span class="p">}</span>

<span class="kd">function</span> <span class="nx">slackNotifier</span><span class="p">(</span><span class="nx">infos</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">composeMsg</span><span class="p">(</span><span class="nx">infos</span><span class="p">);</span>

    <span class="kd">var</span> <span class="nx">webhookUri</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">SLACK_AWS_WEBHOOK</span><span class="p">;</span>

    <span class="kd">var</span> <span class="nx">slack</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Slack</span><span class="p">();</span>
    <span class="nx">slack</span><span class="p">.</span><span class="nx">setWebhook</span><span class="p">(</span><span class="nx">webhookUri</span><span class="p">);</span>

    <span class="nx">slack</span><span class="p">.</span><span class="nx">webhook</span><span class="p">({</span>
        <span class="na">channel</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">SLACK_AWS_CHANNEL</span><span class="p">,</span>
        <span class="na">username</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">SLACK_AWS_BOT_NAME</span><span class="p">,</span>
        <span class="na">text</span><span class="p">:</span> <span class="nx">msg</span>
    <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">msg</span><span class="p">;</span>

<span class="p">}</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">{};</span>

    <span class="nx">ec2</span><span class="p">.</span><span class="nx">describeInstances</span><span class="p">(</span><span class="nx">params</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="kd">var</span> <span class="nx">infos</span> <span class="o">=</span> <span class="p">[];</span>
            
            <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>
            
            <span class="c1">// for each instance</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">reservartion</span> <span class="k">of</span> <span class="nx">data</span><span class="p">[</span><span class="s2">"Reservations"</span><span class="p">])</span> <span class="p">{</span>
                
                <span class="kd">var</span> <span class="nx">instance</span> <span class="o">=</span> <span class="nx">reservartion</span><span class="p">[</span><span class="s2">"Instances"</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
                <span class="nx">infos</span><span class="p">.</span><span class="nx">push</span><span class="p">({});</span>

                <span class="c1">// find id</span>
                <span class="nx">infos</span><span class="p">[</span><span class="nx">count</span><span class="p">][</span><span class="s2">"id"</span><span class="p">]</span> <span class="o">=</span> <span class="nx">instance</span><span class="p">[</span><span class="s2">"InstanceId"</span><span class="p">];</span>

                <span class="c1">// find name</span>
                <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">tag</span> <span class="k">of</span> <span class="nx">instance</span><span class="p">[</span><span class="s2">"Tags"</span><span class="p">])</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">tag</span><span class="p">[</span><span class="s2">"Key"</span><span class="p">]</span> <span class="o">==</span> <span class="s2">"Name"</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">infos</span><span class="p">[</span><span class="nx">count</span><span class="p">][</span><span class="s2">"name"</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tag</span><span class="p">[</span><span class="s2">"Value"</span><span class="p">];</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>

                <span class="c1">// save status</span>
                <span class="nx">infos</span><span class="p">[</span><span class="nx">count</span><span class="p">][</span><span class="s2">"status"</span><span class="p">]</span> <span class="o">=</span> <span class="nx">instance</span><span class="p">[</span><span class="s2">"State"</span><span class="p">][</span><span class="s2">"Name"</span><span class="p">];</span>

                <span class="c1">// save dns and ip</span>
                <span class="nx">infos</span><span class="p">[</span><span class="nx">count</span><span class="p">][</span><span class="s2">"dns"</span><span class="p">]</span> <span class="o">=</span> <span class="nx">instance</span><span class="p">[</span><span class="s2">"PublicDnsName"</span><span class="p">];</span>
                <span class="nx">infos</span><span class="p">[</span><span class="nx">count</span><span class="p">][</span><span class="s2">"ip"</span><span class="p">]</span> <span class="o">=</span> <span class="nx">instance</span><span class="p">[</span><span class="s2">"PublicIpAddress"</span><span class="p">];</span>
                
                <span class="nx">count</span> <span class="o">=</span> <span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>

            <span class="p">}</span>

            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">infos</span><span class="p">);</span>

            <span class="c1">// send message</span>
            <span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nx">slackNotifier</span><span class="p">(</span><span class="nx">infos</span><span class="p">);</span>
            <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">msg</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">};</span></code></pre></figure>

<p>The code simply calls AWS SDK to get informations - in particular, the instance name, id, status, public dns and ip, even if included in the addreess, to copy and past faster - about your running EC2 instances, parse and format them in a pretty format. Then, a message is sent to a private slack channel (see later). So…zip, upload. Done. Environment variable needed are the REGION (aws-region), SLACK_AWS_BOT_NAME (the name of your slack bot), SLACK_AWS_CHANNEL (the name of your channel) and SLACK_AWS_WEBHOOK (the web.. ok, you got it). You can complete missing env vars later: keep them empty.</p>

<p>There are two things to complete yet: 1) attach this rules to a Cloudwatch Event (of course, the change of state for your EC2 instances) and 2) effectively create a slack channel, a slack-app and corresponding webhook for the created channel. What do you want to do first? Don’t worry, I decide for you: let’s create a Slack channel.</p>

<h4 id="step-45-create-a-slack-channel-and-app-and-so-on">Step 4/5: Create a Slack Channel (and App and so on)</h4>

<p><em>Preamble</em>: first of all: if you don’t have a Slack account, sign up <a href="https://slack.com">here</a>. Then, create a work space (it shoule be easy by following instruction after the first access). Done? After that, you should be able to create a channel (I suggetst a private one if this is an experiment). Done? Ok. If you have problem to complete these steps, well… Actually, I can’t help you: I don’t remember, you have to google about them.</p>

<p>To create a Slack App, follow these steps:</p>

<ul>
  <li>Go <a href="https://api.slack.com/apps?new_app=1">here</a>;</li>
  <li>Choose a name for your app, such as AWSStartAndStopBot, or whatever you want, then select the workspace (you should have at least one);</li>
</ul>

<p align="center"><img src="http://image.ibb.co/bN42Nx/slack_1.png" style="width: 100%; marker-top: -10px;" /></p>

<ul>
  <li>Click on the Create App button. You should be redirect to the page of your application a Add features and functionality section;</li>
</ul>

<p align="center"><img src="http://image.ibb.co/d8ndvH/slack_2.png" style="width: 100%; marker-top: -10px;" /></p>

<ul>
  <li>Click on the Incoming Weebhooks below, then setup to ON the switch button in right corner;</li>
</ul>

<p align="center"><img src="http://image.ibb.co/d5TkaH/slack_3.png" style="width: 100%; marker-top: -10px;" /></p>

<ul>
  <li>Go to the bottom of the page and click on the Add new webhook to workspace button. You should be redirected to a page with a select box with a Post to label. Select the private channel created in the preamble, then click on Authorize button;</li>
</ul>

<p align="center"><img src="http://image.ibb.co/dCPQaH/slack_4.png" style="width: 100%; marker-top: -10px;" /></p>

<ul>
  <li>You should be redirected to a previous page with the webhook url (you have to update your SLACK_AWS_WEBHOOK env variable for your AWS Lambda, the Node.js one);</li>
</ul>

<h4 id="step-55-cloudwatch-event-to-sent-slack-message">Step 5/5: CloudWatch Event to sent Slack Message</h4>
<p>The last step is create a CloudWatch Rule - a new one, keep the start and stop previously created rule untouched - triggered: this time, the trigger is not a Schedule event at fixed time, but a an Event Pattern.</p>

<ul>
  <li>First, open <a href="https://console.aws.amazon.com/cloudwatch/">CloudWatch Console</a>, then click on <strong>Rules</strong> on the left;</li>
  <li>Click on the blue button Create Rule, select Event Pattern, then select EC2 from Service Name select box;</li>
  <li>Click on EC2 Instance State-change Notification, then choose the involved state (you can exlude pending, if you want);</li>
  <li>On the left, click on Add trigger, then select the AWS Lambda (Node.js) function and configure input as matched event (it will be ignored);</li>
</ul>

<p align="center"><img src="http://image.ibb.co/g3jGFH/rules_2.png" style="width: 100%; marker-top: -10px;" /></p>

<p>To test the setup, try to stop and start your instances, and you should see something appear on your slack channel!</p>

<p align="center"><img src="http://image.ibb.co/kSQFaH/slack_bot.png" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="other-possible-scenario">Other possible scenario</h3>
<p>I think I will work on Slack features like button to handle my VPC with a sort of question-answer event-driven bot. But…what if you want to add more worker node to Jenkins? For instance, using a 9-17 setup, you can have a three machine running at time.</p>

<p align="center"><img src="http://image.ibb.co/fAOFQH/aws_clock_2.png" style="width: 100%; marker-top: -10px;" /></p>

<p>But I think this setup is more interesting :D. In the end, having a 4 node k8s cluster with a Jenkins for deploy, for 4 hours each day for one year….for free, is not so bad. I will try, I think performance are around 1980 :D</p>

<p align="center"><img src="http://image.ibb.co/eYM25H/aws_clock_3.png" style="width: 100%; marker-top: -10px;" /></p>

<p>Thank you everybody for reading!</p>

]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/free-tier-cloudwatch</wp:post_id>
        <wp:post_date>2018-03-11T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-03-11T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="aws"><![CDATA["aws",]]></category>
        
          <category domain="post_tag" nicename="lambda"><![CDATA["lambda",]]></category>
        
          <category domain="post_tag" nicename="cloudwatch"><![CDATA["cloudwatch",]]></category>
        
          <category domain="post_tag" nicename="rules"><![CDATA["rules",]]></category>
        
          <category domain="post_tag" nicename="event"><![CDATA["event",]]></category>
        
          <category domain="post_tag" nicename="ec2"><![CDATA["ec2",]]></category>
        
          <category domain="post_tag" nicename="slack"><![CDATA["slack",]]></category>
        
          <category domain="post_tag" nicename="docker"><![CDATA["docker",]]></category>
        
          <category domain="post_tag" nicename="jenkins"><![CDATA["jenkins"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Node.js, DynamoDB, and AWS Step Functions to collect <em>sentimented</em> movie reviews]]></title>
        <link>made2591.github.io/posts/aws-step-functions</link>
        <pubDate>2018-03-05T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>Recently I worked with AWS Lambda and API Gateway to extend my set of personal APIs and collect information from several sources. I wrote an article on that (if you want to <a href="https://made2591.github.io/posts/aws-lambda">have a look</a>). In this article I will talk about the AWS Step Functions service that enable create finite states machines to easy coordinate the components of distributed applications and microservices using visual workflows. Why AWS Step Functions? Because they let me create a tool to gather movie titles in teather, search for reviews about each of them and make a basic sentiment analysis over the review to help me decide what’s worth watching at teather and what’s worth waiting for on Netflix :D
More in general, with AWS Step Functions, you can build applications made of individual components that each perform a discrete function: this lets you scale and change applications quickly. Step Functions is a reliable way to coordinate components and step through the functions of your application. They provides a graphical console to arrange and visualize the components of your application as a series of steps. This makes it simple to build and run multistep applications. Step Functions automatically triggers and tracks each step, and retries when there are errors, so your application executes in order and as expected. Step Functions logs the state of each step, so when things do go wrong, you can diagnose and debug problems quickly.</p>

<p align="center"><img src="http://image.ibb.co/m3LxJS/aws_step_functions.png" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="ingredients">Ingredients</h3>
<p>For this article, you will need the following:</p>
<ul>
  <li><a href="http://aws.amazon.com">AWS account</a> (free tier it’s ok, but API Gateway is not included);</li>
  <li><a href="http://newsapi.org">Newsapi</a> account to gather news from several sources (the free tier it’s ok for our purpose);</li>
  <li><a href="http://aylien.com">Aylien</a> account to do some sentiment analysis (the free tier it’s ok for our purpose);</li>
  <li><a href="https://aws.amazon.com/en/lambda/">AWS Lambda</a> to wrap services around the world to ghater and process data;</li>
  <li><a href="https://aws.amazon.com/en/dynamodb/">DynamoDB</a> to both optmize requests and persist processed data;</li>
  <li><a href="https://aws.amazon.com/en/step-functions/">AWS Step Functions</a>, of course, to create the workflow, orchestrate lambdas and work on the data flow;</li>
</ul>

<h3 id="considerations">Considerations</h3>
<p><strong>First point</strong>: as I already said in a preview post on AWS Services, there are a lot of quite simple steps. I recommend you to pay a lot of attention with AWS. You always have to know exactly what are you doing, to avoid surprise in billing in the end of the month. Fortunately, there are a lot of documentations on Amazon official site, so you only have to read them.</p>

<p><strong>Second point</strong>: please pay attention to the number of steps and infinity loop when you are working with AWS Step Functions, Iteration and Parallel Workflow. The following workflow is prepared to be a mix of some of the features exposed by the AWS service: despite it provides some example of <em>how effectively you can increase the efficience of a step functions workflow</em>, is not intended to be efficient, nor the smartest way to implement the workflow. The first 4000 transactions from one state to another - don’t be scared by the output log of the workflow! It shows quite three/four times the number of effective transactions because it show you the scheduled state, the start state, the output state, etc. After that, the cost is billed in terms of thousands, something like 0.025 dollars for 1000 thousands (more <a href="https://aws.amazon.com/en/step-functions/pricing/">here</a>).</p>

<h4 id="1-2-3-4-steps">1-2-3-4 Steps</h4>
<p>The first four steps are equal to the one described <a href="https://made2591.github.io/posts/aws-lambda">here</a>. The only things I added is the HasElements bool <code class="highlighter-rouge">json:"has_elements"</code> to the NewsApiResponse Object (see next step).</p>

<h4 id="5---build-moviedb-collector-over-aws-lambda">5 - Build MovieDB collector over AWS Lambda</h4>
<p>Lambda currently supports different languages: C#, Java, Node.js, Python and now Go. I wrote a GoLang wrapper around the API exposed by TheMovieDB <a href="http://themoviedb.org">here</a>: I am working on a front-end written in Angular to show the elements gathered by this workflow, so I created a parametric AWS Lambda to wrap (almost) all the routes exposed by TheMovieDB APIs and be able to fill my front-end in the future. AWS Lambda ready GoLang file is a single <code class="highlighter-rouge">.go</code> file with a function, the <code class="highlighter-rouge">handler</code> and a <code class="highlighter-rouge">main</code> function to link the handler function to the lambda. And that’s all. The only dependencies you need to install, if you want to run your lambda locally, is the <code class="highlighter-rouge">aws-lambda-go</code> sdk provided by Amazon and available on Github.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">go get github.com/aws/aws-lambda-go/lambda</code></pre></figure>

<p>The entire TheMovieDB Go Wrapper ready to build for AWS Lambda is available <a href="https://gist.github.com/made2591/f2b8280035d0d770269f8695f54091c8.js">in this gist</a>. It follows a preview:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span><span class="x"> </span><span class="n">main</span><span class="x">

</span><span class="k">import</span><span class="x"> </span><span class="p">(</span><span class="x">
	</span><span class="s">"os"</span><span class="x">
	</span><span class="s">"fmt"</span><span class="x">
	</span><span class="s">"errors"</span><span class="x">
	</span><span class="s">"strings"</span><span class="x">
	</span><span class="s">"net/http"</span><span class="x">
	</span><span class="s">"encoding/json"</span><span class="x">
	</span><span class="s">"github.com/aws/aws-lambda-go/lambda"</span><span class="x">
</span><span class="p">)</span><span class="x">

</span><span class="k">var</span><span class="x"> </span><span class="p">(</span><span class="x">
	</span><span class="n">API_KEY</span><span class="x">      </span><span class="o">=</span><span class="x"> </span><span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"API_KEY"</span><span class="p">)</span><span class="x">
	</span><span class="n">API_BASE_URL</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"API_BASE_URL"</span><span class="p">)</span><span class="x">
	</span><span class="n">AWS_API_KEY</span><span class="x">  </span><span class="o">=</span><span class="x"> </span><span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"AWS_API_KEY"</span><span class="p">)</span><span class="x">
	</span><span class="n">ErrorBackend</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"Something went wrong"</span><span class="p">)</span><span class="x">
</span><span class="p">)</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Request</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Url</span><span class="x"> 					</span><span class="kt">string</span><span class="x">		</span><span class="s">`json:"api_url"`</span><span class="x">
	</span><span class="n">AwsApiGatewayKey</span><span class="x"> 		</span><span class="kt">string</span><span class="x">		</span><span class="s">`json:"aws_api_gateway_key"`</span><span class="x">

	</span><span class="n">ExternalID</span><span class="x"> 				</span><span class="o">*</span><span class="kt">string</span><span class="x">		</span><span class="s">`json:"external_id"`</span><span class="x">
	</span><span class="n">ExternalSource</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x">		</span><span class="s">`json:"external_source"`</span><span class="x">

	</span><span class="n">Query</span><span class="x"> 					</span><span class="o">*</span><span class="kt">string</span><span class="x">		</span><span class="s">`json:"query"`</span><span class="x">

	</span><span class="n">ApiKey</span><span class="x"> 					</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"api_key"`</span><span class="x">
	</span><span class="n">Language</span><span class="x"> 				</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"language"`</span><span class="x">
	</span><span class="n">Region</span><span class="x"> 					</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"region"`</span><span class="x">
	</span><span class="n">SortBy</span><span class="x"> 					</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"sort_by"`</span><span class="x">
	</span><span class="n">CertificationCountry</span><span class="x"> 	</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"certification_country"`</span><span class="x">
	</span><span class="n">Certification</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"certification"`</span><span class="x">
	</span><span class="n">CertificationLTE</span><span class="x"> 		</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"certification.lte"`</span><span class="x">
	</span><span class="n">IncludeAdult</span><span class="x">			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"include_adult"`</span><span class="x">
	</span><span class="n">IncludeVideo</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"include_video"`</span><span class="x">
	</span><span class="n">Page</span><span class="x"> 					</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"page"`</span><span class="x">
	</span><span class="n">PrimaryReleaseYear</span><span class="x"> 		</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"primary_release_year"`</span><span class="x">
	</span><span class="n">PrimaryReleaseDateGTE</span><span class="x"> 	</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"primary_release_date.gte"`</span><span class="x">
	</span><span class="n">PrimaryReleaseDateLTE</span><span class="x">	</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"primary_release_date.lte"`</span><span class="x">
	</span><span class="n">ReleaseDateGTE</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"release_date.gte"`</span><span class="x">
	</span><span class="n">ReleaseDateLTE</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"release_date.lte"`</span><span class="x">
	</span><span class="n">VoteCountGTE</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"vote_count.gte"`</span><span class="x">
	</span><span class="n">VoteCountLTE</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"vote_count.lte"`</span><span class="x">
	</span><span class="n">VoteAverageGTE</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"vote_average.gte"`</span><span class="x">
	</span><span class="n">VoteAverageLTE</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"vote_average.lte"`</span><span class="x">
	</span><span class="n">WithCast</span><span class="x"> 				</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_cast"`</span><span class="x">
	</span><span class="n">WithCrew</span><span class="x"> 				</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_crew"`</span><span class="x">
	</span><span class="n">WithCompanies</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_companies"`</span><span class="x">
	</span><span class="n">WithGenres</span><span class="x"> 				</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_genres"`</span><span class="x">
	</span><span class="n">WithKeywords</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_keywords"`</span><span class="x">
	</span><span class="n">WithPeople</span><span class="x"> 				</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_people"`</span><span class="x">
	</span><span class="n">Year</span><span class="x"> 					</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"year"`</span><span class="x">
	</span><span class="n">WithoutGenres</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"without_genres"`</span><span class="x">
	</span><span class="n">WithRuntimeGTE</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_runtime.gte"`</span><span class="x">
	</span><span class="n">WithRuntimeLTE</span><span class="x"> 			</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_runtime.lte"`</span><span class="x">
	</span><span class="n">WithReleaseType</span><span class="x"> 		</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_release_type"`</span><span class="x">
	</span><span class="n">WithOriginalLanguage</span><span class="x"> 	</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"with_original_language"`</span><span class="x">
	</span><span class="n">WithoutKeywords</span><span class="x"> 		</span><span class="o">*</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"without_keywords"`</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">MovieDBResponse</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Page</span><span class="x"> 					</span><span class="kt">int</span><span class="x"> 	</span><span class="s">`json:"page"`</span><span class="x">
	</span><span class="n">Results</span><span class="x"> 				</span><span class="p">[]</span><span class="n">Movie</span><span class="x"> </span><span class="s">`json:"results"`</span><span class="x">
	</span><span class="n">TotalResults</span><span class="x">			</span><span class="kt">int</span><span class="x"> 	</span><span class="s">`json:"total_results"`</span><span class="x">
	</span><span class="n">TotalPages</span><span class="x"> 				</span><span class="kt">int</span><span class="x"> 	</span><span class="s">`json:"total_pages"`</span><span class="x">
	</span><span class="n">HasElements</span><span class="x"> 			</span><span class="kt">bool</span><span class="x">    </span><span class="s">`json:"has_elements"`</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Movie</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Cover</span><span class="x"> 					</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"poster_path"`</span><span class="x">
	</span><span class="n">PosterPath</span><span class="x"> 				</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"poster_path"`</span><span class="x">
	</span><span class="n">Adult</span><span class="x"> 					</span><span class="kt">bool</span><span class="x"> 	</span><span class="s">`json:"adult"`</span><span class="x">
	</span><span class="n">Overview</span><span class="x"> 				</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"overview"`</span><span class="x">
	</span><span class="n">ReleaseDate</span><span class="x"> 			</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"release_date"`</span><span class="x">
	</span><span class="n">GenreIDs</span><span class="x"> 				</span><span class="p">[]</span><span class="kt">int</span><span class="x"> 	</span><span class="s">`json:"genre_ids"`</span><span class="x">
	</span><span class="n">ID</span><span class="x"> 						</span><span class="kt">int</span><span class="x"> 	</span><span class="s">`json:"id"`</span><span class="x">
	</span><span class="n">OriginalTitle</span><span class="x"> 			</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"original_title"`</span><span class="x">
	</span><span class="n">OriginalLanguage</span><span class="x"> 		</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"original_language"`</span><span class="x">
	</span><span class="n">Title</span><span class="x"> 					</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"title"`</span><span class="x">
	</span><span class="n">BackdropPath</span><span class="x"> 			</span><span class="kt">string</span><span class="x"> 	</span><span class="s">`json:"backdrop_path"`</span><span class="x">
	</span><span class="n">Popularity</span><span class="x"> 				</span><span class="kt">float32</span><span class="x"> </span><span class="s">`json:"popularity"`</span><span class="x">
	</span><span class="n">VoteCount</span><span class="x"> 				</span><span class="kt">int</span><span class="x"> 	</span><span class="s">`json:"vote_count"`</span><span class="x">
	</span><span class="n">Video</span><span class="x"> 					</span><span class="kt">bool</span><span class="x"> 	</span><span class="s">`json:"video"`</span><span class="x">
	</span><span class="n">VoteAverage</span><span class="x"> 			</span><span class="kt">float32</span><span class="x"> </span><span class="s">`json:"vote_average"`</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="n">Handler</span><span class="p">(</span><span class="n">request</span><span class="x"> </span><span class="n">Request</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="n">MovieDBResponse</span><span class="p">,</span><span class="x"> </span><span class="kt">error</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Url</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="s">""</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="n">MovieDBResponse</span><span class="p">{},</span><span class="x"> </span><span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"Missing one of the required parameters: 'api_url'"</span><span class="p">)</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="n">url</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="s">"%s%s?api_key=%s"</span><span class="p">,</span><span class="x"> </span><span class="n">API_BASE_URL</span><span class="p">,</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Url</span><span class="p">,</span><span class="x"> </span><span class="n">API_KEY</span><span class="p">)</span><span class="x">

	</span><span class="n">client</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">http</span><span class="o">.</span><span class="n">Client</span><span class="p">{}</span><span class="x">

	</span><span class="n">req</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">http</span><span class="o">.</span><span class="n">NewRequest</span><span class="p">(</span><span class="s">"GET"</span><span class="p">,</span><span class="x"> </span><span class="n">url</span><span class="p">,</span><span class="x"> </span><span class="no">nil</span><span class="p">)</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="n">MovieDBResponse</span><span class="p">{},</span><span class="x"> </span><span class="n">ErrorBackend</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">CertificationCountry</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">q</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="n">q</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"certification_country"</span><span class="p">,</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">CertificationCountry</span><span class="p">)</span><span class="x">
		</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">q</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">VoteAverageLTE</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">q</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="n">q</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"vote_average.lte"</span><span class="p">,</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">VoteAverageLTE</span><span class="p">)</span><span class="x">
		</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">q</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="o">...</span><span class="c">// the complete file here https://gist.github.com/made2591/f2b8280035d0d770269f8695f54091c8.js</span><span class="x">

	</span><span class="n">resp</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">client</span><span class="o">.</span><span class="n">Do</span><span class="p">(</span><span class="n">req</span><span class="p">)</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="n">MovieDBResponse</span><span class="p">{},</span><span class="x"> </span><span class="n">ErrorBackend</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="k">defer</span><span class="x"> </span><span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span><span class="x">

	</span><span class="k">var</span><span class="x"> </span><span class="n">data</span><span class="x"> </span><span class="n">MovieDBResponse</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">json</span><span class="o">.</span><span class="n">NewDecoder</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="p">)</span><span class="o">.</span><span class="n">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="n">MovieDBResponse</span><span class="p">{},</span><span class="x"> </span><span class="n">ErrorBackend</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="n">data</span><span class="o">.</span><span class="n">HasElements</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="no">false</span><span class="p">;</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">Results</span><span class="p">)</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">data</span><span class="o">.</span><span class="n">HasElements</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="no">true</span><span class="p">;</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="k">return</span><span class="x"> </span><span class="n">data</span><span class="p">,</span><span class="x"> </span><span class="no">nil</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="n">main</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">lambda</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">Handler</span><span class="p">)</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p><strong>NOTE</strong>: the <code class="highlighter-rouge">HasElements</code> property is an important field of the MovieDBResponse because it will let us implement an iteration in the AWS Step Function workflow.</p>

<p>I also found <a href="https://github.com/lambci/docker-lambda">this</a> beautiful docker image that let you test your lambda (and support also GoLang) with a single docker run. You can pass the parameters as a string (payload requests), as shown in the method above: of course, you first have to compile your lambda for linux.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">GOOS</span><span class="o">=</span>linux go build <span class="nt">-o</span> TMDB TMDB.go

docker run <span class="nt">--rm</span> <span class="nt">-v</span> <span class="nv">$PWD</span>:/var/task lambci/lambda:go1.x TMDB <span class="s1">'{"url": "/discover/movie"}'</span></code></pre></figure>

<p>To upload your Lambda in AWS, in the creation steps specify you want to upload a Go 1.x Lambda, then zip your build (in the example, <code class="highlighter-rouge">TMDB</code>)</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">zip TMDB.zip TMDB</code></pre></figure>

<p>and upload from an S3 bucket or manually.</p>

<p align="center"><img src="http://image.ibb.co/mJqX9R/aws_lambda_2.png" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="6---build-an-aws-step-functions-workflow">6 - Build an AWS Step Functions Workflow</h4>
<p>A finite state machine is an automata with really simple rule. Almost each states are Tasks that call AWS Lambda functions and are directly linked with one or more states. You provide an input to the workflow, the first(s) lambda are invoked, then the output of the execution is passed as the input to the next states (and eventually AWS Lambda(s) invoked by them).</p>

<p>The entire workflow of a step function is described by a JSON file and can be written directly in a console available in the AWS Step Function web page. You can view a preview of the worflow in the right part of the screen while you’re defining it.</p>

<p align="center"><img src="http://image.ibb.co/dE5QNn/workflow_edit.png" style="width: 100%; marker-top: -10px;" /></p>

<p>The final workflow for our scope will look like the image below:</p>

<p align="center"><img src="http://image.ibb.co/nAk0Nn/workflow_empty.png" alt="perceptron" style="width: 100%; marker-top: -10px;" /></p>

<p>The respective workflow JSON description looks like the following code:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
  </span><span class="s2">"Comment"</span><span class="p">:</span><span class="w"> </span><span class="s2">"A movie evaluator based on sentiment analysis."</span><span class="p">,</span><span class="w">
  </span><span class="s2">"StartAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"GetMoviesInTheather"</span><span class="p">,</span><span class="w">
  </span><span class="s2">"States"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"GetMoviesInTheather"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:TMDB"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"ResultPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrepareStructures"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"PrepareStructures"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:MoviesTitleIterator"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"ResultPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MovieIterator"</span><span class="w">
    </span><span class="p">},</span><span class="w">    
    </span><span class="s2">"MovieIterator"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Choice"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Choices"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"Variable"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$.movies.has_elements"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"BooleanEquals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
          </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MovieInformationExtraction"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Done"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"MovieInformationExtraction"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Parallel"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Branches"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"StartAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PersistMovie"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"States"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"PersistMovie"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:PersistMovie"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"End"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"StartAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BreakingNews"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"States"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"BreakingNews"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:BreakingNews"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"End"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"ResultPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"NewsIterator"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"NewsIterator"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Choice"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Choices"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"Variable"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$[1].has_elements"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"BooleanEquals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
          </span><span class="s2">"ResultPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrepareSentimentRequest"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ToMovieIterator"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"ToMovieIterator"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:ToMovieIterator"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MovieIterator"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"PrepareSentimentRequest"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:PrepareSentimentRequest"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"SentimentController"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"SentimentController"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Parallel"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Branches"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"StartAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"AylienSentiment"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"States"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"AylienSentiment"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"InputPath"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"$[1].aylienQuery"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:AylienSentiment"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"End"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
              </span><span class="s2">"Retry"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
                  </span><span class="s2">"ErrorEquals"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"States.ALL"</span><span class="w"> </span><span class="p">],</span><span class="w">
                  </span><span class="s2">"IntervalSeconds"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
                  </span><span class="s2">"MaxAttempts"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
                  </span><span class="s2">"BackoffRate"</span><span class="p">:</span><span class="w"> </span><span class="mf">2.0</span><span class="w">
               </span><span class="p">}</span><span class="w"> </span><span class="p">],</span><span class="w">
              </span><span class="s2">"Catch"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
                  </span><span class="s2">"ErrorEquals"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"States.ALL"</span><span class="w"> </span><span class="p">],</span><span class="w">
                  </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FallBack"</span><span class="w">
               </span><span class="p">}</span><span class="w"> </span><span class="p">]</span><span class="w">
            </span><span class="p">},</span><span class="w">
            </span><span class="s2">"FallBack"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
               </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Pass"</span><span class="p">,</span><span class="w">
               </span><span class="s2">"End"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w"> 
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"StartAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"NoOp"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"States"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="s2">"NoOp"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Pass"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"End"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"ResultPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PersistNews"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"PersistNews"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:PersistNews"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"NewsIterator"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"Done"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Pass"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"End"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>PLEASE DON’T PANIC!!!! :D</p>

<p>As explained in the introduction, the workflow is a collection of states linked togheter. A state is defined by different properties:</p>

<h5 id="common-state-fields">Common State Fields</h5>
<ul>
  <li><strong>Type (Required)</strong>: the states could be defined of different types. The most important keyword-types for state for this how-to are three: <code class="highlighter-rouge">Task</code>, <code class="highlighter-rouge">Parallel</code>, <code class="highlighter-rouge">Choice</code>.</li>
  <li><strong>Next</strong>: the name of the next state that will be run when the current state finishes. Some state types, such as Choice, allow multiple transition states.</li>
  <li><strong>End</strong>: designates this state as a terminal state (it ends the execution) if set to true. There can be any number of terminal states per state machine. Only one of Next or End can be used in a state. Some state types, such as Choice, do not support or use the End field.</li>
  <li><strong>Comment (Optional)</strong>: holds a human-readable description of the state.</li>
  <li><strong>InputPath (Optional)</strong>: a path that selects a portion of the state’s input to be passed to the state’s task for processing. If omitted, it has the value $ which designates the entire input. For more information, see Input and Output Processing).</li>
  <li><strong>OutputPath (Optional)</strong>: a path that selects a portion of the state’s input to be passed to the state’s output. If omitted, it has the value $ which designates the entire input. For more information, see Input and Output Processing.</li>
</ul>

<h5 id="task">Task</h5>
<p>A Task state (“Type”: “Task”) represents a single unit of work performed by a state machine. In addition to the common state fields, Task states have the following fields:</p>
<ul>
  <li>Resource (Required): a URI, especially an Amazon Resource Name (ARN) that uniquely identifies the specific task to execute;</li>
  <li>ResultPath (Optional): specifies where (in the input) to place the results of executing the task specified in Resource. The input is then filtered as prescribed by the OutputPath field (if present) before being used as the state’s output. For more information, see path;</li>
  <li>Retry (Optional): an array of objects, called Retriers, that define a retry policy in case the state encounters runtime errors. For more information, see Retrying After an Error;</li>
  <li>Catch (Optional)<sup id="fnref:catch"><a href="#fn:catch" class="footnote">1</a></sup>, TimeoutSeconds (Optional), HeartbeatSeconds (Optional): for more details about these fields, look at the official AWS docs;</li>
</ul>

<p>A Task state must set either the End field to true if the state ends the execution, or must provide a state in the Next field that will be run upon completion of the Task state. For instance, the state <code class="highlighter-rouge">GetMoviesInTheather</code></p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">   
	</span><span class="err">...</span><span class="w">
    </span><span class="s2">"GetMoviesInTheather"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:TMDB"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"ResultPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrepareStructures"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="s2">"PrepareStructures"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:MoviesTitleIterator"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"ResultPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MovieIterator"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="err">...</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>calls the AWS Lambda function TMDB defined above and put the entire output in ResultPath: the <code class="highlighter-rouge">$</code> in subsequent states will refer to the output generated by the corresponding call. <code class="highlighter-rouge">PrepareStructures</code> is a state that calls a Node.js AWS Lambda Function that operate over the input to create structure ready to be parsed by the <code class="highlighter-rouge">MovieIterator</code> (a generic step for the iterator).</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">movies</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="kd">var</span> <span class="nx">news</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">event</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">movies</span> <span class="o">=</span> <span class="nx">event</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">movies</span><span class="p">;</span>
        <span class="nx">news</span> <span class="o">=</span> <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">movies</span> <span class="o">=</span> <span class="nx">event</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">var</span> <span class="nx">structures</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"movies"</span> <span class="p">:</span> <span class="nx">movies</span><span class="p">,</span> <span class="s2">"news"</span> <span class="p">:</span> <span class="nx">news</span><span class="p">,</span> <span class="s2">"sentiment"</span> <span class="p">:</span> <span class="p">{}</span> <span class="p">}</span>

    <span class="c1">// Array still has elements:</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">structures</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">has_elements</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Creating query news for movie: '</span> <span class="o">+</span> <span class="nx">structures</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="nx">structures</span><span class="p">.</span><span class="nx">movie_id</span> <span class="o">=</span> <span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span><span class="p">;</span>
        <span class="nx">structures</span><span class="p">.</span><span class="nx">q</span> <span class="o">=</span> <span class="nx">structures</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">original_title</span><span class="p">;</span>
        <span class="nx">structures</span><span class="p">.</span><span class="nx">sortBy</span> <span class="o">=</span> <span class="s2">"relevancy"</span><span class="p">;</span>
        <span class="nx">structures</span><span class="p">.</span><span class="nx">pageSize</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">structures</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">has_elements</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// Log array elements (for demonstration purpose)</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Array has more elements: '</span> <span class="o">+</span> <span class="nx">structures</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">has_elements</span><span class="p">);</span>
    
    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">structures</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure>

<p>The code in the lambda simply create a dict struct if passed input is an Array - this happens after further executions. It also preparare the input to be used by a previous AWS Lambda - the <code class="highlighter-rouge">BreakingNews</code> that expected a dict of three parameters as input, to look for 10 most relevant news for the first movie of the list. To explain what happens in the next state, the <code class="highlighter-rouge">MovieIterator</code>, I need to talk first about the Choice type.</p>

<h5 id="choice">Choice</h5>
<p>A Choice state (“Type”: “Choice”) adds branching logic to a state machine. In addition to the common state fields, Choice states introduce the following additional fields:</p>
<ul>
  <li>Choices (Required): this is an array of Choice Rules that determines which state the state machine transitions to next;</li>
  <li>Default (Optional, Recommended): the name of the state to transition to if none of the transitions in Choices is taken;</li>
</ul>

<p>Choice states <strong>do not support the End field</strong>. In addition, they use Next only inside their Choices field. Choice type is particularly interesting when you need to process large files. Lambda functions have a couple of limitations namely memory and a 5 minute timeout. If you have some operation you need to perform on a very large dataset it may not be possible to complete this operation in a single execution of a lambda function. There are several ways to solve this problem: one of them is to use a Choice to create an Iterator pattern, loop over results provided by a first call to a AWS Lambda function - in this case <code class="highlighter-rouge">PrepareStructures</code> (that wrapps the input of the <code class="highlighter-rouge">GetMoviesInTheather</code>). Let’s have a look at the state below:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w"> 
	</span><span class="err">...</span><span class="w">
	</span><span class="s2">"PrepareStructures"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> 
		</span><span class="err">...</span><span class="w"> 
		</span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MovieIterator"</span><span class="w">
	</span><span class="p">},</span><span class="w">
	</span><span class="s2">"MovieIterator"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Choice"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Choices"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"Variable"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$.movies.has_elements"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"BooleanEquals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
          </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MovieInformationExtraction"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Done"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="err">...</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>The state is invoked after the end of execution of the AWS Lambda function invoked by <code class="highlighter-rouge">PrepareStructures</code> (I will return later on the first input passed to the workflow to start the entire process). The state checks if the property movies of the input field has a boolean field <code class="highlighter-rouge">has_elements</code> - remember the MovieDBResponse property? - is equal to true. This implies that the input provided to the state <code class="highlighter-rouge">MovieIterator</code> has to provide always a dict object with a movies properties. I will return later on this.</p>

<p>Thus, the <code class="highlighter-rouge">MovieInformationExtraction</code> starts: let’s introduce first the Parallel type states.</p>

<h5 id="parallel">Parallel</h5>
<p>The Parallel state (“Type”: “Parallel”) can be used to create parallel branches of execution in your state machine. In addition to the common state fields, Parallel states introduce these additional fields:</p>
<ul>
  <li>Branches (Required): an array of objects that specify state machines to execute in parallel. Each such state machine object must have fields named States and StartAt whose meanings are exactly like those in the top level of a state machine;</li>
  <li>ResultPath (Optional): specifies where (in the input) to place the output of the branches. The input is then filtered as prescribed by the OutputPath field (if present) before being used as the state’s output. For more information, see Input and Output Processing.</li>
  <li>Retry and catch are optional;</li>
</ul>

<p>A Parallel state causes AWS Step Functions to execute each branch, starting with the state named in that branch’s StartAt field, as concurrently as possible, and <strong>wait until all branches terminate</strong> (reach a terminal state) before processing the Parallel state’s Next field.</p>

<p><strong>NOTE</strong>: each branch must be self-contained. A state in one branch of a Parallel state <strong>must not have</strong> a Next field that targets a field outside of that branch, nor can any other state outside the branch transition into that branch.</p>

<h5 id="parallel-state-output">Parallel State Output</h5>
<p>A Parallel state provides each branch with a copy of its own input data (subject to modification by the InputPath field). It generates output <strong>which is an array with one element for each branch containing the output from that branch</strong>. There is no requirement that all elements be of the same type. The output array can be inserted into the input data (and the whole sent as the Parallel state’s output) by using a ResultPath field in the usual way (see Input and Output Processing in the official AWS Docs). Let’s have a look at the <code class="highlighter-rouge">MovieInformationExtraction</code> code:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w"> 
    </span><span class="err">...</span><span class="w">
    </span><span class="s2">"MovieInformationExtraction"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Parallel"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Branches"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"StartAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PersistMovie"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"States"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"PersistMovie"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:PersistMovie"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"End"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"StartAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BreakingNews"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"States"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"BreakingNews"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
              </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:BreakingNews"</span><span class="p">,</span><span class="w">
              </span><span class="s2">"End"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
            </span><span class="p">}</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"ResultPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"NewsIterator"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="err">...</span><span class="w">
</span><span class="p">},</span></code></pre></figure>

<p>This state both call a Node.js AWS Lambda to persist the first movie in the data received from the <code class="highlighter-rouge">MovieIterator</code> step and looks for news about the movie. The input is the output provided by the <code class="highlighter-rouge">PrepareStructures</code>: in fact the MovieIterator does NOT modify the input it receives.</p>

<h5 id="persistmovie-movie">PersistMovie movie</h5>
<p>The <code class="highlighter-rouge">PersistMovie</code> calls an AWS Lambda function written in Node.js to persit the movie to a DynamoDB table previously created - it’s really simply, you can start from <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/SampleData.CreateTables.html">here</a> and read more about how DynamoDB works in the official AWS Docs.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">const</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'aws-sdk'</span><span class="p">);</span>
<span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="na">region</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REGION</span> <span class="p">});</span>
<span class="kd">const</span> <span class="nx">dynamodb</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">DynamoDB</span><span class="p">.</span><span class="nx">DocumentClient</span><span class="p">();</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"request: "</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">));</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>

        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"PUT begins"</span><span class="p">);</span>

        <span class="kd">var</span> <span class="nx">insertion</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="nx">insertion</span><span class="p">.</span><span class="nx">add_date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()).</span><span class="nx">toString</span><span class="p">();</span>
        
        <span class="kd">let</span> <span class="nx">movie</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">TableName</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MOVIES_TABLE</span><span class="p">,</span>
            <span class="na">Item</span><span class="p">:</span> <span class="nx">insertion</span>
        <span class="p">};</span>
    
        <span class="nx">dynamodb</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">movie</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"movie"</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> 
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"dynamodb err: "</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"dynamodb data: "</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"PUT end"</span><span class="p">);</span>
        <span class="p">});</span>
    
        <span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>

    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">has_elements</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">movie_id</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">id</span><span class="p">;</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">q</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">results</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">original_title</span><span class="p">;</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">sortBy</span> <span class="o">=</span> <span class="s2">"relevancy"</span><span class="p">;</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">pageSize</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">has_elements</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">event</span><span class="p">.</span><span class="nx">movies</span><span class="p">.</span><span class="nx">has_elements</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
    
<span class="p">};</span></code></pre></figure>

<p>The Lambda put the first movie in DynamoDB - to prevent the overload of the lambda and of DynamoDB (even if you can specify auto scaling to provision more i/o units to your table). Then, it shift() the array of result (removing the first element and prepare the query to looking for news for the next movie for the next iteration). The BreakingNews Lambda, in parallel, is looking for news for the movie inserted by the PersistMovie Lambda.</p>

<p>As said above, the Result of the parallel state is placed in an array of two element: so the entire return of the PersistMovie state - output of the PersistMovie Lambda - is placed in position 0 (because in the branches the state is defined first): the same for the BreakingNews state - output of the BreakingNews Lambda - that will be placed in the position 1 of the output.</p>

<h5 id="newsiterator">NewsIterator</h5>
<p>The next state is the <code class="highlighter-rouge">NewsIterator</code>: have a look at the variable is looking for. Is exactly the second element of the output array, so the ouput of the BreakingNews-Lambda state, in particular the properties has_elements (this is what I said before about the modification done to the BreakingNews Lambda defined in my previous post).</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">	</span><span class="err">...</span><span class="w">
    </span><span class="s2">"NewsIterator"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Choice"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Choices"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="s2">"Variable"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$[1].has_elements"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"BooleanEquals"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
          </span><span class="s2">"ResultPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$"</span><span class="p">,</span><span class="w">
          </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PrepareSentimentRequest"</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="s2">"Default"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ToMovieIterator"</span><span class="w">
    </span><span class="p">},</span></code></pre></figure>

<h5 id="tomovieiterator">ToMovieIterator</h5>
<p>Let’s start from the Default action: if there are no news - has_elements is false, then go to <code class="highlighter-rouge">ToMovieIterator</code></p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">	</span><span class="err">...</span><span class="w">
    </span><span class="s2">"ToMovieIterator"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Task"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:lambda:your_region:your_code:function:ToMovieIterator"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"Next"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MovieIterator"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="err">...</span></code></pre></figure>

<p>This state simply return the first element of the output array to preserve the structure of the data. In fact, the ToMovieIterator Lambda is a Node.js function with the following code inside.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">	<span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
	    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">event</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
	<span class="p">};</span></code></pre></figure>

<h5 id="preparesentimentrequest">PrepareSentimentRequest</h5>
<p>If there are News to persist and analysize, then the NewsIterators move to the <code class="highlighter-rouge">PrepareSentimentRequest</code> state.</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">    <span class="s2">"PrepareSentimentRequest"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"Type"</span><span class="p">:</span> <span class="s2">"Task"</span><span class="p">,</span>
      <span class="s2">"Resource"</span><span class="p">:</span> <span class="s2">"arn:aws:lambda:your_region:your_code:function:PrepareSentimentRequest"</span><span class="p">,</span>
      <span class="s2">"Next"</span><span class="p">:</span> <span class="s2">"SentimentController"</span>
    <span class="p">},</span>
    <span class="s2">"SentimentController"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"Type"</span><span class="p">:</span> <span class="s2">"Parallel"</span><span class="p">,</span>
      <span class="s2">"Branches"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="s2">"StartAt"</span><span class="p">:</span> <span class="s2">"AylienSentiment"</span><span class="p">,</span>
          <span class="s2">"States"</span><span class="p">:</span> <span class="p">{</span>
            <span class="s2">"AylienSentiment"</span><span class="p">:</span> <span class="p">{</span>
              <span class="s2">"Type"</span><span class="p">:</span> <span class="s2">"Task"</span><span class="p">,</span>
              <span class="s2">"InputPath"</span> <span class="p">:</span> <span class="s2">"$[1].aylienQuery"</span><span class="p">,</span>
              <span class="s2">"Resource"</span><span class="p">:</span> <span class="s2">"arn:aws:lambda:your_region:your_code:function:AylienSentiment"</span><span class="p">,</span>
              <span class="s2">"End"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
              <span class="s2">"Retry"</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span>
                  <span class="s2">"ErrorEquals"</span><span class="p">:</span> <span class="p">[</span> <span class="s2">"States.ALL"</span> <span class="p">],</span>
                  <span class="s2">"IntervalSeconds"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
                  <span class="s2">"MaxAttempts"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
                  <span class="s2">"BackoffRate"</span><span class="p">:</span> <span class="mf">2.0</span>
               <span class="p">}</span> <span class="p">],</span>
              <span class="s2">"Catch"</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span>
                  <span class="s2">"ErrorEquals"</span><span class="p">:</span> <span class="p">[</span> <span class="s2">"States.ALL"</span> <span class="p">],</span>
                  <span class="s2">"Next"</span><span class="p">:</span> <span class="s2">"FallBack"</span>
               <span class="p">}</span> <span class="p">]</span>
            <span class="p">},</span>
            <span class="s2">"FallBack"</span><span class="p">:</span> <span class="p">{</span>
               <span class="s2">"Type"</span><span class="p">:</span> <span class="s2">"Pass"</span><span class="p">,</span>
               <span class="s2">"End"</span><span class="p">:</span> <span class="kc">true</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">},</span> 
        <span class="p">{</span>
          <span class="s2">"StartAt"</span><span class="p">:</span> <span class="s2">"NoOp"</span><span class="p">,</span>
          <span class="s2">"States"</span><span class="p">:</span> <span class="p">{</span>
              <span class="s2">"NoOp"</span><span class="p">:</span> <span class="p">{</span>
              <span class="s2">"Type"</span><span class="p">:</span> <span class="s2">"Pass"</span><span class="p">,</span>
              <span class="s2">"End"</span><span class="p">:</span> <span class="kc">true</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">],</span>
      <span class="s2">"ResultPath"</span><span class="p">:</span> <span class="s2">"$"</span><span class="p">,</span>
      <span class="s2">"Next"</span><span class="p">:</span> <span class="s2">"PersistNews"</span>
    <span class="p">},</span></code></pre></figure>

<p>This state first call the Lambda <code class="highlighter-rouge">PrepareSentimentRequest</code> that simply prepare the request to be done to the AylienSentiment Lambda - done by the AylienSentimentState. The <code class="highlighter-rouge">PrepareSentimentRequest</code> is Node.js lambda function</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

    <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s2">"aylienQuery"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s2">"aylienQuery"</span><span class="p">].</span><span class="nx">text</span> <span class="o">=</span> <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">articles</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">description</span><span class="p">;</span>
    <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s2">"aylienQuery"</span><span class="p">].</span><span class="nx">url</span>  <span class="o">=</span> <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">articles</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">url</span><span class="p">;</span>
    <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="s2">"aylienQuery"</span><span class="p">].</span><span class="nx">mode</span> <span class="o">=</span> <span class="s2">"document"</span><span class="p">;</span>

    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>

<span class="p">};</span></code></pre></figure>

<h5 id="ayliensentiment-and-error-handling">AylienSentiment and Error Handling</h5>
<p>Thus, the aylienQuery is prepared and the <code class="highlighter-rouge">AylienSentiment</code> can call the respective lambda. But, the input is not a dict, so throught the use of the <code class="highlighter-rouge">InputPath</code> directive, we can specify to <em>manipulate</em> the input by projecting only what we need for the lambda, in this case <code class="highlighter-rouge">$[1].aylienQuery</code>.</p>

<p>The AylienSentiment is the weak part of the chain: I don’t know why, but sometimes the Lambda fails - I think because of the small timeout I use for my APIs and the limitation of the free tier for the service behind the Aylien API. So, I use an error catching flow that retries and eventually goes ahead if things simply doesn’t work for the particular news (covering bad requests due to broken news provided by the News API, for instance).</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js">  <span class="s2">"Retry"</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span>
      <span class="s2">"ErrorEquals"</span><span class="p">:</span> <span class="p">[</span> <span class="s2">"States.ALL"</span> <span class="p">],</span>
      <span class="s2">"IntervalSeconds"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="s2">"MaxAttempts"</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="s2">"BackoffRate"</span><span class="p">:</span> <span class="mf">2.0</span>
   <span class="p">}</span> <span class="p">],</span>
  <span class="s2">"Catch"</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span>
      <span class="s2">"ErrorEquals"</span><span class="p">:</span> <span class="p">[</span> <span class="s2">"States.ALL"</span> <span class="p">],</span>
      <span class="s2">"Next"</span><span class="p">:</span> <span class="s2">"FallBack"</span>
   <span class="p">}</span> <span class="p">]</span></code></pre></figure>

<p>The fields defined in the Retry properties are self-explained: with the BackoffRate, you can define the multiplier by which the retry interval increases during each attempt (2.0 by default). To learn more about error handling, have a look <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-error-handling.html">here</a>.</p>

<p>I don’t persist the news gathered from the movie in the parallel step - this is done by the No-OP state of type Pass that simply ignore the input and place in output what it receives - because the last state <code class="highlighter-rouge">PersistNews</code>, that calls the respective Lambda function <code class="highlighter-rouge">PersistNews</code>, merges together the sentiment provided by Aylien for the specific news and persist all together.</p>

<h5 id="the-final-persistnews">The final PersistNews</h5>
<p>Have a look at the code below:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">const</span> <span class="nx">AWS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'aws-sdk'</span><span class="p">);</span>
<span class="nx">AWS</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">update</span><span class="p">({</span> <span class="na">region</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">REGION</span> <span class="p">});</span>
<span class="kd">const</span> <span class="nx">dynamodb</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AWS</span><span class="p">.</span><span class="nx">DynamoDB</span><span class="p">.</span><span class="nx">DocumentClient</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">crypto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'crypto'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">cleanEmptyField</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">prop</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">prop</span><span class="p">]</span> <span class="o">===</span> <span class="s1">'object'</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">cleanEmptyField</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">prop</span><span class="p">]);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">obj</span><span class="p">[</span><span class="nx">prop</span><span class="p">]</span> <span class="o">===</span> <span class="s1">''</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">delete</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">prop</span><span class="p">];</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">obj</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"PUT begins"</span><span class="p">);</span>
    
    <span class="kd">var</span> <span class="nx">sentiment</span> <span class="o">=</span> <span class="nx">event</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="nx">event</span> <span class="o">=</span> <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="kd">var</span> <span class="nx">article</span> <span class="o">=</span> <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">articles</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="nx">article</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHash</span><span class="p">(</span><span class="s1">'md5'</span><span class="p">).</span><span class="nx">update</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">article</span><span class="p">)).</span><span class="nx">digest</span><span class="p">(</span><span class="s2">"hex"</span><span class="p">);</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">article</span><span class="p">,</span> <span class="nx">sentiment</span><span class="p">);</span>
    
    <span class="kd">let</span> <span class="nx">news</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">TableName</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEWS_TABLE</span><span class="p">,</span>
        <span class="na">Item</span><span class="p">:</span> <span class="nx">cleanEmptyField</span><span class="p">(</span><span class="nx">article</span><span class="p">)</span>
    <span class="p">};</span>

    <span class="nx">article</span><span class="p">[</span><span class="s2">"movied_id"</span><span class="p">]</span> <span class="o">=</span> <span class="nx">event</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">movie_id</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"news: "</span><span class="p">,</span> <span class="nx">article</span><span class="p">);</span>

    <span class="nx">dynamodb</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="nx">news</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> 
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"dynamodb err: "</span><span class="p">,</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">err</span><span class="p">.</span><span class="nx">stack</span><span class="p">);</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"dynamodb data: "</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"PUT end"</span><span class="p">);</span>

    <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">articles</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
    <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">has_elements</span> <span class="o">=</span> <span class="nx">event</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">articles</span><span class="p">.</span><span class="nx">length</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
    
<span class="p">};</span></code></pre></figure>

<p>The Lambda clean the first news to prevent DynamoDB value checking error. Then, it merge together the sentiment provided by Aylien and create a unique identifier using the entire news. In the end, the news is persisted and the array that handles the news is shifted (the first element is removing).</p>

<p>#### Conclusion
The event is then returned as is to the News iterator (already disposed to handle an array because of result).</p>

<h4 id="amazon-cloudwatch-events">Amazon CloudWatch Events</h4>
<p>To have an always updated table of Movies in Theater and News - Sentiment evalued - about them, you can use <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">Amazon CloudWatch Events</a> and schedule the launch of the workflow, for instance once a week.</p>

<h5 id="improvement">Improvement</h5>
<p>The use of iterator and parallel states to perform persistence and query to other APIs is a good approach to prevent fail of lambda due to timeout errors: in my opinion, AWS Lambda should remain as simple and quick as possible, to perform request and be loaded fast. However, there are some improvement that could be done</p>
<ul>
  <li>Setup the number of news in a parameter from the beginning;</li>
  <li>Clean the flow of iteration and use a parameter to setup the percentage of result to be persisted in each call of Lambda - for instance, 100 Movies, 10% =&gt; 10 Movies persisted each times: this both to reduce the number of steps and to optimize the time of executions;</li>
  <li>Setup better error handling and timeouts for each steps;</li>
</ul>

<p>What will you use step functions for?</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:catch">
      <p>I will only return on Catch for one of the last state;&nbsp;<a href="#fnref:catch" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/aws-step-functions</wp:post_id>
        <wp:post_date>2018-03-05T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-03-05T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="aws"><![CDATA["aws",]]></category>
        
          <category domain="post_tag" nicename="tmdb"><![CDATA["tmdb",]]></category>
        
          <category domain="post_tag" nicename="news"><![CDATA["news",]]></category>
        
          <category domain="post_tag" nicename="step"><![CDATA["step",]]></category>
        
          <category domain="post_tag" nicename="functions"><![CDATA["functions",]]></category>
        
          <category domain="post_tag" nicename="lambda"><![CDATA["lambda",]]></category>
        
          <category domain="post_tag" nicename="serverless"><![CDATA["serverless",]]></category>
        
          <category domain="post_tag" nicename="sentiment"><![CDATA["sentiment",]]></category>
        
          <category domain="post_tag" nicename="analysis"><![CDATA["analysis"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[A Quantum Experience]]></title>
        <link>made2591.github.io/posts/quantum-computing</link>
        <pubDate>2018-02-20T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="much-more-than-a-post">Much more than a post</h3>
<p>What is the quantum theory? As said by <a href="https://quantumexperience.ng.bluemix.net/">quantumexperience</a> official site by IBM, it’s <em>an elegant mathematical theory able to explain the counterintuitive behavior of subatomic particles, most notably the phenomenon of entanglement</em>. In the late twentieth century it was discovered that quantum theory applies not only to atoms and molecules, but to bits and logic operations in a computer. This realization has been bringing about a revolution in the science and technology of information processing: I decided to write some notes to better explain, from a physics-agnostic computer scientist’s point of view XD, <strong>what I understood</strong> - and it is certainly wrong - about Q until now and why I think it’s an amazing field for computer science. For skilled guys, <a href="https://github.com/made2591/quantum-notes">here</a> latex source (and <a href="https://made2591.github.io/matteo_madeddu_quantum_notes.pdf">here</a> pdf pre-compiled version) that collect my personal notes about IBM Q platform, in general the quantum-computing world. I was also invited in Verona by the Quantum Research Group of the Department of Computer Science - why? don’t know, maybe the coolest guys were sick 😂 - to talk about the platform and we had a really interesting brain-storming conversation about a quantum version of the Tris game I am working on 😎</p>

<p align="center"><img src="https://d1o50x50snmhul.cloudfront.net/wp-content/uploads/2016/05/26093923343_1a9dea0cd2_o-1200x800.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="introduction">Introduction</h3>
<p>I should start by saying that my education background is in Computer Science. While I’ve read a couple of books on quantum mechanics, I don’t have formal training as a physicist: that didn’t deter me from learning the generalities about quantum mechanics and play with quantum computers. In this post, I reported an extract of my notes available <a href="">here</a></p>

<p>These notes collected everything that was useful and necessary for me to fully understand the basic concepts related to this world, with particular attention to quantum computation provided by the <code class="highlighter-rouge">IBM Q Platform</code>. They represents essentialy a work of enrichment of the material available online, with the intention of making more accessible to anyone who wants to deal with the quantum world. To help me understand more in depth the concepts introduced, I wrote some more recalls of maths using as main source the notes in this book<sup id="fnref:susskind2014quantum"><a href="#fn:susskind2014quantum" class="footnote">1</a></sup>.</p>

<h3 id="physics-and-computation">Physics and Computation</h3>
<p>A calculation process is essentially a physical process that is performed on a machine whose operation obeys certain physical laws. The
classical theory of computation is based on an abstract model of universal machine, the Universal Turing Machine, that works according to
a set of rules and principles enunciated in 1936 by Alan Turing and subsequently elaborated by John Von Neumann in the 1940s. These
principles have remained essentially unchanged since then, despite the enormous technological advances that today allow to produce far more
powerful devices than those that could be achieved in the first half of the twentieth century. The tacit assumption underlying these principles is that a Turing machine idealizes a mechanical computational device - with a potentially infinite memory - that obeys the laws of classical physics.</p>

<p>Usually the concept of <em>difficulty</em> is quite subjective, but for a computer scientist this word has a different meaning: the classical
information theory divides the problems that can be solved by a computer according to their complexity, i.e. the time taken by the computer to solve them according to the length of the input. Apparently, there are problems that are unsolvable, even from a computer when the dimensions of the initial parameters become relevant. For instance, it may be impossible to find the solution of a sudoku, solve the enigma of the traveling salesman or break down a number in its prime factors. However, a <em>quantum</em> computer has the ability to perform multiple operations together, i.e. by <em>quantum</em> parallelize tasks. Thus, in the XX century an unlikely alliance between physicists and computer scientist was born with the common goal of developing a quantum machine: computer scientists wanted to amply the class of problem solvable by machines and to overcome the limit of the classic Turing’s computation theory, physicists wanted to understand a little more the mysteries of quantum mechanics. As a result of this cooperation, a series of <em>quantum algorithms</em> have been structured in such a way to use a quantum phenomena such as the principle of <em>superposition</em> or <em>entanglement</em>: only by exploiting these properties properly, it’s possible to tap into all the potential of quantum computing. What makes the quantum computer so interesting?</p>

<h4 id="quantum-computation">Quantum computation</h4>
<p>Quantum computation is born as an alternative paradigm based on the principles of quantum mechanics. The idea of creating a model of computation as an isolated quantum system began to appear at the beginning of the eighties, when P. Benioff, starting from considerations
previously elaborated by C. Bennet, defined the reversible Turing Machine: a computation can always be executed in such a way as to return
to the initial state by retracing the various steps of computation backwards.</p>

<p>Subsequently R. Feynman showed that no classical Turing Machine could simulate certain physical phenomena without incurring an exponential
slowing of its performances. In contrast, a “universal quantum simulator" could have performed the simulation more efficiently.</p>

<p>In 1985 D. Deutsch formalized these ideas in his Universal Quantum Turing Machine, which in quantum computational theory represents exactly
what the Universal Turing Machine represents for classical computability and led to the modern conception of quantum computation.</p>

<p>Naturally, the effects of the introduction of the new calculation model were also felt in the field of computational complexity (as envisaged by Feynman), causing the change of the notion of “treatability". In fact, in 1994 P. Shor shows that the problem of factorization of prime numbers - classically considered intractable - can be solved efficiently, i.e. in polynomial time - with a quantum algorithm. These considerations, combined with the technological ones mentioned above, have led to the emergence of the research field known today as information theory and quantum computation. In particular, the three fundamental, and not very intuitive phenomena of the quantum theory, are the <em>principle of superposition</em> of states, the <em>principle of measurement</em> and the <em>phenomenon of entanglement</em>. To introduce them, it is necessary to introduce some concept related to the quantum world and after that some recall of mathematical algebra.</p>

<h3 id="basics">Basics</h3>
<p>I don’t want you to provide basic notions to understand quantum mechanics: you can have a look at my repo tex <a href="https://github.com/made2591/quantum-notes">here</a> and some exercises <a href="https://github.com/made2591/quantum">here</a>. If you want to find more without dive into maths details you can refers to guides: a beginner version is available <a href="https://quantumexperience.ng.bluemix.net/qx/tutorial?sectionId=beginners-guide&amp;page=introduction">here</a>. The <code class="highlighter-rouge">IBM Q</code> team makes available a real quantum computer I found really useful to understand the concepts and exercises proposed in university notes. The last section of the will contain a collection of exercises - with respective answers - exposed in university course, collected from exams draft available online and provided by several universities, proposed by the <code class="highlighter-rouge">IBM Q</code> in its tutorial cycle and some other personal circuits I coded to understand better the gates available.</p>

<h4 id="ibm-quantum-composer">IBM quantum composer</h4>
<p>The quantum composer is the official IBM graphical user interface for programming a quantum processor. The composer is a tool to construct
quantum circuits using a library of well-defined gates and measurements. You can create your own account in IBM using Github sign up starting from <a href="https://quantumexperience.ng.bluemix.net/">quantum experience</a> site.</p>

<p>When you first click on the “Composer" tab above, you will have a choice between running a real quantum processor or a custom quantum
processor. In the custom processor, gates can be placed anywhere, whereas in the real processor, the topology is set by the physical
device running in our lab (note that this restricts the usability of some of the two-qubit gates). Once you are in the “Composer" tab, you
can start making your very own quantum circuits. The IBM quantum composer is shown in</p>

<p align="center"><img src="https://github.com/made2591/quantum-notes/blob/master/images/ibmComposer.png?raw=true" style="marker-top: -10px;" /></p>

<p>With the composer, you can create a quantum score, which is analogous to a musical score in several respects. Time progresses from left to right. Each line represents a qubit (as well as what happens to that qubit over time). Each qubit has a different frequency, like a different musical note. The quantum composer’s library (located to the right of the qubit stave) contains many different classes of gates: single-qubit gates, such as the yellow idle operation; the green class of <strong>Pauli operators</strong>, which represent bit-flips (X, equivalent to a classical NOT); phase-flips (Z); and a combined bit-flip and phase-flip (Y). There are others gates available that haven’t been introduced yet. In general, quantum gates are represented by square boxes that play a frequency for different durations, amplitudes, and phases. Gates on just one line are called single-qubit gates. Before going on with esperiments, let’s introduce these kind of gates.</p>

<h4 id="ibm-q---first-experiment">IBM Q - First Experiment</h4>
<p>When you begin an experiment, you’ll be prompted to give it a name, so that you can recognize it later. You will also see two choices: real
quantum processor, or custom topology. In both cases, you create your score by dragging gates onto the stave, adding a measurement, and then hitting “run" for the score to execute. If you select “Custom Topology" your only option is to run your score in simulation. This is because the custom processor permits all-to-all connectivity; the real device, in contrast, is limited by physical connectivity. When you select custom topology, a dialogue box will ask you to select the number of qubits and classical bits assigned to different registers. IBM have set the maximum number of qubits to 20.</p>

<p>The operation
<script type="math/tex">M</script>
consists in the measurement of a qubit. If you measure, for instance,
<script type="math/tex">|\psi\rangle = \alpha|0\rangle + \beta|0\rangle</script>
you know the result is a classic bit
<script type="math/tex">M</script>
(indicated with a double line) that will be
<script type="math/tex">0</script>
or
<script type="math/tex">1</script>
with probability respectively
<script type="math/tex">{|\alpha|}^2</script>
an
<script type="math/tex">{|\beta|}^2</script>.</p>

<p>The execution of your circuit happens immediately (unless the number of qubits is large) and the output can then be viewed in the results. You can try the “single qubit measurement" show in</p>

<p align="center"><img src="https://github.com/made2591/quantum-notes/blob/master/images/ibmComposerSimpleEmulated.png?raw=true" style="marker-top: -10px;" /></p>

<p>If you have chosen a real quantum processor, the composer will look like the one shown in</p>

<p align="center"><img src="https://github.com/made2591/quantum-notes/blob/master/images/ibmComposerSimpleReal.png?raw=true" style="marker-top: -10px;" /></p>

<p>In IBM quantum experience, the results from launching your quantum scores can be visualized in two different ways: a standard histogram/bar
graph, and as a quantum sphere, or QSphere - the Block Sphere introduced before. The QSphere represents quantum circuit measurement outcomes in a visually striking and information-dense graphic.</p>

<p>After performing a quantum measurement, a qubit’s information becomes a classical bit, and in our system (as is standard) the measurements are performed in the computational basis. For each qubit the measurement either takes the value 0 if the qubit is measured in state
<script type="math/tex">|0\rangle</script>
and value
<script type="math/tex">|1\rangle</script>
if the qubit is measured in state
<script type="math/tex">|1\rangle</script>.</p>

<p>In a given run of a quantum circuit with
<script type="math/tex">n</script>
measurements, the result will be one of the
<script type="math/tex">2^n</script>
possible
<script type="math/tex">n</script>-bit binary strings. If the experiment is run a second time, even if the measurement is perfect and has no error, the outcome may be different due to the fundamental randomness of quantum physics. The results of a quantum circuit executed many different times can be represented as a distribution over the full
<script type="math/tex">2^n</script>
possible outcomes. It is not scalable to represent all possible outcomes; therefore, we keep only those outcomes that happen in a given experiment and represent them in two different ways: as bars or as a quantum sphere.</p>

<ul>
  <li>The <strong>histogram representation</strong> is the simplest to understand. The height of the bar represents the fraction of instances the outcome comes up in the different runs on the experiment. Only those outcomes that occurred with non-zero occurrences are included. If all the bars are small for visualization only (not if you download the data) they are collected into single bar called <em>other values</em>. In general this is not a problem as a good quantum circuit should not have many outcomes only circuits that have the final state in a large superposition will give many outcomes and these would take exponential measurements to measure.</li>
  <li>The <strong>quantum sphere representation</strong> (QSphere) is the IBM tool to visually show the same data as the bar graph neatly and strikingly. Each line from the center represents a possible outcome of the experiment, and the weight (darkness of the line) represents the likelihood of each outcome. As with the histogram, only those outcomes are included that occurred in a given experiment. The QSphere is divided into
<script type="math/tex">n+1</script>
levels, and each section represents the weight (total number of
<script type="math/tex">1</script>
s) of the binary outcome. The top is the
<script type="math/tex">|0\ldots0\rangle</script>
outcome, the next line is all the outcomes with a single 1 (
<script type="math/tex">|10\ldots0\rangle</script>,
<script type="math/tex">|01\ldots0\rangle</script>, etc), the line after that is all outcomes with two
<script type="math/tex">1</script>
s, and so on until the bottom that is the outcome
<script type="math/tex">|1\ldots1\rangle</script>.</li>
</ul>

<p>For a single qubit there are two outcomes, and the sphere has only two levels; for two qubits, it has three sections with the middle section separated into two parts; for three qubits, it has four sections with the middle two being broken into three sections, and so on, following Pascal’s triangle. The usefulness of the Block Sphere representation is for distinguishing classical states from entangled states. A computational basis state will have a single line pointing in one direction. Under the assumption the state is pure, a superposition of two basis states will have two lines pointing in two directions of half weight. If these directions are on opposite sides of the QSphere we have a state that is maximally entangled (for
<script type="math/tex">n>1</script>
) in the computation bases. Finally if there are faint lines in every direction we have made a uniform superposition state.</p>

<h3 id="ibm-q---testing-the-gates">IBM Q - Testing the gates</h3>
<p>The configuration to test the effect of <code class="highlighter-rouge">X</code> gate is really simple: first, drag and drop an <code class="highlighter-rouge">X</code> gate on the first qubit (first line) - time
is discrete, divided in several dots. The initial state of each qubit is
<script type="math/tex">|0\rangle</script></p>

<p>In general, an operation on a single qubit can be specified by a
<script type="math/tex">2 \times 2</script>
matrix. However, not all
<script type="math/tex">2 \times 2</script>
arrays define “legitimate" operations on qubits. We recall that the normalization condition requires that
<script type="math/tex">\alpha^{2} + \beta^{2}</script>
in any quantum state
<script type="math/tex">\alpha|0\rangle + \beta|1\rangle</script>
The same condition must also apply to the state that is obtained after carrying out the operation. The property of matrices that guarantees the transformation of a unit vector into a vector that is still unitary is unity.</p>

<p>You can try also the other Pauli operators using <code class="highlighter-rouge">Y</code> and <code class="highlighter-rouge">Z</code> gates. In the next few paragraphs, something more will be said about these two
gates.</p>

<h3 id="ibm-q---create-a-superposition">IBM Q - Create a superposition</h3>
<p>On the contrary to the classic case in which we can define a single non-trivial operation on a single bit, in the quantum case there are
many non-trivial operations on a single qubit. Besides the <code class="highlighter-rouge">NOT</code> two important operations that we will use later are the
<script type="math/tex">Z</script>
port:
<script type="math/tex">% <![CDATA[
Z = \begin{bmatrix}
1 & 0 \\
0 & -1
\end{bmatrix} %]]></script>
which only affects the
<script type="math/tex">|1\rangle</script>
component by changing
the sign, and the Hadamard gate:
<script type="math/tex">% <![CDATA[
H =\frac{1}{\sqrt{2}}\begin{bmatrix}
1 & 1 \\
1 & -1
\end{bmatrix} %]]></script>
The latter operation is one of the most useful and is very often used in the definition of quantum circuits. Its effect is that of transforming a base state into an overlap that results, after a measurement in the computational basis, to be
<script type="math/tex">0</script>
or
<script type="math/tex">1</script>
with equal probability. For example, by applying
<script type="math/tex">H</script>
to
<script type="math/tex">|0\rangle</script>
you get:
<script type="math/tex">H \begin{bmatrix}
1 \\
0 \\
\end{bmatrix} = \frac{1}{\sqrt{2}}
\begin{bmatrix}
1 \\
1 \\
\end{bmatrix}</script>
that is the state
<script type="math/tex">\frac{|0\rangle + |1\rangle}{\sqrt{2}}</script>
![Display of Hadamard port applied to input
<script type="math/tex">|0\rangle</script>: 
the output is
<script type="math/tex">|\psi\rangle = |0\rangle + |1\rangle</script></p>

<p align="center"><img src="https://github.com/made2591/quantum-notes/blob/master/images/ibmQuantumSphereHadamard.png?raw=true" style="marker-top: -10px;" /></p>

<p>The effect of
<script type="math/tex">H</script>
can therefore be seen as an <em>half-executed</em> <code class="highlighter-rouge">NOT</code>, so that the resulting state is neither
<script type="math/tex">0</script>
nor
<script type="math/tex">1</script>, but a coherent overlap of the two base states. For this reason
<script type="math/tex">H</script>
is often called the <em>square root of</em> <code class="highlighter-rouge">NOT</code>. Note that this expression has <strong>only</strong> a physical meaning! From an algebraic point of view,
<script type="math/tex">H^2</script>
is not the
<script type="math/tex">X</script>
matrix. With a simple calculation one can in fact verify that
<script type="math/tex">H^2</script>
is the identity and therefore applying
<script type="math/tex">H</script>
twice to a state leaves it unaltered. In the Bloch sphere, the
<script type="math/tex">H</script>
operation corresponds to a rotation of
<script type="math/tex">90</script>
of the sphere around the
<script type="math/tex">Y</script>
axis followed by a reflection through the plane
<script type="math/tex">(X, Z)</script>. Another way to see the rotation is to imagine it as a
<script type="math/tex">180</script>
rotation over the bisector between
<script type="math/tex">X</script>
and
<script type="math/tex">Z</script>
axis: a
<script type="math/tex">180</script>
rotation around
<script type="math/tex">X+Z</script>
swaps points on the
<script type="math/tex">X</script>
axis to the
<script type="math/tex">Z</script>
axis (and vice versa), and negates points on the
<script type="math/tex">Y</script>
axis. The shows the effect of applying
<script type="math/tex">H</script>
to qubit
<script type="math/tex">|0\rangle</script>.</p>

<p align="center"><img src="http://image.ibb.co/eWLvOH/hfig.png" alt="perceptron" style="width: 70%; marker-top: -10px;" /></p>

<p>You can try to visualize the effect of
<script type="math/tex">H</script>
on the qubit
<script type="math/tex">\frac{|0\rangle + |1\rangle}{\sqrt{2}}</script>
For effect of the rotation and subsequent reflection through the plane
<script type="math/tex">x, y</script>
you will obtain again
<script type="math/tex">|0\rangle</script>
The logic gates to a qubit
<script type="math/tex">X</script>,
<script type="math/tex">Z</script>
and
<script type="math/tex">H</script>
are represented graphically as in</p>

<p align="center"><img src="http://image.ibb.co/mzSycc/qports.png" alt="perceptron" style="width: 70%; marker-top: -10px;" /></p>

<h4 id="multiple-qubits-quantum-logic-gates">Multiple qubits quantum logic gates</h4>
<p>Operations on quantum registers of two or more qubits are necessary to describe the transformations of compound states and in particular of the <em>so-called</em> <strong>entangled states</strong>. We have seen that a two-qubit register can not always be decomposed into the tensor product of the individual qubits components. Therefore we can not in such cases simulate an operation on the two qubits through operations on each qubit component. Also operations on qubit registers correspond to unit operations as in the case of a single qubit. The most important logic gates that implement operations on two classic bits are the <code class="highlighter-rouge">AND</code>, <code class="highlighter-rouge">OR</code>, <code class="highlighter-rouge">XOR</code>, <code class="highlighter-rouge">NAND</code> and <code class="highlighter-rouge">NOR</code> ports. The <code class="highlighter-rouge">NOT</code> and <code class="highlighter-rouge">AND</code> ports form a universal set, i.e. any boolean function can be accomplished by a combination of these two operations. For the same reason, the <code class="highlighter-rouge">NAND</code> constitutes a universal whole. Note that <code class="highlighter-rouge">XOR</code> alone or even together with <code class="highlighter-rouge">NOT</code> is not universal: since it preserves the total parity of the bits, only a subset of the boolean functions can be represented by this operation. The quantum analog of <code class="highlighter-rouge">XOR</code> is the <code class="highlighter-rouge">CNOT</code> gate (controlled-<code class="highlighter-rouge">NOT</code>) which operates on two qubits: the first is called the control qubit and the second is the qubit target. The <code class="highlighter-rouge">CNOT</code> gate is graphically represented by the circuit in</p>

<p align="center"><img src="http://image.ibb.co/itUYAx/cnot.png" alt="perceptron" style="width: 40%; marker-top: -10px;" /></p>

<p>If the control is zero then the target is left unchanged; if the control is one, then the target is denied, that is
<script type="math/tex">|00\rangle \rightarrow{} |00\rangle, |01\rangle \rightarrow{} |01\rangle, |10\rangle \rightarrow{} |11\rangle, |11\rangle \rightarrow{} |10\rangle</script>
Equivalently, <code class="highlighter-rouge">CNOT</code> can be seen as the transformation
<script type="math/tex">|A,B\rangle \mapsto |A,B\rangle \otimes A</script>
where
<script type="math/tex">A</script>
is the control qubit,
<script type="math/tex">B</script>
is the target and
<script type="math/tex">\otimes</script>
is the sum module
<script type="math/tex">2</script>
that is the classical <code class="highlighter-rouge">XOR</code> operation. The representation as a unitary matrix is:
<script type="math/tex">% <![CDATA[
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 1 & 0 & 0 \\
0 & 0 & 0 & 1 \\
0 & 0 & 1 & 0
\end{bmatrix} %]]></script>
where the first column describes the transformation of the vector of the computational base
<script type="math/tex">|00\rangle</script>, the second that of the vector
<script type="math/tex">|01\rangle</script>, the third of
<script type="math/tex">|10\rangle</script>
and the fourth of
<script type="math/tex">|11\rangle</script>.</p>

<p>It is important to note that the <code class="highlighter-rouge">CNOT</code>, like all unit transformations, is invertible: input can always be obtained from the output. This is not true for the <code class="highlighter-rouge">XOR</code> and <code class="highlighter-rouge">NAND</code> logic gates: in general, classic operations are irreversible. The <code class="highlighter-rouge">CNOT</code> gate and one-qubit ports represent the prototypes of all quantum logic gates. In fact, is is possible to demonstrate the universality of these operations (later on
this).</p>

<h3 id="ibm-q---testing-the-cnot-gate">IBM Q - Testing the <code class="highlighter-rouge">CNOT</code> gate</h3>

<p><strong>[from Matteo: Add experiment over this.]</strong></p>

<p>The gates made with vertical lines connecting two qubits together are a physical implementation of the <code class="highlighter-rouge">CNOT</code> gates just introduced. These two-qubit gates function like an exclusive <code class="highlighter-rouge">OR</code> gate in conventional digital logic. The qubit at the solid-dot end of the <code class="highlighter-rouge">CNOT</code> gate
controls the whether or not the target qubit at the
<script type="math/tex">\oplus</script>-end of the gate is inverted (hence <code class="highlighter-rouge">controlled NOT</code>, or <code class="highlighter-rouge">CNOT</code>). Some gates, like the <code class="highlighter-rouge">CNOT</code>, have hardware constraints; the set of allowed connections is defined by the schematic of the device located below the quantum Composer, along with recently calibrated device parameters.</p>

<p>### Quantum circuits</p>

<h4 id="swap-operation">SWAP operation</h4>
<p>A simple example of a quantum circuit is given in Fig. <a href="#circuit">[circuit]</a>{reference-type=”ref” reference=”circuit”}.</p>

<p align="center"><img src="http://image.ibb.co/gP4piH/circuit.png" alt="perceptron" style="width: 40%; marker-top: -10px;" /></p>

<p>The circuit realizes the exchange of two qubits states. Given in input the register of two qubits
<script type="math/tex">|a, b\rangle</script>, a <code class="highlighter-rouge">CNOT</code> is carried out with qubit of control a. As a result,
<script type="math/tex">b</script>
is replaced by
<script type="math/tex">a \otimes b</script>. The latter is taken as a control of a second <code class="highlighter-rouge">CNOT</code> with target
<script type="math/tex">a</script>. The effect is that a is replaced by
<script type="math/tex">a \otimes (a \otimes b) = b</script>. Finally, a last <code class="highlighter-rouge">CNOT</code> with control
<script type="math/tex">b</script>
and target
<script type="math/tex">a \otimes b</script>
realizes the exchange by replacing
<script type="math/tex">a \otimes b</script>
with
<script type="math/tex">a</script>.
The line with the black dot indicates the control qubit, while the qubits target are the
<script type="math/tex">n</script>
inputs of
<script type="math/tex">U</script>. According to this convention the controlled-<code class="highlighter-rouge">NOT</code> is nothing more than a controlled-<script type="math/tex">U</script>
with
<script type="math/tex">U = X</script>.</p>

<p align="center"><img src="http://image.ibb.co/eLkUiH/mesured.png" alt="perceptron" style="width: 40%; marker-top: -10px;" /></p>

<p>Testing the swapping of the qubit is really simple. Let’s prepare a simulated register with two qubit in the initial state
<script type="math/tex">|10\rangle</script>, like the one shown in</p>

<p align="center"><img src="https://github.com/made2591/quantum-notes/blob/master/images/quantumSwap.png?raw=true" style="marker-top: -10px;" /></p>

<p><strong>NOTE</strong>: in <em>IBM</em> platform the histogram will provide the result in the opposite order. For instance, in the figure, the unique bar on histogram is labelled
<script type="math/tex">10</script>, where
<script type="math/tex">1</script>
refer to the second (<code class="highlighter-rouge">q[1]</code>) qubit in the register and
<script type="math/tex">0</script>
to the first (<code class="highlighter-rouge">q[0]</code>). Thus, as show in the histogram, the result will be the swapping between the two qubit. Mathematically, the proof is simple. Let’s start by saying that
<script type="math/tex">|0\rangle = \binom{1}{0}</script>
Thus,
<script type="math/tex">% <![CDATA[
X|0\rangle = \binom{1}{0}\left({\begin{matrix} 0 & 1 \\ 1 & 0 \\ \end{matrix}}\right) %]]></script></p>

<p>The initial state is ready (with value
<script type="math/tex">|10\rangle</script>). Then, we apply a <code class="highlighter-rouge">CNOT</code>. Our first qubit is in
<script type="math/tex">|1\rangle</script>, thus the second qubit will be negated as well: the status become
<script type="math/tex">|11\rangle</script>. Then, a second <code class="highlighter-rouge">CNOT</code> is applied using the second qubit as a control and the first as a target qubit. The first qubit change to the
<script type="math/tex">|0\rangle</script>, bringing the entire register in the
<script type="math/tex">|01\rangle</script>. The last <code class="highlighter-rouge">CNOT</code> doesn’t anything: the swap is completed. Ok but what if the initial status was set tup
<script type="math/tex">|00\rangle</script>
or any other possible permutation? Let’s see the effect of the circuit over the four possible initial state (the third is the one we already described).</p>

<script type="math/tex; mode=display">|00\rangle \xrightarrow{1 \; CNOT} |00\rangle \xrightarrow{2 \; CNOT} |00\rangle \xrightarrow{3 \; CNOT} |00\rangle</script>

<script type="math/tex; mode=display">|01\rangle \xrightarrow{1 \; CNOT} |01\rangle \xrightarrow{2 \; CNOT} |11\rangle \xrightarrow{3 \; CNOT} |10\rangle</script>

<script type="math/tex; mode=display">|10\rangle \xrightarrow{1 \; CNOT} |11\rangle \xrightarrow{2 \; CNOT} |01\rangle \xrightarrow{3 \; CNOT} |01\rangle</script>

<script type="math/tex; mode=display">|11\rangle \xrightarrow{1 \; CNOT} |10\rangle \xrightarrow{2 \; CNOT} |10\rangle \xrightarrow{3 \; CNOT} |11\rangle</script>

<h3 id="quantum-teleportation">Quantum teleportation</h3>

<p>Continue <a href="https://github.com/made2591/quantum-notes">here</a>…</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:susskind2014quantum">
      <p>Available on <a href="https://www.amazon.com/QUANTUM-MECHANICS-THEORETICAL-Hardcover-Feb-25-2014/dp/B00UMYPVE4">Amazon</a>&nbsp;<a href="#fnref:susskind2014quantum" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/quantum-computing</wp:post_id>
        <wp:post_date>2018-02-20T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-02-20T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="quantum"><![CDATA["quantum",]]></category>
        
          <category domain="post_tag" nicename="q"><![CDATA["q",]]></category>
        
          <category domain="post_tag" nicename="informative"><![CDATA["informative",]]></category>
        
          <category domain="post_tag" nicename="ibm"><![CDATA["ibm"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[AWS Lambda, GoLang and Grafana to perform sentiment analysis for your company / business]]></title>
        <link>made2591.github.io/posts/aws-lambda</link>
        <pubDate>2018-01-30T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>In this article I will talk about my experience with AWS Lambda + API Gateway, GoLang (of course) and Grafana to build a sentiment analysis tool over customizable topics. Who should you read this post? Don’t know, maybe a CIO, a CTO, a CEO, a generic Chief or a MasterChef, for sure an AWS and GoLang fan like me. First of all: to better understand how to use Elasticsearch, read my previous post <a href="https://made2591.github.io/posts/elasticnas">Elasticsearch over My home Network Attached Storage</a>: it’s not so exciting as it seems, but you will have a general idea about what is Elasticsearch and how can you use it. Second: if you don’t know about AWS Lambda, study it. I personally believe that it represents one of the most interesting services currently offered by AWS: as they state, <em>AWS Lambda lets you run code without provisioning or managing servers</em>. You pay only for the compute time you consume and there is no charge when your code is not running. The amazing thing is that with a Free Tier trial you have 1 milions requests for free - O.O - to run code of any type of application or backend service - all with zero administration: you just upload your code - unfortunately the online editor for GoLang is not supported yet - and AWS Lambda<sup id="fnref:lambda"><a href="#fn:lambda" class="footnote">1</a></sup> takes care of everything required to run and scale your code with high availability. You can even set up your code to automatically trigger from other AWS services - as I have done with API Gateway - or call it directly from any web or mobile app. And…last but definetly not the least, why I’m writing this post!? Because starting from <a href="https://aws.amazon.com/it/blogs/compute/announcing-go-support-for-aws-lambda/">15 January 2018</a>, AWS Lambda support GoLang!!!</p>

<p>Ingredients after the image.</p>

<p align="center"><img src="https://images.everyeye.it/img-notizie/tramite-gli-steam-awards-giocatori-chiedono-arrivo-half-life-3-v3-278335-1280x720.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="ingredients">Ingredients</h3>
<p>For this article, you will need the following:</p>
<ul>
  <li>A Grafana + Elasticsearch setup (wherever you want: if you want to run both of them locally, go <a href="https://github.com/ftes/grafana-elasticsearch-docker">here</a>;</li>
  <li>An <a href="http://aws.amazon.com">AWS account</a> (free tier it’s ok, but API Gateway is not included);</li>
  <li>Python or Bash to perform queries;</li>
  <li>A <a href="http://newsapi.org">Newsapi</a> account to gather news from several sources (the free tier it’s ok for our purpose);</li>
  <li>A <a href="http://aylien.com">Aylien</a> account to do some sentiment analysis (the free tier it’s ok for our purpose);</li>
</ul>

<h3 id="recipe">Recipe</h3>
<p>There are a lot of quite simple steps. I recommend you to pay a lot of attention with AWS. You always have to know exactly what are you doing, to avoid surprise in billing in the end of the month. Fortunately, there are a lot of documentations on Amazon official site, so you only have to read them.</p>

<h4 id="17-create-an-aws-account">1/7 Create an AWS Account</h4>
<p>Create an AWS Account is simple, you only need to have a credit cart and no fear of Amazon (what?!) :D You can start from <a href="http://aws.amazon.com">here</a>. After the creation, I strongly suggest to study a little more how the IAM Roles work. After you have created your account, you can start from the <a href="https://console.aws.amazon.com/iam/">IAM Dashboard</a> by following the 5 points to ensure your account is secured. I am talking about</p>

<p align="center"><img src="http://image.ibb.co/mL3POm/aws_iam.png" style="width: 100%; marker-top: -10px;" /></p>

<p>Following those steps you guarantee - in practise - to:</p>
<ul>
  <li>Create a secondary user with admin rights, possibly with MFA enabled (I use <a href="http://thomasrzhao.com/2stp-support/">2stp</a> even if it is not supported anymore, because it works and it includes what I need - and nothing more - from a 2-step virtual authenticator device);</li>
  <li>Create IAM password policy and start to understand the use of groups to assign permissions;</li>
</ul>

<h4 id="27-create-newsapi-and-aylien-account">2/7 Create Newsapi and Aylien Account</h4>
<p>These services are replaceable with any other service you want to lambd-_ize_. I chose the first one because it is really a great service for aggregating news and highlights from different sources. I chose the second one because the service simply work for my trial purpose, but I would like to compare it with Google Cloud Platform and Microsoft Azure as soon as possible, and I already have the idea of who will be the winner (spoiler: in my opinion it is not Google).
Start <a href="http://newsapi.org">here</a> for news and <a href="http://aylien.com">here</a> for sentiment.</p>

<h4 id="37-build-news-gatherer-over-aws-lambda">3/7 Build News gatherer over AWS Lambda</h4>
<p>Lambda currently supports different languages: C#, Java, Node.js, Python and now Go. First of all, you need to know how to write code: online editor is not supported yet so you will have to write your lambda offline. A Lambda ready GoLang file is a single <code class="highlighter-rouge">.go</code> file with a function, the <code class="highlighter-rouge">handler</code> and a <code class="highlighter-rouge">main</code> function to link the handler function to the lambda. And that’s all. The only dependencies you need to install, if you want to run your lambda locally, is the <code class="highlighter-rouge">aws-lambda-go</code> sdk provided by Amazon and available on Github.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">go get github.com/aws/aws-lambda-go/lambda</code></pre></figure>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span><span class="x"> </span><span class="n">main</span><span class="x">

</span><span class="k">import</span><span class="x"> </span><span class="p">(</span><span class="x">
	</span><span class="s">"os"</span><span class="x">
	</span><span class="s">"fmt"</span><span class="x">
	</span><span class="s">"time"</span><span class="x">
	</span><span class="s">"errors"</span><span class="x">
	</span><span class="s">"strconv"</span><span class="x">
	</span><span class="s">"net/http"</span><span class="x">
	</span><span class="s">"io/ioutil"</span><span class="x">
	</span><span class="s">"encoding/json"</span><span class="x">

	</span><span class="s">"github.com/aws/aws-lambda-go/lambda"</span><span class="x">
</span><span class="p">)</span><span class="x">

</span><span class="k">var</span><span class="x"> </span><span class="p">(</span><span class="x">
	</span><span class="n">API_KEY</span><span class="x">      </span><span class="o">=</span><span class="x"> </span><span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"API_KEY"</span><span class="p">)</span><span class="x">
	</span><span class="n">API_URL</span><span class="x">      </span><span class="o">=</span><span class="x"> </span><span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"API_URL"</span><span class="p">)</span><span class="x">
	</span><span class="n">API_DATE_FMT</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"API_DATE_FMT"</span><span class="p">)</span><span class="x">
	</span><span class="n">ErrorBackend</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"Something went wrong"</span><span class="p">)</span><span class="x">
</span><span class="p">)</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Request</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Q</span><span class="x"> </span><span class="o">*</span><span class="kt">string</span><span class="x"> 		 		</span><span class="s">`json:"q"`</span><span class="x">
	</span><span class="n">Sources</span><span class="x"> </span><span class="o">*</span><span class="kt">string</span><span class="x">  		</span><span class="s">`json:"sources"`</span><span class="x">  </span><span class="c">// comma separated https://newsapi.org/sources</span><span class="x">
	</span><span class="n">Domains</span><span class="x"> </span><span class="o">*</span><span class="kt">string</span><span class="x">  		</span><span class="s">`json:"domains"`</span><span class="x">  </span><span class="c">// comma separated https://newsapi.org/domains</span><span class="x">
	</span><span class="n">From</span><span class="x"> </span><span class="o">*</span><span class="kt">string</span><span class="x">     		</span><span class="s">`json:"from"`</span><span class="x">
	</span><span class="n">To</span><span class="x"> </span><span class="o">*</span><span class="kt">string</span><span class="x">       		</span><span class="s">`json:"to"`</span><span class="x">
	</span><span class="n">Language</span><span class="x"> </span><span class="o">*</span><span class="kt">string</span><span class="x"> 		</span><span class="s">`json:"language"`</span><span class="x">
	</span><span class="n">SortBy</span><span class="x"> </span><span class="o">*</span><span class="kt">string</span><span class="x">   		</span><span class="s">`json:"sortBy"`</span><span class="x">
	</span><span class="n">PageSize</span><span class="x"> </span><span class="o">*</span><span class="kt">int</span><span class="x">    		</span><span class="s">`json:"pageSize"`</span><span class="x">
	</span><span class="n">Page</span><span class="x"> </span><span class="o">*</span><span class="kt">int</span><span class="x">   	 		</span><span class="s">`json:"page"`</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">NewsApiResponse</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Status</span><span class="x"> </span><span class="kt">string</span><span class="x">   		</span><span class="s">`json:"status"`</span><span class="x">
	</span><span class="n">News</span><span class="x"> </span><span class="p">[]</span><span class="n">News</span><span class="x"> 			</span><span class="s">`json:"articles"`</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Source</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">ID</span><span class="x">   </span><span class="kt">string</span><span class="x"> 			</span><span class="s">`json:"id"`</span><span class="x">
	</span><span class="n">Name</span><span class="x"> </span><span class="kt">string</span><span class="x"> 			</span><span class="s">`json:"name"`</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">News</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Source</span><span class="x">	  	</span><span class="n">Source</span><span class="x">      </span><span class="s">`json:"source"`</span><span class="x">
	</span><span class="n">Author</span><span class="x">    	</span><span class="kt">string</span><span class="x">		</span><span class="s">`json:"author"`</span><span class="x">
	</span><span class="n">Title</span><span class="x">     	</span><span class="kt">string</span><span class="x">		</span><span class="s">`json:"title"`</span><span class="x">
	</span><span class="n">Description</span><span class="x"> </span><span class="kt">string</span><span class="x">  	</span><span class="s">`json:"description"`</span><span class="x">
	</span><span class="n">URL</span><span class="x">       	</span><span class="kt">string</span><span class="x">		</span><span class="s">`json:"url"`</span><span class="x">
	</span><span class="n">Image</span><span class="x">     	</span><span class="kt">string</span><span class="x"> 		</span><span class="s">`json:"urlToImage"`</span><span class="x">
	</span><span class="n">Published</span><span class="x"> 	</span><span class="n">time</span><span class="o">.</span><span class="n">Time</span><span class="x">	</span><span class="s">`json:"publishedAt"`</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="n">GatherRecentNewsAboutTopic</span><span class="p">(</span><span class="n">request</span><span class="x"> </span><span class="n">Request</span><span class="p">)</span><span class="x"> </span><span class="p">([]</span><span class="n">News</span><span class="p">,</span><span class="x"> </span><span class="kt">error</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="c">// concat api key</span><span class="x">
	</span><span class="n">url</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="n">API_URL</span><span class="p">,</span><span class="x"> </span><span class="n">API_KEY</span><span class="p">)</span><span class="x">

	</span><span class="c">// create client to ask for apis</span><span class="x">
	</span><span class="n">client</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">http</span><span class="o">.</span><span class="n">Client</span><span class="p">{}</span><span class="x">

	</span><span class="c">// error in external source</span><span class="x">
	</span><span class="n">req</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">http</span><span class="o">.</span><span class="n">NewRequest</span><span class="p">(</span><span class="s">"GET"</span><span class="p">,</span><span class="x"> </span><span class="n">url</span><span class="p">,</span><span class="x"> </span><span class="no">nil</span><span class="p">)</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="p">[]</span><span class="n">News</span><span class="p">{},</span><span class="x"> </span><span class="n">ErrorBackend</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// parse request parameters</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Q</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">p</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="n">p</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"q"</span><span class="p">,</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">Q</span><span class="p">)</span><span class="x">
		</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">p</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// parse request source</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Sources</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">p</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="n">p</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"sources"</span><span class="p">,</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">Sources</span><span class="p">)</span><span class="x">
		</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">p</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// parse request domains</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Domains</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">p</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="n">p</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"domains"</span><span class="p">,</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">Domains</span><span class="p">)</span><span class="x">
		</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">p</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// parse request from</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">From</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">p</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">t</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">API_DATE_FMT</span><span class="p">,</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">From</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">p</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"from"</span><span class="p">,</span><span class="x"> </span><span class="n">t</span><span class="o">.</span><span class="n">Format</span><span class="p">(</span><span class="n">API_DATE_FMT</span><span class="p">))</span><span class="x">
			</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">p</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
		</span><span class="p">}</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// parse request to</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">To</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">p</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">t</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">time</span><span class="o">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">API_DATE_FMT</span><span class="p">,</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">To</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">p</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"to"</span><span class="p">,</span><span class="x"> </span><span class="n">t</span><span class="o">.</span><span class="n">Format</span><span class="p">(</span><span class="n">API_DATE_FMT</span><span class="p">))</span><span class="x">
			</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">p</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
		</span><span class="p">}</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// parse request language</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Language</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">p</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="n">p</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"language"</span><span class="p">,</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">Language</span><span class="p">)</span><span class="x">
		</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">p</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// parse request sort by</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">SortBy</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">p</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="n">p</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"sortBy"</span><span class="p">,</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">SortBy</span><span class="p">)</span><span class="x">
		</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">p</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// parse request page size</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">PageSize</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">p</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="n">p</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"pageSize"</span><span class="p">,</span><span class="x"> </span><span class="n">strconv</span><span class="o">.</span><span class="n">Itoa</span><span class="p">(</span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">PageSize</span><span class="p">))</span><span class="x">
		</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">p</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// parse request page</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Page</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">p</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">Query</span><span class="p">()</span><span class="x">
		</span><span class="n">p</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="s">"page"</span><span class="p">,</span><span class="x"> </span><span class="n">strconv</span><span class="o">.</span><span class="n">Itoa</span><span class="p">(</span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">Page</span><span class="p">))</span><span class="x">
		</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="o">.</span><span class="n">RawQuery</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">p</span><span class="o">.</span><span class="n">Encode</span><span class="p">()</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// debug</span><span class="x">
	</span><span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">req</span><span class="o">.</span><span class="n">URL</span><span class="p">)</span><span class="x">

	</span><span class="c">// make request and defer response</span><span class="x">
	</span><span class="n">resp</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">client</span><span class="o">.</span><span class="n">Do</span><span class="p">(</span><span class="n">req</span><span class="p">)</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="p">[]</span><span class="n">News</span><span class="p">{},</span><span class="x"> </span><span class="n">ErrorBackend</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="k">defer</span><span class="x"> </span><span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="o">.</span><span class="n">Close</span><span class="p">()</span><span class="x">

	</span><span class="c">// parse news results</span><span class="x">
	</span><span class="k">var</span><span class="x"> </span><span class="n">data</span><span class="x"> </span><span class="n">NewsApiResponse</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">json</span><span class="o">.</span><span class="n">NewDecoder</span><span class="p">(</span><span class="n">resp</span><span class="o">.</span><span class="n">Body</span><span class="p">)</span><span class="o">.</span><span class="n">Decode</span><span class="p">(</span><span class="o">&amp;</span><span class="n">data</span><span class="p">);</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="p">[]</span><span class="n">News</span><span class="p">{},</span><span class="x"> </span><span class="n">ErrorBackend</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// return response</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="n">data</span><span class="o">.</span><span class="n">News</span><span class="p">,</span><span class="x"> </span><span class="no">nil</span><span class="x">

</span><span class="p">}</span><span class="x">

</span><span class="c">// handle request</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">main</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="c">// handle request</span><span class="x">
	</span><span class="n">lambda</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">GatherRecentNewsAboutTopic</span><span class="p">)</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>I also found <a href="https://github.com/lambci/docker-lambda">this</a> beautiful docker image that let you test your lambda (and support also GoLang) with a single docker run. You can pass the parameters as a string (payload requests), as shown in the method above: of course, you first have to compile your lambda for linux.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">GOOS</span><span class="o">=</span>linux go build <span class="nt">-o</span> MyCompiledLambda MyLambda.go

docker run <span class="nt">--rm</span> <span class="nt">-v</span> <span class="nv">$PWD</span>:/var/task lambci/lambda:go1.x MyCompiledLambda <span class="s1">'{"parameter": "value"}'</span></code></pre></figure>

<p>To upload your Lambda in AWS, in the creation steps specify you want to upload a Go 1.x Lambda, then zip your build (in the example, <code class="highlighter-rouge">MyCompiledLambda</code>)</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">zip MyCompiledLambda.zip MyCompiledLambda</code></pre></figure>

<p>and upload from an S3 bucket or manually.</p>

<p align="center"><img src="http://image.ibb.co/mJqX9R/aws_lambda_2.png" style="width: 100%; marker-top: -10px;" /></p>

<p><strong>NOTE</strong>: the most important things is to setup the handler name to the name of the compiled binary inside your zip - exactly the same name. Otherwise, during testing a path error will be arised because AWS will look for the wrong file name to run your lambda.</p>

<p>As you can see from the code above, there are environment variables to setup API KEY and API Endpoint (whatever your want). From the Lambda setup page you can setup this environment variable to let your code gather the information from AWS, in a secure way.</p>

<p align="center"><img src="http://image.ibb.co/c3vh9R/aws_env.png" style="width: 100%; marker-top: -10px;" /></p>

<p>After you have succesfully setup your lambda with the right execution role (have a look at the documentation step, or follow the wizard to automatically create an execution role), you can test your Lambda configuring and using the test menu near to the save button in the right corner of the page. You can click on create your test (they will be available for each lambda separately), you can specify the same payload - you passed before as parameter - to the lambda as a request payload in the editor - using json format.</p>

<p align="center"><img src="http://image.ibb.co/mWus9R/aws_test.png" style="width: 100%; marker-top: -10px;" /></p>

<h4 id="47-build-sentiment-analyzer-over-aws-lambda">4/7 Build Sentiment analyzer over AWS Lambda</h4>
<p>I build a second AWS Lambda to create a sentiment analyzer that take advantage of free tier plan kindly granted by <a href="http://aylien.com">Aylien Team</a>. The code below:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span><span class="x"> </span><span class="n">main</span><span class="x">

</span><span class="k">import</span><span class="x"> </span><span class="p">(</span><span class="x">
	</span><span class="s">"errors"</span><span class="x">
	</span><span class="s">"net/http"</span><span class="x">
	</span><span class="s">"os"</span><span class="x">

	</span><span class="s">"github.com/AYLIEN/aylien_textapi_go"</span><span class="x">
	</span><span class="s">"github.com/aws/aws-lambda-go/lambda"</span><span class="x">
</span><span class="p">)</span><span class="x">

</span><span class="k">var</span><span class="x"> </span><span class="p">(</span><span class="x">
	</span><span class="n">AYLIEN_API_URL</span><span class="x">                </span><span class="o">=</span><span class="x"> </span><span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"AYLIEN_API_URL"</span><span class="p">)</span><span class="x">
	</span><span class="n">AYLIEN_API_KEY</span><span class="x">                </span><span class="o">=</span><span class="x"> </span><span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"AYLIEN_API_KEY"</span><span class="p">)</span><span class="x">
	</span><span class="n">AYLIEN_API_ID</span><span class="x">                 </span><span class="o">=</span><span class="x"> </span><span class="n">os</span><span class="o">.</span><span class="n">Getenv</span><span class="p">(</span><span class="s">"AYLIEN_API_ID"</span><span class="p">)</span><span class="x">
	</span><span class="n">SentimentAnalysisErrorBackend</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">errors</span><span class="o">.</span><span class="n">New</span><span class="p">(</span><span class="s">"Something went wrong"</span><span class="p">)</span><span class="x">
</span><span class="p">)</span><span class="x">

</span><span class="k">type</span><span class="x"> </span><span class="n">Request</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Text</span><span class="x">     </span><span class="o">*</span><span class="kt">string</span><span class="x"> </span><span class="s">`json:"text"`</span><span class="x">
	</span><span class="n">Url</span><span class="x">      </span><span class="o">*</span><span class="kt">string</span><span class="x"> </span><span class="s">`json:"url"`</span><span class="x">
	</span><span class="n">Mode</span><span class="x">     </span><span class="o">*</span><span class="kt">string</span><span class="x"> </span><span class="s">`json:"mode"`</span><span class="x">
	</span><span class="n">Language</span><span class="x"> </span><span class="o">*</span><span class="kt">string</span><span class="x"> </span><span class="s">`json:"language"`</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="n">SentimentAnalysisOverRequest</span><span class="p">(</span><span class="n">request</span><span class="x"> </span><span class="n">Request</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="n">textapi</span><span class="o">.</span><span class="n">SentimentResponse</span><span class="p">,</span><span class="x"> </span><span class="kt">error</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="c">// concat api key</span><span class="x">
	</span><span class="n">auth</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">textapi</span><span class="o">.</span><span class="n">Auth</span><span class="p">{</span><span class="n">AYLIEN_API_ID</span><span class="p">,</span><span class="x"> </span><span class="n">AYLIEN_API_KEY</span><span class="p">}</span><span class="x">

	</span><span class="c">// error in external source</span><span class="x">
	</span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">http</span><span class="o">.</span><span class="n">NewRequest</span><span class="p">(</span><span class="s">"GET"</span><span class="p">,</span><span class="x"> </span><span class="n">AYLIEN_API_URL</span><span class="p">,</span><span class="x"> </span><span class="no">nil</span><span class="p">)</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="n">textapi</span><span class="o">.</span><span class="n">SentimentResponse</span><span class="p">{},</span><span class="x"> </span><span class="n">SentimentAnalysisErrorBackend</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// create client to ask for apis</span><span class="x">
	</span><span class="n">client</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">textapi</span><span class="o">.</span><span class="n">NewClient</span><span class="p">(</span><span class="n">auth</span><span class="p">,</span><span class="x"> </span><span class="no">true</span><span class="p">)</span><span class="x">

	</span><span class="c">// error in external source</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="nb">panic</span><span class="p">(</span><span class="n">err</span><span class="p">)</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="n">text</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="s">""</span><span class="x">
	</span><span class="n">url</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="s">""</span><span class="x">
	</span><span class="n">mode</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="s">""</span><span class="x">
	</span><span class="n">lang</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="s">"auto"</span><span class="x">

	</span><span class="c">// parse request parameters</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Text</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">text</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">Text</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Url</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">url</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">Url</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Mode</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">mode</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">Mode</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="n">request</span><span class="o">.</span><span class="n">Language</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">lang</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="o">*</span><span class="n">request</span><span class="o">.</span><span class="n">Language</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// create sentiment parameters</span><span class="x">
	</span><span class="n">sentimentParams</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&amp;</span><span class="n">textapi</span><span class="o">.</span><span class="n">SentimentParams</span><span class="p">{</span><span class="n">Text</span><span class="o">:</span><span class="x"> </span><span class="n">text</span><span class="p">,</span><span class="x"> </span><span class="n">URL</span><span class="o">:</span><span class="x"> </span><span class="n">url</span><span class="p">,</span><span class="x"> </span><span class="n">Language</span><span class="o">:</span><span class="x"> </span><span class="n">lang</span><span class="p">,</span><span class="x"> </span><span class="n">Mode</span><span class="o">:</span><span class="x"> </span><span class="n">mode</span><span class="p">}</span><span class="x">

	</span><span class="c">// return sentiment</span><span class="x">
	</span><span class="n">sentiment</span><span class="p">,</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">client</span><span class="o">.</span><span class="n">Sentiment</span><span class="p">(</span><span class="n">sentimentParams</span><span class="p">)</span><span class="x">

	</span><span class="k">if</span><span class="x"> </span><span class="n">err</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="no">nil</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="k">return</span><span class="x"> </span><span class="n">textapi</span><span class="o">.</span><span class="n">SentimentResponse</span><span class="p">{},</span><span class="x"> </span><span class="n">SentimentAnalysisErrorBackend</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// return response</span><span class="x">
	</span><span class="k">return</span><span class="x"> </span><span class="o">*</span><span class="n">sentiment</span><span class="p">,</span><span class="x"> </span><span class="no">nil</span><span class="x">

</span><span class="p">}</span><span class="x">

</span><span class="c">// handle request</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">main</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="c">// handle request</span><span class="x">
	</span><span class="n">lambda</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">SentimentAnalysisOverRequest</span><span class="p">)</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<h4 id="57-setup-api-gateway">5/7 Setup API Gateway</h4>
<p>First, you need to create an API Endpoint. This is simple, you have to go <a href="https://console.aws.amazon.com/apigateway/">here</a> and click on “Create API” button.</p>

<p align="center"><img src="http://image.ibb.co/ht88im/aws_api.png" style="width: 100%; marker-top: -10px;" /></p>

<p>After that, you have to create a Resource clicking on the action menu and specifying your api endpoint. Then click on “Create Resource”.</p>

<p align="center"><img src="http://image.ibb.co/dZzW3m/aws_resource.png" style="width: 100%; marker-top: -10px;" /></p>

<p>You can now create your “Action Method”: as integration type choose “Lambda Function”, then specify the region you deployed your lambda and the Lambda function (it should appear).</p>

<p align="center"><img src="http://image.ibb.co/bBzTG6/aws_method.png" style="width: 100%; marker-top: -10px;" /></p>

<p>When you will click on create, a popup will appear to warn you that the action will setup the execution role for the API Gateway service - don’t remember exactly the step, eventually you can create your onw policy for API Gateway following the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/getting-started-with-lambda-integration.html">Build an API Gateway API with Lambda Integration</a> tutorial.</p>

<p>After that, I strongly suggest you to set up an api key and a usage plan to your api - it’s really simple, from the left menu shown the Create-API-focused-image you can do that. This is to prevent consume your API from stranger (they will be available over the Internet).</p>

<h4 id="67-fill-you-elasticsearch">6/7 Fill you Elasticsearch</h4>
<p>Ok, now it’s time to fill your elasticsearch of news. I will assume you have a dump of the news about the topic you want to sentimentanalyze in a json file called <code class="highlighter-rouge">"localDump.json"</code>. If you don’t have, you can cUrl like a PRO and dump to file. Then, I used Python to build a reasonable index of fake data - of course, you have to call your AWS Lambda function, to <em>sentiment</em> (nice, the new <em>to sentiment</em> expression, or not?!) your news but I’m poor, and I didn’t want to make DOS Attack to my own VPC. I simulate because of money lack: I’m afraid of Amazon.</p>

<figure class="highlight"><pre><code class="language-py" data-lang="py"><span class="n">polarity</span>     <span class="o">=</span> <span class="p">[</span><span class="s">"neutral"</span><span class="p">,</span> <span class="s">"neutral"</span><span class="p">,</span> <span class="s">"negative"</span><span class="p">]</span>
<span class="n">subjectivity</span> <span class="o">=</span> <span class="p">[</span><span class="s">"subjective"</span><span class="p">,</span> <span class="s">"objective"</span><span class="p">]</span>

<span class="c"># read dump</span>
<span class="n">localSource</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">"localDump.json"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">))</span>

<span class="n">newsCleaned</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">newsHashing</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c"># local cleaning</span>
<span class="k">for</span> <span class="n">news</span> <span class="ow">in</span> <span class="n">localSource</span><span class="p">:</span>

	<span class="k">if</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">news</span><span class="p">[</span><span class="s">"description"</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">newsHashing</span><span class="p">:</span>
		<span class="n">newsHashing</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">news</span><span class="p">[</span><span class="s">"description"</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">())</span>
		<span class="n">news</span><span class="p">[</span><span class="s">"id"</span><span class="p">]</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">news</span><span class="p">[</span><span class="s">"description"</span><span class="p">]</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">'utf-8'</span><span class="p">))</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
		<span class="n">newsCleaned</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">news</span><span class="p">)</span>

<span class="k">print</span> <span class="nb">len</span><span class="p">(</span><span class="n">localSource</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">newsCleaned</span><span class="p">)</span>

<span class="k">for</span> <span class="n">news</span> <span class="ow">in</span> <span class="n">newsCleaned</span><span class="p">:</span>
	<span class="n">news</span><span class="p">[</span><span class="s">"text"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"document"</span>
	<span class="n">news</span><span class="p">[</span><span class="s">"polarity"</span><span class="p">]</span> <span class="o">=</span> <span class="n">polarity</span><span class="p">[</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">polarity</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
	<span class="n">news</span><span class="p">[</span><span class="s">"subjectivity"</span><span class="p">]</span> <span class="o">=</span> <span class="n">subjectivity</span><span class="p">[</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">subjectivity</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
	<span class="n">news</span><span class="p">[</span><span class="s">"polarity_confidence"</span><span class="p">]</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
	<span class="n">news</span><span class="p">[</span><span class="s">"subjectivity_confidence"</span><span class="p">]</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"elasticReady.json"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="k">for</span> <span class="n">news</span> <span class="ow">in</span> <span class="n">newsCleaned</span><span class="p">:</span>
		<span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">"{</span><span class="se">\"</span><span class="s">index</span><span class="se">\"</span><span class="s">:{</span><span class="se">\"</span><span class="s">_id</span><span class="se">\"</span><span class="s">:</span><span class="se">\"</span><span class="s">"</span><span class="o">+</span><span class="n">news</span><span class="p">[</span><span class="s">"id"</span><span class="p">]</span><span class="o">+</span><span class="s">"</span><span class="se">\"</span><span class="s">}}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
		<span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">news</span><span class="p">)</span><span class="o">+</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span></code></pre></figure>

<p>What does this code do? It’s very simple: it loops over the dump of the news - don’t forget that the format of each news is the one defined by the <code class="highlighter-rouge">News</code> structure in the code of the first AWS Lambda function. In the first loop, duplicates are removed, if the paginated queries - look at the <code class="highlighter-rouge">Request</code> wrapper struct in the second AWS Lambda - have been returned. Then, it simulates a Sentiment evaluation query to the second AWS Lambda and a <em>merge</em> operation over dict key (the News object), with the informations that AWS Lambda currently returns: the polarity and subjectivity of the article, with relative confidences. In the end, a file is created with an identified - hash on the article extract - to be uploaded to Elasticsearh… how? With this unique call - (of course you have to run first a docker container / ec2 instance / any-kind-of Elasticsearch node). Locally:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">curl <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-XPOST</span> <span class="s2">"localhost:9200/news/sentimented/_bulk?pretty&amp;refresh"</span> <span class="nt">--data-binary</span> <span class="s2">"@elasticReady.json"</span></code></pre></figure>

<h4 id="77-setup-your-grafana-dashboard">7/7 Setup your Grafana Dashboard</h4>
<p>And this is the most exiting part: with grafana you can setup Elasticsearch as Datasource (don’t need to explain this, simply fill the host field). Then, playing with some graphs and lucene queries / aggregation, you can create for instance an Heat map that shows how much bad or good are the feedback of the topic you are looking for. You can discover who is the top influencer in term of <em>how much it talks about the topic</em>, or simply show the number of neutral / negative feedback from highlights and setup an alarm if they reach a huge number - this is only an idea. Look at my Grafana dashboard ^^</p>

<p align="center"><img src="http://image.ibb.co/ebriG6/grafana_sentiment.png" style="width: 100%; marker-top: -10px;" /></p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:lambda">
      <p>You can find more information <a href="https://aws.amazon.com/lambda/?nc1=h_ls">here</a>&nbsp;<a href="#fnref:lambda" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/aws-lambda</wp:post_id>
        <wp:post_date>2018-01-30T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-01-30T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="aws"><![CDATA["aws",]]></category>
        
          <category domain="post_tag" nicename="lambda"><![CDATA["lambda",]]></category>
        
          <category domain="post_tag" nicename="golang"><![CDATA["golang",]]></category>
        
          <category domain="post_tag" nicename="grafana"><![CDATA["grafana",]]></category>
        
          <category domain="post_tag" nicename="sentiment"><![CDATA["sentiment",]]></category>
        
          <category domain="post_tag" nicename="analysis"><![CDATA["analysis"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[A journey through the network - Layer 2]]></title>
        <link>made2591.github.io/posts/network-layers-2</link>
        <pubDate>2018-01-25T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="a-journey-through-the-network---layer-2">A journey through the network - Layer 2</h3>
<p>A month ago I started to wrote some posts about the network. For those who missed the previous posts, <a href="https://made2591.github.io/posts/network-layers-0">the introduction</a> and <a href="https://made2591.github.io/posts/network-layers-0">the physycal layer</a>. For the previous post I had to go into details about how some parts of the physical layer work but, by going forward with the layers, concepts belonging to separate historical standards - OSI and IP - will intertwine and this entails some troubles from a <em>logical</em> point of view. I will try, as far as possible, to keep only the basic concepts of this layer: I also remember that this layer, together with the physical layer, are - at least in part - joined together in what is called the network access layer in the TCP / IP model.
As a main source I use <a href="https://www.amazon.it/gp/product/9332518742/ref=oh_aui_detailpage_o01_s00?ie=UTF8&amp;psc=1">Computer Networks</a> and <a href="https://www.amazon.it/gp/product/9332535957/ref=oh_aui_detailpage_o02_s00?ie=UTF8&amp;psc=1">TCP/IP Illustrated</a>. In this article, I will talk about layer 1, the data link layer in the ISO / OSI stack. Enjoy the reading!</p>

<p align="center"><img src="https://cdn.ttgtmedia.com/visuals/handbooks/networking/hb_background-networking_3_ehandbook_tablet_horizontal_732X489.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="introduction">Introduction</h3>
<p>The data link layer uses the services of the physical layer to send and receive bits over communication channels: there are several algorithms for achieving reliable, efficient communication of whole units of frames (or grouped bits - no more individual as in the previous layer) between two adjacent machines. What does it means adjacent? It means that the two machines are connected by a <em>communication channel that acts conceptually like a wire</em>, so that the bits are delivered in exactly the same order in which they are sent. Even if it might be simple, channels make errors, connections pass throught several machines, routers, etc… it’s complicated. Let’s start from the goals.</p>

<h4 id="goals">Goals</h4>
<ul>
  <li>Providing a well-defined service interface to the network layer;</li>
  <li>Dealing with transmission errors;</li>
  <li>Regulating the flow of data so that slow receivers can comunicate with fast senders;</li>
</ul>

<p>To guarantee this functionalities, the data link layer takes the packets it gets from the network layer and encapsulates them into frames for transmission: each frame is composed by a frame header, a payload field for holding the packet, and a frame trailer. It’s really important to examine the principles of error control and flow control used in data link layer because they are used also by upper layers.</p>

<h4 id="offered-services">Offered services</h4>
<p>The data link layer can be designed to offer various services. Following the Computer Networks book by A. Tanembaum:</p>

<table>
  <thead>
    <tr>
      <th>Service</th>
      <th>Description</th>
      <th>Use</th>
      <th>Example(s)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Unacknowledged connectionless service</td>
      <td>Consists of having the source machine send independent frames to the destination machine without having the destination machine acknowledge them. If errors happen, there are no attempt to detect and recover them</td>
      <td>Appropriate when the error rate is very low, so recovery is left to higher layers, like real time traffic, voice</td>
      <td>Ethernet</td>
    </tr>
    <tr>
      <td>Acknowledged connectionless service</td>
      <td>There are still no logical connections used, but each frame sent is individually acknowledged. If it has not arrived within a specified time interval, it can be sent again</td>
      <td>This service is useful over unreliable channels, such as wireless systems</td>
      <td>802.11 (WiFi)</td>
    </tr>
    <tr>
      <td>Acknowledged connection-oriented service</td>
      <td>With this service, the source and destination machines establish a connection before any data are transferred</td>
      <td>Each frame sent over the connection is numbered, and the data link layer guarantees that each frame is sent exactly once, indeed received, in the right order</td>
      <td>Satellite Channel, Long-Distance Telephone Circuit</td>
    </tr>
  </tbody>
</table>

<p>When connection-oriented service is used, transfers go through three distinct phases. In the first phase, the connection is established by having both sides initialize variables and counters needed to keep track of which frames have been received and which ones have not. In the second phase, one or more frames are actually transmitted. In the third and final phase, the connection is released, freeing up the variables, buffers, and other resources used to maintain the connection.</p>

<h4 id="framing">Framing</h4>
<p>Physical layer provide some sort of redundancy / correction error codes to transport bits over the channel: but data are not guaranteed to be sent over super noisy channels, so data link layer divides the stream of bits in frame, and add to each of them a checksum - with predefined algorithm. When a frame arrives at the destination, the checksum is recomputed: if it wrong, it can handle the error, normally sending back an error. Let’s have a look at framing algorithms.</p>

<h5 id="algorithms">Algorithms</h5>
<ul>
  <li>Byte count: not used anymore, consists of of set the number of byte in a field inside the header. The problem is that even the count can be garbled by an errors, and even if the destination thanks to the checksum knows that the frame is broken, it can’t locate the correct start of the next frame.</li>
  <li>Flag bytes with <strong>byte stuffing</strong>: resynchronization is resolved using a flag byte that wraps a frame (both at the beginning and the ending). But what if the flag byte occurs in the data? One solution consists in escaping the flag byte with a an escape byte. What if the escape byte occurs? The escape byte is escaped. This scheme is a slight simplification of the one used in PPP (Point-to-Point Protocol).</li>
  <li>Flag bits with bit stuffing: framing can be also be done at the bit level. In the <strong>HDLC</strong> (High-level Data Link Control) protocol each frame begins and ends with a special bit pattern, 01111110 or 0x7E in hexadecimal. This pattern is a flag byte. Whenever the sender’s data link layer encounters five consecutive 1s in the data, it automatically stuffs a 0 bit into the outgoing bit stream. USB use this method, known as <strong>bit stuffing</strong>. When the receiver sees five consecutive incoming 1 bits, followed by a 0 bit, it automatically destuffs.</li>
  <li>Physical layer coding violations: this method consists in use redundancy signal (reversed) in physical layer to transport (indicate) the start and end of frames. It’s a code violation to delimit frames.</li>
</ul>

<p>A common pattern is to use a mix of these methods: for instance, Ethernet and 802.11 use a frame beginning with a well-defined pattern called a <strong>preamble</strong>. This pattern might be quite long (72 bits is typical for 802.11) to allow the receiver to prepare for an incoming packet. The preamble is then followed by a length (i.e., count) field in the header that is used to locate the end of the frame.</p>

<h4 id="about-errors">About errors</h4>
<p>There are two basic strategies for dealing with errorsb: both of them add redundant information to the data that is sent.</p>
<ul>
  <li>first strategy (using <strong>error-correcting codes</strong> or <strong>FEC</strong> - Forward Error Correction): include enough redundant information to enable the receiver to deduce what the transmitted data must have been.</li>
  <li>second strategy (using <strong>error-detecting codes</strong>): include enough redundant information to enable the receiver to deduce that an error has occurred.</li>
</ul>

<p>Of course the best way to handle error on channel like fiber is to retransmit (they are faster). FEC is used on noisy channels because retransmissions are just as likely to be in error as the first transmission.</p>

<h5 id="error-correcting-codes">Error-Correcting Codes</h5>
<p>These are the most famous error-correcting codes</p>
<ul>
  <li>Hamming codes</li>
  <li>Binary convolutional codes</li>
  <li>Reed-Solomon codes</li>
  <li>Low-Density Parity Check codes</li>
</ul>

<p>Before going on with details of each methods, let define a frame:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A frame consists of m data (i.e., message) bits and r redundant (i.e. check) bits.
</code></pre></div></div>

<p>There are several ways to compute r codes:
<strong>block code</strong>: the r check bits are computed solely as a function of the m data bits with which they are associated, as though the m bits were looked up in a large table to find their corresponding r check bits.
<strong>systematic code</strong>: the m data bits are sent directly, along with the check bits, rather than being encoded themselves be- fore they are sent. 
<strong>linear code</strong>: the r check bits are computed as a linear function - XOR or modulo 2 addition is a popular choice - of the m data bits.</p>

<p>Let the total length of a block be <script type="math/tex">n</script> (i.e., <script type="math/tex">n = m + r</script>) - the <script type="math/tex">(n, m)</script> code. An <script type="math/tex">n</script>-bit unit containing data and check bits is referred to as an <script type="math/tex">n</script>-bit codeword. The <strong>code rate</strong>, or simply rate, is the fraction of the codeword that carries information that is not redundant, or <script type="math/tex">m/n</script>. The rates used in practice vary widely. They might be 1/2 for a noisy channel, in which case half of the received information is redundant, or close to 1 for a high-quality channel, with only a small number of check bits added to a large message. Ok, but why codewords?</p>

<p>The number of bit positions in which two codewords differ is called the Hamming distance, and it is computed using the XOR of the two codewords and count the number of 1 bits in the result. Its significance is that if two codewords are a Hamming distance <script type="math/tex">d</script> apart, it will require d single-bit errors to convert one into the other. Example: you need to design a code with <script type="math/tex">m</script> message bits and <script type="math/tex">r</script> check bits that will allow all single errors to be corrected. Each of the <script type="math/tex">2^m</script> legal messages has <script type="math/tex">n</script> illegal codewords at a distance of $1$ from it: each of them is formed by inverting each of the <script type="math/tex">n</script> bits in the <script type="math/tex">n</script>-bit codeword formed from it. Each of the <script type="math/tex">2^m</script> legal messages requires <script type="math/tex">n + 1</script> bit patterns dedicated to it. Since the total number of bit patterns is <script type="math/tex">2^n</script>, we must have <script type="math/tex">(n + 1) 2^m \leq 2^n</script>. Using <script type="math/tex">n = m + r</script>, this requirement becomes <script type="math/tex">(m + r + 1) \leq 2^r</script>. Given <script type="math/tex">m</script>, this puts a lower limit on the number of check bits needed to correct single errors.</p>

<p><span style="color:#A04279; font-size: bold;"><strong>Hamming codes</strong></span> the bits of the codeword are numbered consecutively, starting with bit 1 at the left end, bit 2 to its immediate right, and so on. The bits that are powers of 2 (1, 2, 4, 8, 16, etc.) are check bits. The rest (3, 5, 6, 7, 9, etc.) are filled up with the m data bits. A bit is checked by just those check bits occurring in its expansion (e.g., bit 11 is checked by bits 1, 2, and 8). For more details over the other codes, look at chapter 4 of Tanembaum’s book.</p>

<h5 id="error-detecting-codes">Error-Detecting Codes</h5>
<p>There are three types of error-detecting codes:</p>
<ul>
  <li>parity codes</li>
  <li>checksums codes</li>
  <li>cyclic redundancy checks (CRCs), also known as a polynomial code, are based upon treating bit strings as representations of polynomials with coefficients of 0 and 1 only.</li>
</ul>

<h4 id="about-flow-controls">About flow controls</h4>
<p>When a node is transmitting to another node, even if the transmission is error free, the receiver may be unable to handle the frames as fast as they arrive and will lose some. To prevent this situation, two approaches are commonly used:</p>
<ul>
  <li><strong>Feedback-based flow control</strong>: the receiver sends back information to the sender giving it permission to send more data, or at least telling the sender how the receiver is doing.</li>
  <li><strong>Rate-based flow control</strong>: the protocol has a built-in mechanism that limits the rate at which senders may transmit data, without using feedback from the receiver. This scheme is part of the transport layer.</li>
</ul>

<h3 id="conclusion">Conclusion</h3>
<p>I don’t want to go in details on sliding windows and MAC Protocol, because they are at really low levels: in the next chapter I will talk more about the network layer, concerned to get packets from the source all the way to the destination. Getting to the destination may require making many hops at intermediate routers along the way. This function clearly contrasts with that of the data link layer, which has the more modest goal of just moving frames from one end of a wire to the other. Thus, the network layer is the lowest layer that deals with end-to-end transmission: further, when the source and destination are in different networks, new problems occur. It is up to the network layer to deal with them. In next post I will talk about this layer primarily using the TCP/IP book so focusing mainly on the Internet standard and <em>its</em> network layer protocol, IP.</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/network-layers-2</wp:post_id>
        <wp:post_date>2018-01-25T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-01-25T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="network"><![CDATA["network",]]></category>
        
          <category domain="post_tag" nicename="iso-osi"><![CDATA["iso/osi",]]></category>
        
          <category domain="post_tag" nicename="tcp-ip"><![CDATA["tcp/ip",]]></category>
        
          <category domain="post_tag" nicename="saga"><![CDATA["saga"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[GoLang vs Python: deep dive into the concurrency]]></title>
        <link>made2591.github.io/posts/go-py-benchmark</link>
        <pubDate>2018-01-17T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>In the last months, I worked a lot with GoLang on several projects. Although I’m certainly not an expert, there are several things that I really appreciate about this language: first, it has a clear and simple syntax, and more than once I noticed that the style of the Github developers is very close to the style used in old C programs. From a theoretical point of view, GoLang seems to take the best of all worlds: there is the power of high-level languages, made simple by clear rules - even if sometime they are a little bit binding - that can impose a solid logic to the code. There is the simplicity of the imperative style, made of primitive types with the size in bits in their name, but without the boredom of manipulating strings as array of characters. However, two really useful and interesting features in my opinion are the goroutine and the channels.</p>

<p align="center"><img src="https://ksr-ugc.imgix.net/assets/013/579/935/cd53c61559974d1fa22a094ecff1f8a3_original.jpg?crop=faces&amp;w=1552&amp;h=873&amp;fit=crop&amp;v=1472824649&amp;auto=format&amp;q=92&amp;s=e7e49d2e6d5bcf4ef3a486facef11cc3" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="preamble">Preamble</h3>
<p>To understand why GoLang handles concurrency better, you first need to know what concurrency exactly<sup id="fnref:talk"><a href="#fn:talk" class="footnote">1</a></sup> is. Concurrency is the composition of independently executing computations: better, is a way to write clean code that interacts well with the real world. Often people confuse the concept of concurrency with the concept of parallelism, even if concurrency <script type="math/tex">\neq</script> parallelism: yes, although it <em>enables</em> parallelism. So, if you have only one processor, your program can still be concurrent but it cannot be parallel. On the other hand, a well-written concurrent program might run efficiently in parallel on a multiprocessor<sup id="fnref:rob"><a href="#fn:rob" class="footnote">2</a></sup>. That property could be important.
Let’s talk about how GoLang let your program takes advantage of running in a multiprocessor/multithreaded environment, or, <em>what tools GoLang provides to write concurrent program</em> because it’s not about thread or core: it’s all about routine.</p>

<h4 id="goroutine">Goroutine</h4>
<p>Suppose we have a function call <code class="highlighter-rouge">f(s)</code>: this is how we would call that in the usual way, running it <em>synchronously</em>. To invoke this function in a <code class="highlighter-rouge">goroutine</code>, use <code class="highlighter-rouge">go f(s)</code>. This new goroutine will execute <em>concurrently</em> with the calling one. But… what is a goroutine? It’s an independently executing function, launched by a <code class="highlighter-rouge">go</code> statement. It has its own call stack, which grows and shrinks as required and it’s very cheap. It’s practical to have thousands, even hundreds of thousands of goroutines, but it’s not a thread. In fact, there might be only one thread in a program with thousands of goroutines. Instead, <em>goroutines are multiplexed dynamically onto threads as needed to keep all the goroutines running</em>. If you think of it as a very cheap thread, you won’t be far off.</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span><span class="x"> </span><span class="n">main</span><span class="x">

</span><span class="k">import</span><span class="x"> </span><span class="s">"fmt"</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="n">f</span><span class="p">(</span><span class="n">from</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="m">3</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">from</span><span class="p">,</span><span class="x"> </span><span class="s">":"</span><span class="p">,</span><span class="x"> </span><span class="n">i</span><span class="p">)</span><span class="x">
    </span><span class="p">}</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="n">main</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">

    </span><span class="c">// Suppose we have a function call `f(s)`. Here's how</span><span class="x">
    </span><span class="c">// we'd call that in the usual way, running it</span><span class="x">
    </span><span class="c">// synchronously.</span><span class="x">
    </span><span class="n">f</span><span class="p">(</span><span class="s">"direct"</span><span class="p">)</span><span class="x">

    </span><span class="c">// To invoke this function in a goroutine, use</span><span class="x">
    </span><span class="c">// `go f(s)`. This new goroutine will execute</span><span class="x">
    </span><span class="c">// concurrently with the calling one.</span><span class="x">
    </span><span class="k">go</span><span class="x"> </span><span class="n">f</span><span class="p">(</span><span class="s">"goroutine"</span><span class="p">)</span><span class="x">

    </span><span class="c">// You can also start a goroutine for an anonymous</span><span class="x">
    </span><span class="c">// function call.</span><span class="x">
    </span><span class="k">go</span><span class="x"> </span><span class="k">func</span><span class="p">(</span><span class="n">msg</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="x">
    </span><span class="p">}(</span><span class="s">"going"</span><span class="p">)</span><span class="x">

    </span><span class="c">// Our two function calls are running asynchronously in</span><span class="x">
    </span><span class="c">// separate goroutines now, so execution falls through</span><span class="x">
    </span><span class="c">// to here. This `Scanln` code requires we press a key</span><span class="x">
    </span><span class="c">// before the program exits.</span><span class="x">
    </span><span class="k">var</span><span class="x"> </span><span class="n">input</span><span class="x"> </span><span class="kt">string</span><span class="x">
    </span><span class="n">fmt</span><span class="o">.</span><span class="n">Scanln</span><span class="p">(</span><span class="o">&amp;</span><span class="n">input</span><span class="p">)</span><span class="x">
    </span><span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"done"</span><span class="p">)</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<h5 id="more-in-details">More in details<sup id="fnref:docr"><a href="#fn:docr" class="footnote">3</a></sup></h5>
<p>As I said, the idea behind the coroutine is to multiplex <strong>independently executing functions</strong> — coroutines — onto a set of threads. When a coroutine blocks, such as by calling a blocking system call, the <strong>run-time automatically moves other coroutines on the same operating system thread to a different, runnable thread</strong> so they won’t be blocked. These coroutine are called <strong>goroutines</strong> and are very cheap: they have little overhead beyond the memory for the stack, which is just a few kilobytes. Further, to make the stacks small, Go’s run-time uses resizable, bounded stacks. A newly minted goroutine is given a few kilobytes, which is almost always enough. When it isn’t, the run-time grows (and shrinks) the memory for storing the stack automatically, allowing many goroutines to live in a modest amount of memory. The CPU overhead averages about three cheap instructions per function call, and that the reason why it’s so practical to create hundreds of thousands of goroutines in the same address space. If goroutines were just threads, system resources would run out at a much smaller number.</p>

<p>Ok, really cool but…why!?!? Why do we write concurrent program?! To do our jobs faster (even if writing correct concurrent program could take you more time than the amount of time you would gain running your task in a parallel environment XD). A tipical threaded situation includes a main thread that allocates some shared memory and stores its location in <code class="highlighter-rouge">p</code>; than main thread starts <script type="math/tex">n</script> worker threads, passing the pointer <code class="highlighter-rouge">p</code> to them and the workers can use <code class="highlighter-rouge">p</code> and work on the data pointed to by <code class="highlighter-rouge">p</code>. But what if threads start updating the same memory address - I mean, this is one of the hardest point of computer science. Ok, let’s keep it simple: from <em>the-operating-system-point-of-view</em>, some atomic system calls let you lock the access to a <code class="highlighter-rouge">shared memory</code> zone (I’m talking about semaphores, messages queues, locks, etc). From the <em>language-poin-of-view</em>, there are normally a set of primitive that - in the end - call the required system calls and let you sync the access to a shared memory zone (I’m talking about packages like multiprocessing, multithreading, pools, etc). Let’s talk about a tool of GoLang that help you deal with concurrency comunication between goroutine: the channels.</p>

<h4 id="channels">Channels</h4>
<p>Channels are a typed conduit through which you can send and receive values with the channel operator <code class="highlighter-rouge">&lt;-</code>. And that’s all :D You only need to know that when a <em>main</em> function executes <code class="highlighter-rouge">&lt;–c</code>, it will wait for a value to be sent. Similarly, when the <em>goroutined</em> function executes <code class="highlighter-rouge">c &lt;– value</code>, it waits for a receiver to be ready. A sender and receiver must both be ready to play their part in the communication. Otherwise we wait until they are: you don’t have to deal with semaphores, locks, etc: channels <strong>both communicate and synchronize</strong>. This is really important to remember and understand, and also one of the biggest difference between GoLang and other languages I know.</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">package</span><span class="x"> </span><span class="n">main</span><span class="x">

</span><span class="k">import</span><span class="x"> </span><span class="s">"fmt"</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="n">sum</span><span class="p">(</span><span class="n">s</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">,</span><span class="x"> </span><span class="n">c</span><span class="x"> </span><span class="k">chan</span><span class="x"> </span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">sum</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">v</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="k">range</span><span class="x"> </span><span class="n">s</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">sum</span><span class="x"> </span><span class="o">+=</span><span class="x"> </span><span class="n">v</span><span class="x">
	</span><span class="p">}</span><span class="x">
	</span><span class="n">c</span><span class="x"> </span><span class="o">&lt;-</span><span class="x"> </span><span class="n">sum</span><span class="x"> </span><span class="c">// send sum to c</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="n">main</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">s</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">7</span><span class="p">,</span><span class="x"> </span><span class="m">2</span><span class="p">,</span><span class="x"> </span><span class="m">8</span><span class="p">,</span><span class="x"> </span><span class="o">-</span><span class="m">9</span><span class="p">,</span><span class="x"> </span><span class="m">4</span><span class="p">,</span><span class="x"> </span><span class="m">0</span><span class="p">}</span><span class="x">

	</span><span class="n">c</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="nb">make</span><span class="p">(</span><span class="k">chan</span><span class="x"> </span><span class="kt">int</span><span class="p">)</span><span class="x">
	</span><span class="k">go</span><span class="x"> </span><span class="n">sum</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="o">:</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">/</span><span class="m">2</span><span class="p">],</span><span class="x"> </span><span class="n">c</span><span class="p">)</span><span class="x">
	</span><span class="k">go</span><span class="x"> </span><span class="n">sum</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">/</span><span class="m">2</span><span class="o">:</span><span class="p">],</span><span class="x"> </span><span class="n">c</span><span class="p">)</span><span class="x">
	</span><span class="n">x</span><span class="p">,</span><span class="x"> </span><span class="n">y</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="o">&lt;-</span><span class="n">c</span><span class="p">,</span><span class="x"> </span><span class="o">&lt;-</span><span class="n">c</span><span class="x"> </span><span class="c">// receive from c</span><span class="x">

	</span><span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="x"> </span><span class="n">y</span><span class="p">,</span><span class="x"> </span><span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">)</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<h5 id="more-in-details-1">More in details<sup id="fnref:docc"><a href="#fn:docc" class="footnote">4</a></sup></h5>
<p>As official documentation states, a channel <em>provides a mechanism for concurrently executing functions to communicate by sending and receiving values of a specified element type</em>. It’s - quite - simple. What I didn’t say yet, is that a channel as a type, different from the type of messages it admits:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ChannelType = ( "chan" | "chan" "&lt;-" | "&lt;-" "chan" ) ElementType
</code></pre></div></div>

<p>The optional <code class="highlighter-rouge">&lt;-</code> operator specifies the channel direction, send or receive. If no direction is given, the channel is bidirectional. A channel may be constrained only to send or only to receive by conversion or assignment.</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="x">    
    </span><span class="k">chan</span><span class="x"> </span><span class="n">T</span><span class="x">          </span><span class="c">// can be used to send and receive values of type T</span><span class="x">
    </span><span class="k">chan</span><span class="o">&lt;-</span><span class="x"> </span><span class="kt">float64</span><span class="x">  </span><span class="c">// can only be used to send float64s</span><span class="x">
    </span><span class="o">&lt;-</span><span class="k">chan</span><span class="x"> </span><span class="kt">int</span><span class="x">      </span><span class="c">// can only be used to receive ints</span></code></pre></figure>

<p>To help you in solving some particular sync problems, you can also create a <code class="highlighter-rouge">buffered channel</code>, using the function make (<code class="highlighter-rouge">make(chan int, 100)</code>). The capacity, in number of elements, sets the size of the buffer in the channel. If the capacity is zero or absent, the channel is unbuffered and communication succeeds only when both a sender and receiver are ready. Otherwise, the channel is buffered and communication succeeds without blocking if the buffer is not full (sends) or not empty (receives). A nil channel is never ready for communication: I found out that by using a buffered channel you can implicit set the maximum number of go routine to have at runtime and this will be really usefull for my benchmark.</p>

<h4 id="summary">Summary</h4>
<p>To summarize, you can call a function - even anonymous - in a goroutine. Then put the result in a channel and, by default, sends and receives block until the other side is ready. All these features <em>allows goroutines to synchronize without explicit locks or condition variables</em>. Ok but… how do they perform?</p>

<h3 id="golang-vs-python">GoLang vs Python</h3>
<p>Ok, I’m a Python lover - I guess, because it’s in the title and I don’t remember where the .md respective source is - so I decided to make a comparision to see how these magical GoLang tricky statements really perform. To do that, I wrote a simple go-py program (<a href="https://github.com/made2591/go-py-benchmark">here</a> the code) that completes the merge sort over a list of random integers and can be run in a single-core environment or multicore environment. Or, in a single-_routine_ or multi-_routine_ environment: this is because, as I said, go-routine is a - unavailable in Python - concept that goes more in depth than thread - remember that more than one go-routine could belong to one single thread. Instead, from a Python point of you, you only can work with process, threads and also semaphores, locks, rlocks and so on but it’s impossible to reproduce exactly the same computation - I mean, this is normal, they are different languages but both of them in the end call a set of system calls. In any case, I think that what you can do when you are running this kind of concurrency experiments is to reproduce a computation <em>as much as possible</em> logically equivalent. Let’s start from the GoLang version.</p>

<h4 id="golang-merge-sort">GoLang Merge Sort</h4>
<p>Both GoLang and Python version of program provide two function:</p>
<ul>
  <li>Single <em>routine</em>;</li>
  <li>Multiple <em>prefixed number of routine</em>;</li>
</ul>

<h5 id="simple-go-version">Simple Go Version</h5>
<p>Ok, I will not talk too much about single routine methods: it’s really simple. Below you can see the code of the most optimized version I was able to think about (in terms of io operations, etc) - the commented version on <a href="https://github.com/made2591/go-py-benchmark/blob/master/main.go">Github</a>:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="k">func</span><span class="x"> </span><span class="n">msort_sort</span><span class="p">(</span><span class="n">a</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="x"> </span><span class="o">&lt;=</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="k">return</span><span class="x"> </span><span class="n">a</span><span class="x">
    </span><span class="p">}</span><span class="x">
    </span><span class="n">m</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="kt">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">Floor</span><span class="p">(</span><span class="kt">float64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">))</span><span class="x"> </span><span class="o">/</span><span class="x"> </span><span class="m">2</span><span class="p">))</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">msort_merge</span><span class="p">(</span><span class="n">msort_sort</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="m">0</span><span class="o">:</span><span class="n">m</span><span class="p">]),</span><span class="x"> </span><span class="n">msort_sort</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">m</span><span class="o">:</span><span class="p">]))</span><span class="x">
</span><span class="p">}</span><span class="x">

</span><span class="k">func</span><span class="x"> </span><span class="n">msort_merge</span><span class="p">(</span><span class="n">l</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">,</span><span class="x"> </span><span class="n">r</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="x"> </span><span class="p">{</span><span class="x">
    </span><span class="n">a</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">{}</span><span class="x">
    </span><span class="k">for</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="o">||</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="p">{</span><span class="x">
            </span><span class="n">a</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="nb">append</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="x"> </span><span class="n">r</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">])</span><span class="x">
            </span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">
                </span><span class="n">r</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">r</span><span class="p">[</span><span class="o">:</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="x">
            </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
                </span><span class="n">r</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">{}</span><span class="x">
            </span><span class="p">}</span><span class="x">
        </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
            </span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="o">||</span><span class="x"> </span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="n">r</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">])</span><span class="x"> </span><span class="p">{</span><span class="x">
                </span><span class="n">a</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="nb">append</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="x"> </span><span class="n">l</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">])</span><span class="x">
                </span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">
                    </span><span class="n">l</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">l</span><span class="p">[</span><span class="o">:</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="x">
                </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
                    </span><span class="n">l</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">{}</span><span class="x">
                </span><span class="p">}</span><span class="x">
            </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
                </span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="p">{</span><span class="x">
                    </span><span class="n">a</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="nb">append</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="x"> </span><span class="n">r</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">])</span><span class="x">
                    </span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">
                        </span><span class="n">r</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">r</span><span class="p">[</span><span class="o">:</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="x">
                    </span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
                        </span><span class="n">r</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">{}</span><span class="x">
                    </span><span class="p">}</span><span class="x">
                </span><span class="p">}</span><span class="x">
            </span><span class="p">}</span><span class="x">
        </span><span class="p">}</span><span class="x">
    </span><span class="p">}</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">reverse</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p>I don’t think it needs explanation: if you have any questions, don’t hesitate write me in the comments! I will answer as soon as possible.</p>

<h5 id="concurrent-go-version">Concurrent Go Version</h5>
<p>Let’s talk about the <strong>concurrent version</strong>. We could split the array and call go sub routine from the main routine, but how can we control the maximum number of concurrent go-routine - or workers - to run? Well, one way<sup id="fnref:s1"><a href="#fn:s1" class="footnote">5</a></sup> to limit concurrency in Go is by using a buffered channel (semaphore). As I said, when you create a channel with a fixed dimension - or buffered - communication succeeds without blocking if the buffer is not full (sends) or not empty (receives), so you can implements a <em>semaphore</em> to easily block execution based on the number of concurrent units of actions you want to have. Really cool but… there is a problem: a channel is a channel, and even if buffered, basic sends and receives on channels are <code class="highlighter-rouge">blocking</code>. 
Fortunately, GoLang is simply awesome and let you create <strong>explicit non-blocking channels</strong>, using the <code class="highlighter-rouge">select</code> statement<sup id="fnref:nbcs"><a href="#fn:nbcs" class="footnote">6</a></sup>: thus, you can use the select with default clause to implement non-blocking sends, receives, and even non-blocking multi-way selects. There are some others few statement to explain, after my <em>prefixed-maximum-number-of-concurrent-goroutine</em> version of merge sort:</p>

<figure class="highlight"><pre><code class="language-go" data-lang="go"><span class="c">// Returns the result of a merge sort - the sort part - over the passed list</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">merge_sort_multi</span><span class="p">(</span><span class="n">s</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">,</span><span class="x"> </span><span class="n">sem</span><span class="x"> </span><span class="k">chan</span><span class="x"> </span><span class="k">struct</span><span class="p">{})</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="x"> </span><span class="p">{</span><span class="x">

    </span><span class="c">// return ordered 1 element array</span><span class="x">
    </span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="x"> </span><span class="o">&lt;=</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="k">return</span><span class="x"> </span><span class="n">s</span><span class="x">
    </span><span class="p">}</span><span class="x">

    </span><span class="c">// split length</span><span class="x">
    </span><span class="n">n</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="x"> </span><span class="o">/</span><span class="x"> </span><span class="m">2</span><span class="x">

    </span><span class="c">// create a wait group to wait for both goroutine call before final merge step</span><span class="x">
    </span><span class="n">wg</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="n">sync</span><span class="o">.</span><span class="n">WaitGroup</span><span class="p">{}</span><span class="x">
    </span><span class="n">wg</span><span class="o">.</span><span class="n">Add</span><span class="p">(</span><span class="m">2</span><span class="p">)</span><span class="x">

    </span><span class="c">// result of goroutine</span><span class="x">
    </span><span class="k">var</span><span class="x"> </span><span class="n">l</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="x">
    </span><span class="k">var</span><span class="x"> </span><span class="n">r</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="x">

    </span><span class="c">// check if passed buffered channel is full</span><span class="x">
    </span><span class="k">select</span><span class="x"> </span><span class="p">{</span><span class="x">

    </span><span class="c">// check if you can acquire a slot</span><span class="x">
    </span><span class="k">case</span><span class="x"> </span><span class="n">sem</span><span class="x"> </span><span class="o">&lt;-</span><span class="x"> </span><span class="k">struct</span><span class="p">{}{}</span><span class="o">:</span><span class="x">

        </span><span class="c">// call another goroutine worker over the first half</span><span class="x">
        </span><span class="k">go</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
            </span><span class="n">l</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">merge_sort_multi</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="o">:</span><span class="n">n</span><span class="p">],</span><span class="x"> </span><span class="n">sem</span><span class="p">)</span><span class="x">

            </span><span class="c">// free a slot</span><span class="x">
            </span><span class="o">&lt;-</span><span class="n">sem</span><span class="x">

            </span><span class="c">// unlock one semaphore</span><span class="x">
            </span><span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="x">
        </span><span class="p">}()</span><span class="x">
    </span><span class="k">default</span><span class="o">:</span><span class="x">
        </span><span class="n">l</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">msort_sort</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="o">:</span><span class="n">n</span><span class="p">])</span><span class="x">
        </span><span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="x">
    </span><span class="p">}</span><span class="x">

    </span><span class="c">// the same over the second half</span><span class="x">
    </span><span class="k">select</span><span class="x"> </span><span class="p">{</span><span class="x">
        </span><span class="k">case</span><span class="x"> </span><span class="n">sem</span><span class="x"> </span><span class="o">&lt;-</span><span class="x"> </span><span class="k">struct</span><span class="p">{}{}</span><span class="o">:</span><span class="x">
            </span><span class="k">go</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
                </span><span class="n">r</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">merge_sort_multi</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">n</span><span class="o">:</span><span class="p">],</span><span class="x"> </span><span class="n">sem</span><span class="p">)</span><span class="x">
                </span><span class="o">&lt;-</span><span class="n">sem</span><span class="x">
                </span><span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="x">
            </span><span class="p">}()</span><span class="x">
        </span><span class="k">default</span><span class="o">:</span><span class="x">
            </span><span class="n">r</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">msort_sort</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">n</span><span class="o">:</span><span class="p">])</span><span class="x">
            </span><span class="n">wg</span><span class="o">.</span><span class="n">Done</span><span class="p">()</span><span class="x">
    </span><span class="p">}</span><span class="x">

    </span><span class="c">// wait for go subroutine</span><span class="x">
    </span><span class="n">wg</span><span class="o">.</span><span class="n">Wait</span><span class="p">()</span><span class="x">

    </span><span class="c">// return</span><span class="x">
    </span><span class="k">return</span><span class="x"> </span><span class="n">msort_merge</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="x"> </span><span class="n">r</span><span class="p">)</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>As you can see, in my default select action, I wrote a call to the single-routined version of merge sort. However, there is another interesting tool in the code: it is the <code class="highlighter-rouge">WaitGroup</code> object provided by the sync package. From the official documentations<sup id="fnref:wg"><a href="#fn:wg" class="footnote">7</a></sup>, a WaitGroup waits for a collection of goroutines to finish. The main goroutine calls <code class="highlighter-rouge">Add</code> to set the number of goroutines to wait for. Then each of the goroutines runs and calls <code class="highlighter-rouge">Done</code> when finished. At the same time, <code class="highlighter-rouge">Wait</code> can be used to block until all goroutines have finished.</p>

<h4 id="python-merge-sort">Python Merge Sort</h4>
<p>Ok, at this point, if you arrived here, I will be honest: I’m not a concurrency expert, actually I really hate concurrency, but writing this post and benchmarking GoLang channel learnt me a lot about this theme: the part of reproducing a computation <em>as much as possible</em> logically equivalent in Python was really - I mean, REALLY - difficult.</p>

<h5 id="simple-py-version">Simple Py Version</h5>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">msort_sort</span><span class="p">(</span><span class="n">array</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">array</span>
    <span class="n">left</span> <span class="o">=</span> <span class="n">array</span><span class="p">[:</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">]</span>
    <span class="n">right</span> <span class="o">=</span> <span class="n">array</span><span class="p">[</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">:]</span>
    <span class="k">return</span> <span class="n">msort_merge</span><span class="p">(</span><span class="n">msort_sort</span><span class="p">(</span><span class="n">left</span><span class="p">),</span> <span class="n">msort_sort</span><span class="p">(</span><span class="n">right</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">msort_merge</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
    <span class="n">left</span><span class="p">,</span> <span class="n">right</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">args</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">args</span>
    <span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">while</span> <span class="n">left</span> <span class="ow">or</span> <span class="n">right</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">left</span><span class="p">:</span>
            <span class="n">a</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">right</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
        <span class="k">elif</span> <span class="ow">not</span> <span class="n">right</span> <span class="ow">or</span> <span class="n">left</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">right</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="n">a</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">left</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">a</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">right</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
    <span class="n">a</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">a</span></code></pre></figure>

<h5 id="concurrent-py-version">Concurrent Py Version</h5>
<p>I had to think a lot about a concurrent version: first, I thought to use an array of Threads / Processes (later on this topic) and start / joining them but then… I realized this wouldn’t be so much equal to my concurrent GoLang version. First, because the call to more then one thread / process would be done <em>only once</em> over a partition of original data - to be merged in the end, eventually in a <em>concurrent way</em>: this is not exactly the behavior of my GoLang version, that call recursively a concurrent routine until the semaphore accept new concurrent routines - and in the end call a single-routined instance of the sorting method. So I thought “I simply can’t realize a multi-routined (threads or processes) of my merge sort in Python using a simple <em>one-shot</em> split method, because it is not <em>computationally</em> equivalent”. For this reason, the first thing I tried was to replice exactly the same behavior of <em>Channel</em> and <em>WaitGroup</em> using the semaphores primitive in Python - and after some days of work I got it. Let’s have a look at the code:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">merge_sort_parallel_golike</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">bufferedChannel</span><span class="p">,</span> <span class="n">results</span><span class="p">):</span>

    <span class="c"># if array length is 1, is ordered : return</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">array</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">array</span>

    <span class="c"># compute length</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">array</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>

    <span class="c"># append thread for subroutine</span>
    <span class="n">ts</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c"># try to acquire channel</span>
    <span class="k">if</span> <span class="n">bufferedChannel</span><span class="o">.</span><span class="n">acquire</span><span class="p">(</span><span class="n">blocking</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>

        <span class="c"># if yes, setup call on the first half</span>
        <span class="n">ts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">merge_sort_parallel_golike</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">array</span><span class="p">[:</span><span class="n">n</span><span class="p">],</span> <span class="n">bufferedChannel</span><span class="p">,</span> <span class="n">results</span><span class="p">,)))</span>

    <span class="k">else</span><span class="p">:</span>

        <span class="c"># else call directly the merge sort over the first halft</span>
        <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">msort_sort</span><span class="p">(</span><span class="n">array</span><span class="p">[:</span><span class="n">n</span><span class="p">]))</span>

    <span class="c"># the same, in the second half</span>
    <span class="k">if</span> <span class="n">bufferedChannel</span><span class="o">.</span><span class="n">acquire</span><span class="p">(</span><span class="n">blocking</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>

        <span class="n">ts</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">merge_sort_parallel_golike</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">n</span><span class="p">:],</span> <span class="n">bufferedChannel</span><span class="p">,</span> <span class="n">results</span><span class="p">,)))</span>

    <span class="k">else</span><span class="p">:</span>

        <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">msort_sort</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">n</span><span class="p">:]))</span>

    <span class="c"># start thread</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">ts</span><span class="p">:</span>
        <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

    <span class="c"># wait for finish</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">ts</span><span class="p">:</span>
        <span class="n">t</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>

    <span class="c"># append results</span>
    <span class="n">results</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">msort_merge</span><span class="p">(</span><span class="n">results</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">results</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)))</span>

    <span class="c"># unlock the semaphore for another threads for next call to merge_sort_parallel_golike</span>
    <span class="c"># try is to prevent arise of exception in the end</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">bufferedChannel</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    
    <span class="c"># manager to handle routine response</span>
    <span class="n">manager</span> <span class="o">=</span> <span class="n">Manager</span><span class="p">()</span> 
    <span class="n">responses</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="nb">list</span><span class="p">()</span>
    
    <span class="n">sem</span> <span class="o">=</span> <span class="n">BoundedSemaphore</span><span class="p">(</span><span class="n">routinesNumber</span><span class="p">)</span>
    <span class="n">merge_sort_parallel_golike</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">sem</span><span class="p">,</span> <span class="n">responses</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="n">responses</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></code></pre></figure>

<p>Ok, let’s start from manager. The <code class="highlighter-rouge">Manager</code> object initialized in the main provides a struct to put responses of call - more or less similar to a <code class="highlighter-rouge">Queue</code>. The <code class="highlighter-rouge">BoundedSemaphore</code> plays the role of the bounded channel semaphore I talked before. A semaphore is a lock mechanism more advanced that simple lock: it has an internal counter rather than a lock flag, and it only blocks if more than a given number of threads have attempted to hold the semaphore. Depending on how the semaphore is initialized, this allows multiple threads to access the same code section simultaneously: fortunately, you can <em>try</em> to acquire lock and go ahead in execution if you fail - this plays the <code class="highlighter-rouge">select</code> trick I mentioned before used in the GoLang version - by using the <code class="highlighter-rouge">blocking=False</code> parameter (<code class="highlighter-rouge">bufferedChannel.acquire(blocking=False)</code>). With <code class="highlighter-rouge">join</code> I emulated the behavior of the <code class="highlighter-rouge">WaitGroup</code>, because I thought it was the standard way to sync the two threads and wait for their end before proceeding with the final merge step. Any questions?</p>

<p>You are wondering <em>“How does this perform?!”</em> Ok, it SUCKS. I mean: a lot. So I try to search for something more efficient… and I found this - similar to the first solution I thought, but using the Pool object. The hell.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">merge_sort_parallel_fastest</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">concurrentRoutine</span><span class="p">,</span> <span class="n">threaded</span><span class="p">):</span>

    <span class="c"># create a pool of concurrent threaded or process routine</span>
    <span class="k">if</span> <span class="n">threaded</span><span class="p">:</span>
        <span class="n">pool</span> <span class="o">=</span> <span class="n">ThreadPool</span><span class="p">(</span><span class="n">concurrentRoutine</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">pool</span> <span class="o">=</span> <span class="n">Pool</span><span class="p">(</span><span class="n">concurrentRoutine</span><span class="p">)</span>

    <span class="c"># size of partitions</span>
    <span class="n">size</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">math</span><span class="o">.</span><span class="n">ceil</span><span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">array</span><span class="p">))</span> <span class="o">/</span> <span class="n">concurrentRoutine</span><span class="p">))</span>

    <span class="c"># partitioning</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">array</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">size</span><span class="p">:(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">size</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">concurrentRoutine</span><span class="p">)]</span>

    <span class="c"># mapping each partition to one worker, using the standard merge sort</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">pool</span><span class="o">.</span><span class="nb">map</span><span class="p">(</span><span class="n">msort_sort</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>

    <span class="c"># go ahead until the number of partition are reduced to one (workers end respective ordering job)</span>
    <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>

        <span class="c"># extra partition if there's a odd number of worker</span>
        <span class="n">extra</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="bp">None</span>

        <span class="c"># prepare couple of ordered partition for merging</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">[(</span><span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="mi">2</span><span class="p">)]</span>

        <span class="c"># use the same number of worker to merge partitions</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">pool</span><span class="o">.</span><span class="nb">map</span><span class="p">(</span><span class="n">msort_merge</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span> <span class="o">+</span> <span class="p">([</span><span class="n">extra</span><span class="p">]</span> <span class="k">if</span> <span class="n">extra</span> <span class="k">else</span> <span class="p">[])</span>

    <span class="c"># return result</span>
    <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span></code></pre></figure>

<p>And this perform better. The question is better using Threads or Processes? Well… look at my comparative graph!</p>

<p align="center"><img src="http://image.ibb.co/kHjz6w/mergesort.png" style="width: 100%; marker-top: -10px;" /></p>

<p>Ok, because Python version is not so good, this is a graph with only GoLang series:</p>

<p align="center"><img src="http://image.ibb.co/gG7VDb/gomerge.png" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="conclusion">Conclusion</h3>
<p>Python sucks. GoLang rulez. I’m sorry, Python: I loved you. The complete code is available here: <a href="https://made2591.github.io/posts/go-py-benchmark">go-py-benchmark</a>.</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:talk">
      <p>There are plenty of beautiful <a href="https://talks.golang.org/2012/concurrency.slide">slides</a> of a GoLang talk online!&nbsp;<a href="#fnref:talk" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:rob">
      <p>The lesson of <a href="https://vimeo.com/49718712">Rob Pike - Concurrency Is Not Parallelism</a>.&nbsp;<a href="#fnref:rob" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:docr">
      <p>Directly from the the official <a href="https://golang.org/doc/faq">FAQ</a> page.&nbsp;<a href="#fnref:docr" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:docc">
      <p>More info <a href="https://golang.org/ref/spec#Channel_types">here</a>.&nbsp;<a href="#fnref:docc" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:s1">
      <p>Source <a href="https://medium.com/@_orcaman/when-too-much-concurrency-slows-you-down-golang-9c144ca305a">here</a>&nbsp;<a href="#fnref:s1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:nbcs">
      <p>Have a look <a href="https://gobyexample.com/non-blocking-channel-operations">here</a>&nbsp;<a href="#fnref:nbcs" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:wg">
      <p>Here more about <a href="https://golang.org/pkg/sync/#WaitGroup">WaitGroup</a>&nbsp;<a href="#fnref:wg" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/go-py-benchmark</wp:post_id>
        <wp:post_date>2018-01-17T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-01-17T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="golang"><![CDATA["golang",]]></category>
        
          <category domain="post_tag" nicename="python"><![CDATA["python",]]></category>
        
          <category domain="post_tag" nicename="goroutine"><![CDATA["goroutine",]]></category>
        
          <category domain="post_tag" nicename="algorithms"><![CDATA["algorithms",]]></category>
        
          <category domain="post_tag" nicename="benchmark"><![CDATA["benchmark"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Elasticsearch over My home Network Attached Storage]]></title>
        <link>made2591.github.io/posts/elasticnas</link>
        <pubDate>2018-01-13T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="introduction">Introduction</h3>
<p>I always owned a lot of hard drives: I don’t know why, I always used and still use to look for space to save my data. In the years, I started using disks, then I assembled a HP Proliant to be a Synology Based System - I don’t want to go the cloud because I’m stupid - and… in the last week, I decided to make order in a huge amount of files. The first thing you have to do when you are handling terabytes and terabytes of <strong>both</strong> well-ordered <strong>and</strong> <em>no-ordered-at-all</em> data is literaly pray that someone else, like a magician, or druid comes to you with a magic wand and fixes all the mess for free, in a way you do not know but you will like.
This article is the right one if you don’t want to pray, you really don’t believe in miracle but you still need to order your stuff. I have done it using elastisearch and kibana!</p>

<p align="center"><img src="http://craigconnects.org/wp-content/uploads/W-S-files.jpg" style="width: 100%; marker-top: -10px;" /></p>

<p>In the next paragraphs, I will talk about how you can setup your envinroment locally, without losing too much time in configurations and start building what you need to explore your file systems.</p>

<h3 id="what-you-need-before-starting">What you need before starting</h3>
<p>Ok, here the ingredients to prepare the environment:</p>

<ul>
  <li>Elasticsearch: download available <a href="http://www.elastic.co/downloads/elasticsearch">here</a>;</li>
  <li>Kibana: download available <a href="https://www.elastic.co/downloads/kibana">here</a>;</li>
  <li>Python: actually, you don’t need this if you are an AWK expert 😎😎😎;</li>
  <li>Of course, a file system to explore;</li>
</ul>

<h3 id="recipe">Recipe</h3>
<p>To order your files, you first have to make some sort of statistics: Elasticsearch + Kibana can really help you in doing that. Of course, you also have to create data to explore your file systems, but this is really a simple task I will show in the end. First, let’s start with the core: Elasticsearch.</p>

<h4 id="step-1-run-elasticsearch">Step 1: run Elasticsearch</h4>
<p>Elasticsearch is a distributed, RESTful search and analytics engine capable of solving different <em>scenarios</em>: what do I mean? That it could be use to centrally store your data, let you <em>discover the expected</em> and <em>uncover the unexpected</em> - cit. This is perfect for my original purpose (make order in my file systems)! How can you install Elastisearch in a portable way? It’s really simple: using Docker OR… if you don’t use Docker - I mean, why!? - open a shell and do the following:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">curl <span class="nt">-L</span> <span class="nt">-O</span> https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.1.1.tar.gz
<span class="nb">tar</span> <span class="nt">-xvf</span> elasticsearch-6.1.1.tar.gz
<span class="nb">cd </span>elasticsearch-6.1.1/bin
./elasticsearch</code></pre></figure>

<p>If you’re running Elasticsearch on Windows, simply run <code class="highlighter-rouge">elasticsearch.bat</code> instead. If you are a mac user, you can also install Elasticsearch using <a href="https://brew.sh/index_it.html">Homebrew</a> by running <code class="highlighter-rouge">brew install elasticsearch</code> from your shell. In any case… congratulations, you are done<sup id="fnref:est"><a href="#fn:est" class="footnote">1</a></sup>! You can add -d if you want to run it in the background as a daemon - I would prefer a Docker container to create something always available. Let’s move one step forward.</p>

<h4 id="step-2-run-kibana">Step 2: run Kibana</h4>
<p>Kibana gives <em>shape</em> to your data and is the extensible user interface for configuring and managing all aspects of the Elastic Stack: it lets you visualize your Elasticsearch data and navigate them. The core ships with the classics histograms, line graphs, pie charts, sunbursts, and more. They leverage the full aggregation capabilities of Elasticsearch: it’s a really awesome tool. Again, how to install it?</p>

<p>For mac OS</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">curl <span class="nt">-O</span> https://artifacts.elastic.co/downloads/kibana/kibana-6.1.1-darwin-x86_64.tar.gz
shasum kibana-6.1.1-darwin-x86_64.tar.gz
<span class="nb">tar</span> <span class="nt">-xzf</span> kibana-6.1.1-darwin-x86_64.tar.gz
<span class="nb">cd </span>kibana-6.1.1-darwin-x86_64/</code></pre></figure>

<p>For linux 64bit</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.1.1-linux-x86_64.tar.gz
sha1sum kibana-6.1.1-linux-x86_64.tar.gz
<span class="nb">tar</span> <span class="nt">-xzf</span> kibana-6.1.1-linux-x86_64.tar.gz
<span class="nb">cd </span>kibana-6.1.1-linux-x86_64/</code></pre></figure>

<p>In any case<sup id="fnref:kt"><a href="#fn:kt" class="footnote">2</a></sup>, simply run Kibana with <code class="highlighter-rouge">./bin/kibana</code>. And… again, congratulations, you are done! If you point your browser to <a href="http://localhost:5601">http://localhost:5601</a> you should see the Kibana web console. Now that you have a running Elasticsearch core and a Kibana web console to look at your stack - cool, isn’t it? - let’s move to the most important part: how to generate data starting from the file systems to make some sort of analysis.</p>

<h4 id="step-3-gather-filesystem-informations">Step 3: gather filesystem informations</h4>
<p>For this step you can use whatever you want. I found inspiration by the output of the <code class="highlighter-rouge">ll -R</code> command, but I’m lazy so I decided to use Python instead. How can you explore the file systems efficiently? Well, it depends on your file systems type: Python offer quite efficient and ready to use library to walk directory recursively but… if you have to explore a file system from a network attached storage, striped on more than one physical devide, you could take advantage of multiprocessing. However, if your file system resides on a single physical device, is entirely possible that parallelizing the work will be slower than just doing the work in a single process. This is because IO on the hard disks - any techs - underlying your shared filesystem may be the bottleneck and attempting many disk reads in parallel could make them all slower, if the disks needs to seek more often rather than reading longer linear sections of data. Even if the IO is a little faster, the overhead of communicating between the processes could eat up all of the gains.</p>

<p>In any case, I created a <a href="https://github.com/made2591/python-multi-walker">repository</a> to share the few lines of code I used to create my data: using the method <code class="highlighter-rouge">os.stats</code> - more info <a href="https://docs.python.org/2/library/stat.html">here</a> - of Python standard lib, I created a script that log to a JSON file - named <code class="highlighter-rouge">files.json</code> - all info about each file in my file system. Each file is defined as a dict with this data:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
	</span><span class="s2">"name"</span><span class="p">:</span><span class="w">  </span><span class="err">filename</span><span class="p">,</span><span class="w">
	</span><span class="s2">"ext"</span><span class="p">:</span><span class="w">   </span><span class="err">ext</span><span class="p">,</span><span class="w">
	</span><span class="s2">"mode"</span><span class="p">:</span><span class="w">  </span><span class="err">stats</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="w">
	</span><span class="s2">"ino"</span><span class="p">:</span><span class="w">   </span><span class="err">stats</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="w">
	</span><span class="s2">"dev"</span><span class="p">:</span><span class="w">   </span><span class="err">stats</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="w">
	</span><span class="s2">"nlink"</span><span class="p">:</span><span class="w"> </span><span class="err">stats</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="w">
	</span><span class="s2">"uid"</span><span class="p">:</span><span class="w">   </span><span class="err">stats</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="w">
	</span><span class="s2">"gid"</span><span class="p">:</span><span class="w">   </span><span class="err">stats</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="w">
	</span><span class="s2">"size"</span><span class="p">:</span><span class="w">  </span><span class="err">stats</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="w">
	</span><span class="s2">"atime"</span><span class="p">:</span><span class="w"> </span><span class="err">stats</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="w">
	</span><span class="s2">"mtime"</span><span class="p">:</span><span class="w"> </span><span class="err">stats</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="w">
	</span><span class="s2">"ctime"</span><span class="p">:</span><span class="w"> </span><span class="err">stats</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>The stats for each file are extened with, of course, file name and extensions - even if filename (complete path) is sufficient, I wanted also a separated field with ext to create filters more easly later. You can call the explorer with a specific starting directory, with a custom number of processes - if you have a distributed file systems - and saving the output wherever you want.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">explorer</span><span class="p">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">"/"</span><span class="p">,</span> <span class="n">process</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">output</span> <span class="o">=</span> <span class="s">"files.json"</span><span class="p">)</span></code></pre></figure>

<p><strong>NOTE</strong>: you can of course play with AWK and print your JSON struct to a file with a single command - but again I’m lazy ok!? And I’m also working on layer 2 for my network saga, it takes - believe me - A LOT of time.</p>

<p>Then, following the instruction of the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_exploring_your_data.html">getting started guide</a>, I load my data in Elasticsearch using the bulk api: it is amazing because it makes it possible to perform many index/delete operations in a single API call - greatly increasing the indexing speed.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">curl <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-XPOST</span> <span class="s2">"localhost:9200/system/files/_bulk?pretty&amp;refresh"</span> <span class="nt">--data-binary</span> <span class="s2">"@files.json"</span></code></pre></figure>

<h4 id="step-4-insert-data-create-index-start-dashboarding">Step 4: insert data, create index, start dashboarding</h4>
<p>Ok, until now 1) we created the environment to analyze data 2) we gathered data from our file system 3) we loaded data in our stack: how can we create visualization? Using the last tool we didn’t use yet: kibana! First, navigate to <a href="http://localhost:5601">http://localhost:5601</a>, then in sidebar on the left click on <code class="highlighter-rouge">Management</code>, than <code class="highlighter-rouge">Index Patterns</code>, then select the index pattern - in my case and by following examples above you only have to type <code class="highlighter-rouge">system*</code> in search bar, click <code class="highlighter-rouge">Next Step</code> in the right, then type a pattern ID for your pattern index if you want, then click on <code class="highlighter-rouge">Create index pattern</code>. Magic is done!</p>

<p>A table should appear with all informations and inferred types for each field about the data you load previously using the bulk api - more details <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html">here</a>.</p>

<h5 id="create-a-dashboard">Create a Dashboard</h5>
<p>If you click to the <code class="highlighter-rouge">Dashboard</code> menu in the left sidebar, you should see an empty page with a button <strong>Create a dashboard</strong>: a Dashboard is nothing more than a set of visualizations. Let’s create a new one! If you click on <code class="highlighter-rouge">Add</code>, a message appear:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This dashboard is empty. Let's fill it up!
Click the Add button in the menu bar above to add a visualization to the dashboard.
</code></pre></div></div>

<h5 id="create-a-visualization">Create a visualization</h5>
<p>Imagine you want to discover how many files you have for each extensions with a simple histogram. Click on <code class="highlighter-rouge">Add</code> and then on <code class="highlighter-rouge">Add new visualization</code> (both blue buttons): then select your index - the one you create with the command line (see below) or via Kibana <code class="highlighter-rouge">Management</code> section - then add a new Bucket on X-Axis. Select as aggregations from the select box, in this case ext.keyword (see documentations about that) and then click play in the upper part to see live your visualization!</p>

<p align="center"><img src="http://image.ibb.co/c5Ov1m/kibana.png" style="width: 100%; marker-top: -10px;" /></p>

<p>Here’s mine: you can create whatever you want and save the visualizations to reused in different dashboard. Then, you can schedule a raspberry to run command over your attached storage in the night, and find a beautifull dashboard in the morning with all the stats you need.</p>

<h5 id="indexing">Indexing</h5>
<p>To make search over text field you may use Mapping APIs - more info <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html">here</a>. I created my own version using this call:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">curl <span class="nt">-XPUT</span> <span class="s1">'localhost:9200/system?pretty'</span> <span class="nt">-H</span> <span class="s1">'Content-Type: application/json'</span> <span class="nt">-d</span><span class="s1">'
{
  "mappings": {
    "files": {
      "properties": {
        "name":    { "type": "text", "fielddata": true },
        "ext":     { "type": "text", "fielddata": true , "fields": { "keyword": { "type": "keyword" } } },
        "size":    { "type": "integer" },
        "ctime":  {
          "type":   "date",
          "format": "strict_date_optional_time||epoch_millis"
        },
        "atime":  {
          "type":   "date",
          "format": "strict_date_optional_time||epoch_millis"
        },
        "mtime":  {
          "type":   "date",
          "format": "strict_date_optional_time||epoch_millis"
        }
      }
    }
  }
}
'</span></code></pre></figure>

<p>If you try - for instance, to retrieve every Python source file in your file systems - you can do a GET request to <code class="highlighter-rouge">curl -XGET 'localhost:9200/system/files/_search?q=*py&amp;sort=name:asc&amp;pretty'</code> and you should get a response with hits!</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:est">
      <p>If you have any trouble with Elasticsearch try look at the <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/_installation.html">official installation guide</a>&nbsp;<a href="#fnref:est" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:kt">
      <p>If you have any trouble with Kibana try look at the <a href="https://www.elastic.co/guide/en/kibana/current/install.html">official installation guide</a>&nbsp;<a href="#fnref:kt" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/elasticnas</wp:post_id>
        <wp:post_date>2018-01-13T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-01-13T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="elastic"><![CDATA["elastic",]]></category>
        
          <category domain="post_tag" nicename="kibana"><![CDATA["kibana",]]></category>
        
          <category domain="post_tag" nicename="search"><![CDATA["search",]]></category>
        
          <category domain="post_tag" nicename="nas"><![CDATA["nas",]]></category>
        
          <category domain="post_tag" nicename="python"><![CDATA["python"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Jails: confining the omnipotent root]]></title>
        <link>made2591.github.io/posts/jails</link>
        <pubDate>2018-01-08T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="preamble">Preamble</h3>
<p>Recently I became nostalgic and fascinated with stuff from the past, so I decided to create a <a href="https://github.com/made2591/vagrant-freebsd">Vagrantfile</a> to work with FreeBSD<sup id="fnref:fbsd"><a href="#fn:fbsd" class="footnote">1</a></sup>. Why FreeBSD? Because as a developer, I really like Docker and I started looking in the past to find its <em>historical</em> birth: in fact, as a concept, Docker is no so recent as you think, and I think it exists also because of the works of some other bigs from 80’, such as Poul-Henning Kamp<sup id="fnref:phk"><a href="#fn:phk" class="footnote">2</a></sup>. Starting from <a href="http://phk.freebsd.dk/pubs/sane2000-jail.pdf">its work</a> and using a FreeBSD installation I did some experiments with jails, to understand better what they really are, how they works - how can you create what it will look like a <em>vintage container</em> - and why you should use them in a FreeBSD environment - at least, to learn something new.</p>

<p align="center"><img src="https://i.ndtvimg.com/i/2016-03/jail-generic_650x400_81459239226.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="introduction">Introduction</h3>
<p>As P.H. Kamp says in its work, <em>FreeBSD’s <strong>jail</strong> facility provides the ability to partition the operating system environment, while maintaining the simplicity of the UNIX root model</em>. I think its work is really clear, and I would like to follow logic steps behind its reasoning, but…wait: let’s start from the problem.</p>

<h4 id="traditional-unix-security">Traditional UNIX Security</h4>
<p>The traditional UNIX access model assigns numeric uids to each user of the system. For the purposes of human convenience, uid 0 is canonically allocated to the root user. The system can discover whether special privileges are accorded to a process simply by looking at the uid of the process: if it is equal to 0, then the process is acting with super-user privileges. It’s really simple, but there are a few problems.</p>

<p>Formally, let:</p>
<ul>
  <li><script type="math/tex">\{root, u_1, u_2\} \in \cal U</script> be respectively the root (<script type="math/tex">uid \; = \; 0</script>), and two common users <script type="math/tex">\{uids \; = \; 1,2\}</script> from the set of users <script type="math/tex">\cal U</script>;</li>
  <li><script type="math/tex">\{p_1, p_2, p_3, p_4\} \in \cal P \in \cal O</script> be four different privileged operations from the subset of privileged operations <script type="math/tex">\cal P</script> included in the set of all available operations <script type="math/tex">\cal O</script>;</li>
  <li><script type="math/tex">G \; = \; \{V, E\}</script> be a graph of <em>dependencies</em> between operations, with <script type="math/tex">V = \cal U</script> and <script type="math/tex">E = \{p_1 \rightarrow p_3, p_2 \rightarrow p_3, ...\}</script>;</li>
</ul>

<p>It’s easy to imagine how this scenario could collapse into a difficult dependencies graph that doesn’t let the system to be secure at all. In particular, <script type="math/tex">G</script> itself says that many privileged operations in UNIX - even if <em>seem</em> independent - actually are not: instead, they are closely related and the handing out of one privilege may, in effect, be transitive to the many others. Let assume that users <script type="math/tex">u_1</script> and <script type="math/tex">u_2</script> have to be able to do <script type="math/tex">p_1</script> and <script type="math/tex">p_2</script>, but no <script type="math/tex">p_3</script>: then you can permit both to be root enabling them doing whetever they want - of course including <script type="math/tex">p_3</script>, but also other <script type="math/tex">p_s</script> you want to disable for both the users. What does it means? It means that, if you have to assign different permits over the same operating system - some securelevel mechanism has to be implemented which allows the administrator to block certain configuration and management functions from being performed by root.</p>

<p>However, a system <em>root-dependent</em> is not a good idea, because if the root user is compromised, you’re f***d up, and second, having a single administrative account is not a good idea, even in the simplest environment. There are some features in <em>BSD</em> system that provides - let me say - security capabilities: for instance, the single-user mode available to block certain functions until reboot. This is a great functionality but, it’s not a solution yet to separate several root abilities. A simplest solution should be introducing new security features to split privileged operations, but this often involves introducing new security management APIs. Further, if we assume to introduce fine-grained capabilities to replace the setuid mechanism in UNIX-like operating systems, applications that previously did a check to see if they were running as root before executing <strong>must now be changed</strong> to know that they need not run as root. This is not a real solution.</p>

<h4 id="chroot">chroot</h4>
<p>The chroot utility can be used to change the root directory of a set of processes, creating a safe and separate environment from the rest of the system: processes created in the chroot environment can not access files or resources out of this: ok, but I think <strong>jails</strong> improve the concept of the traditional chroot environment in many ways. In a traditional chroot environment, processes are limited only to the portion of file systems that can be accessed. The rest of system resources (such as the set of system users, running processes, or network sub-system) are shared by chrooted processes and host system processes (those not in a chroot environment). The jails expand this model by <em>virtualizing</em> not only the file system access, but also the set of users, the FreeBSD kernel network sub-system and some other things.</p>

<h3 id="jail">jail</h3>
<p>A jail is characterized by four elements:</p>

<ul>
  <li>
    <p>A sub-branch of a directory: the starting point from which you enter the jail. Once inside the jail, a process is not allowed to exit this sub-branch. The traditional security issues affecting the original chroot (2) design do not affect FreeBSD jails.</p>
  </li>
  <li>
    <p>A hostname: the hostname that will be used inside the jail. Jails are mainly used to host network services, so having a descriptive host name for each jail can really help the system administrator.</p>
  </li>
  <li>
    <p>An IP address: this will be assigned to the jail and can not be changed in any way during the life of the jail. The IP address of a jail is usually an alias address of an existing network interface, although this is not strictly necessary.</p>
  </li>
  <li>
    <p>A command: the path to an executable to start inside the jail. This is relative to the root directory of the jail environment, and can vary a lot, depending on the specific type of jail environment.</p>
  </li>
</ul>

<p>Jail permits to partition a FreeBSD environment (processes, file system, network resources) into a management environment, and optionally subset Jail environments. The administrator of a FreeBSD machine can partition the machine into separate jail and provide access to the super-user account in each of these without losing control of the over-all environment.</p>

<p>Looking for informations about <em>how jails really work</em>, I discovered that jails are foundamentally of two types: the “complete” jails, which resemble a real FreeBSD system, and the “service” ones, dedicated to one application or service, possibly running with privileges. Let’s make an example of how you can create a jail.</p>

<h4 id="instructions">Instructions</h4>
<p>First, <a href="https://github.com/made2591/vagrant-freebsd">Vagrantfile</a> and <code class="highlighter-rouge">vagrant ssh</code> your FreeBSD machine</p>

<h5 id="create-the-environment">Create the environment</h5>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">1 setenv DESTINATION /path/to/jail
2 mkdir <span class="nt">-p</span> <span class="nv">$DESTINATION</span>
3 <span class="nb">cd</span> /usr/src
4 make buildworld
5 make installworld <span class="nv">DESTDIR</span><span class="o">=</span><span class="nv">$DESTINATION</span>
6 make distribution <span class="nv">DESTDIR</span><span class="o">=</span><span class="nv">$DESTINATION</span>
7 mount <span class="nt">-t</span> devfs devfs <span class="nv">$DESTINATION</span>/dev</code></pre></figure>

<p>Where:</p>
<ul>
  <li><code class="highlighter-rouge">setenv DESTINATION /path/to/jail</code> sets an environment variable to specify jail location - where the jail is physically in the host file system. A good practise is to put your jails under <code class="highlighter-rouge">/usr</code>, better if in a <code class="highlighter-rouge">jails</code> dedicated subfolder: for instance, <code class="highlighter-rouge">/usr/jail/mark</code> where <code class="highlighter-rouge">mark</code> is the name of the jail;</li>
  <li><code class="highlighter-rouge">mkdir -p $DESTINATION</code> creates the directory tree including intermediates one if required;</li>
  <li><code class="highlighter-rouge">cd /usr/src</code> changes the folder to the place in which the source code is normally installed - which contains the several subdirectories, including the <code class="highlighter-rouge">sys</code> one that contains Kernel source files;</li>
  <li><code class="highlighter-rouge">make buildworld &amp;&amp; make kernel</code> creates the world and compiles the kernel source: this will take a loooooong time<sup id="fnref:lt"><a href="#fn:lt" class="footnote">3</a></sup>, but, using the -j - only in the first make - you can increase speed by running multiple jobs. How many jobs to use depends on the processor (number of cores plus one is a start). The kernel target builds and installs the new kernel;</li>
  <li><code class="highlighter-rouge">make installworld DESTDIR=$DESTINATION</code> populates the directory subtree chosen with the necessary binaries, libraries, man pages, etc</li>
  <li><code class="highlighter-rouge">make distribution DESTDIR=$DESTINATION</code> installs every needed configuration file. In simple words, it installs every <em>installable</em> file of <code class="highlighter-rouge">/usr/src/etc/</code> to the <code class="highlighter-rouge">/etc</code></li>
</ul>

<p>After you create the environment inside the jail subtree, you can create a jail - in term of configure it.</p>

<h5 id="configure-the-jail">Configure the jail</h5>
<p>To configure a jail, you have two options: first, use <code class="highlighter-rouge">jail.conf</code> file, a file structured with the format <code class="highlighter-rouge">key = "value";</code>. The short version of the story is that FreeBSD jails used to be defined in <code class="highlighter-rouge">/etc/rc.conf</code> using <em>rc-style</em> syntax. During FreeBSD 9.x, a new convention was introduced, using <code class="highlighter-rouge">/etc/jail.conf</code>. FreeBSD 10.x defaults to the new style but still supports the <code class="highlighter-rouge">rc.conf</code> style. FreeBSD 11 dropped support for the old style. Inspired by <a href="https://therub.org/2014/08/11/convert-freebsd-jails-from-rc.conf-to-jail.conf/">this short post</a>, I got an simple but complete example of old style configuration:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nv">jail_enable</span><span class="o">=</span><span class="s2">"YES"</span>
<span class="nv">jail_list</span><span class="o">=</span><span class="s2">"api web storage"</span>
<span class="nv">jail_mount_enable</span><span class="o">=</span><span class="s2">"YES"</span>
<span class="nv">jail_devfs_enable</span><span class="o">=</span><span class="s2">"YES"</span>
<span class="nv">jail_devfs_rules</span><span class="o">=</span><span class="s2">"devfsrules_jail"</span>

<span class="nv">jail_api_rootdir</span><span class="o">=</span><span class="s2">"/jails/api"</span>
<span class="nv">jail_api_hostname</span><span class="o">=</span><span class="s2">"api.mycompany.org"</span>
<span class="nv">jail_api_ip</span><span class="o">=</span><span class="s2">"10.0.0.1"</span>

<span class="nv">jail_web_rootdir</span><span class="o">=</span><span class="s2">"/jails/web"</span>
<span class="nv">jail_web_hostname</span><span class="o">=</span><span class="s2">"web.mycompany.org"</span>
<span class="nv">jail_web_ip</span><span class="o">=</span><span class="s2">"10.0.0.2"</span>

<span class="nv">jail_storage_rootdir</span><span class="o">=</span><span class="s2">"/jails/storage"</span>
<span class="nv">jail_storage_hostname</span><span class="o">=</span><span class="s2">"storage.mycompany.org"</span>
<span class="nv">jail_storage_ip</span><span class="o">=</span><span class="s2">"10.0.0.3"</span></code></pre></figure>

<p>If you remove everything from rc.conf except for the jail_enable line and move everything shared to the global scope to clean up the individual definitions, you got a new jail.conf file like the one below:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">allow.raw_sockets <span class="o">=</span> 0<span class="p">;</span>
exec.clean<span class="p">;</span>
exec.system_user <span class="o">=</span> <span class="s2">"root"</span><span class="p">;</span>
exec.jail_user <span class="o">=</span> <span class="s2">"root"</span><span class="p">;</span>
exec.start +<span class="o">=</span> <span class="s2">"/bin/sh /etc/rc"</span><span class="p">;</span>
exec.stop <span class="o">=</span> <span class="s2">"/bin/sh /etc/rc.shutdown"</span><span class="p">;</span>
exec.consolelog <span class="o">=</span> <span class="s2">"/var/log/jail_</span><span class="k">${</span><span class="nv">name</span><span class="k">}</span><span class="s2">_console.log"</span><span class="p">;</span>
mount.devfs<span class="p">;</span>
mount.fstab <span class="o">=</span> <span class="s2">"/etc/fstab.</span><span class="nv">$name</span><span class="s2">"</span><span class="p">;</span>
allow.mount<span class="p">;</span>
allow.set_hostname <span class="o">=</span> 0<span class="p">;</span>
allow.sysvipc <span class="o">=</span> 0<span class="p">;</span>
path <span class="o">=</span> <span class="s2">"/jails/</span><span class="k">${</span><span class="nv">name</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span>

api <span class="o">{</span>
        host.hostname <span class="o">=</span> <span class="s2">"api.mycompany.org"</span><span class="p">;</span>
        ip4.addr <span class="o">=</span> 10.0.0.1<span class="p">;</span>
<span class="o">}</span>

web <span class="o">{</span>
        host.hostname <span class="o">=</span> <span class="s2">"web.mycompany.org"</span><span class="p">;</span>
        ip4.addr <span class="o">=</span> 10.0.0.2<span class="p">;</span>
<span class="o">}</span>

storage <span class="o">{</span>
        host.hostname <span class="o">=</span> <span class="s2">"storage.mycompany.org"</span><span class="p">;</span>
        ip4.addr <span class="o">=</span> 10.0.0.3<span class="p">;</span>
<span class="o">}</span></code></pre></figure>

<p>More info <a href="https://www.freebsd.org/cgi/man.cgi?query=jail.conf&amp;sektion=5&amp;n=1">here</a>.</p>

<p>The second option is to use directly the <code class="highlighter-rouge">jail</code> command with parameters from command line. As the man page states, jail command recognizes two classes of parameters: four fixed parameters, the <em>true jail parameters</em>, that are passed to the kernel when the <em>jail</em> is created (which can be seen with <em>jls</em> and, for backward compatibility, can be passed without names: path, hostname, ip, and command), and the pseudo-parameters that are only used by jail itself.</p>

<p>So a jail may be specified with parameters directly on the command line. In this case,the <code class="highlighter-rouge">jail.conf</code> file will not be used. 
(And this is the part where you realize that jail utility is the docker daemon.)</p>

<h5 id="startstop-a-jail">Start/stop a jail</h5>
<p>Using <code class="highlighter-rouge">service jail start $name</code> you start the jail $name: if you don’t specify the name all the jails defined in the <code class="highlighter-rouge">/etc/jail.conf</code> will be started. Using the stop statement you can stop the jail.</p>

<h5 id="listing-jails">Listing jails</h5>
<p>Using <code class="highlighter-rouge">jls</code> you can list the jails in your host. jexec 3 /etc/rc.shutdown</p>

<p><span style="color:#A04279; font-size: bold;"><strong>NOTE</strong></span>: you can also shotdown a jail using the <code class="highlighter-rouge">jexec</code> command: look at the <code class="highlighter-rouge">JID</code>’s jail you want to stop using the listing command <code class="highlighter-rouge">jls</code>, then run <code class="highlighter-rouge">jexec 3 /etc/rc.shutdown</code></p>

<p>If you to find out more about how the jail mechanism is implemented, you can have a look at this files<sup id="fnref:mat"><a href="#fn:mat" class="footnote">4</a></sup> <code class="highlighter-rouge">/usr/src/usr.sbin/jail/jail.c</code>, <code class="highlighter-rouge">/usr/src/sys/kern/kern_jail.</code> and <code class="highlighter-rouge">/usr/include/sys/jail.h</code> header file: in the latter is defined the jail structure, there is an entry for each of the arguments passed to the jail command, and indeed, they are set during its execution.</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">struct jail <span class="o">{</span>
        u_int32_t       version<span class="p">;</span>
        char            <span class="k">*</span>path<span class="p">;</span>
        char            <span class="k">*</span>hostname<span class="p">;</span>
        u_int32_t       ip_number<span class="p">;</span>
<span class="o">}</span><span class="p">;</span></code></pre></figure>

<h3 id="conclusion">Conclusion</h3>
<p>The jail facility provides FreeBSD with a conceptually simple security partitioning mechanism, allowing the delegation of administrative rights within virtual machine partitions. The implementation relies on restricting access within the jail environment to a well-defined subset of the overall host environment. This includes limiting interaction between processes, and to files, network resources, and privileged operations. Administrative overhead is reduced through avoiding fine-grained access control mechanisms, and maintaining a consistent administrative interface across partitions and the host environment. So…does it seem familiar?</p>

<p align="center"><img src="https://image.ibb.co/jCn6xR/jails_v.png" alt="perceptron" style="width: 90%; marker-top: -10px;" /></p>

<p>If something is wrong, please let me know, I’m still waiting for the world to be built -.-</p>

<p>Thank you everybody for reading!</p>

<p><strong>PS</strong>: this is the part where you realize that a jail is similar to a container, the jail.conf is kind of a Dockerfile but - wait for it - could be so much more, like a docker compose: further, jexec looks like the docker exec command, and jls looks like docker ps -a, and so on, am I wrong?</p>

<div class="footnotes">
  <ol>
    <li id="fn:fbsd">
      <p><a href="https://www.freebsd.org/it/">https://www.freebsd.org/it/</a>&nbsp;<a href="#fnref:fbsd" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:phk">
      <p><a href="https://en.wikipedia.org/wiki/Poul-Henning_Kamp">Poul-Henning Kamp</a>&nbsp;<a href="#fnref:phk" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:lt">
      <p>In <a href="https://lists.freebsd.org/pipermail/freebsd-questions/2016-November/274690.html">this</a> short thread, you can see some order of magnitude: buildworld takes hours so…be patient.&nbsp;<a href="#fnref:lt" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:mat">
      <p>More at <a href="https://www.cse.buffalo.edu//~kensmith/FreeBSD/book.html">freebsd.org</a>&nbsp;<a href="#fnref:mat" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/jails</wp:post_id>
        <wp:post_date>2018-01-08T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-01-08T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="jails"><![CDATA["jails",]]></category>
        
          <category domain="post_tag" nicename="freebsd"><![CDATA["freebsd",]]></category>
        
          <category domain="post_tag" nicename="container"><![CDATA["container"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[A journey through the network - Layer 1]]></title>
        <link>made2591.github.io/posts/network-layers-1</link>
        <pubDate>2018-01-05T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="a-journey-through-the-network---layer-1">A journey through the network - Layer 1</h3>
<p>Before the Christmas holidays, I wrote an article about the network: yes. The network is that part of computer science that is no longer considered fundamental as it should, and I must admit that I learn it every day at my expense: as an old friend always says to me “<em>the network is the concept on which everything is based, describes how the body works: after that, you can also become a gastroenterologist, but you will always need to know how the body works”</em>. I think he’s right. As I was saying, I wrote an article about that: it’s a sort of overview and technical / historical introduction on the ISO / OSI and TCP / IP protocols. For those who missed the introduction, <a href="https://made2591.github.io/posts/network-layers-0">here</a> the link. Despite my lack of experience, I promised myself, as far as possible, with the little time available, to retrace the various levels of the network from a theoretical point of view without going into too much detail, also trying to identify the most used commands, understand the level at which they operate and the functioning of the parameters supported by them. It took me a lot of time … but finally, the post on level one is ready.
As a main source I use <a href="https://www.amazon.it/gp/product/9332518742/ref=oh_aui_detailpage_o01_s00?ie=UTF8&amp;psc=1">Computer Networks</a> and <a href="https://www.amazon.it/gp/product/9332535957/ref=oh_aui_detailpage_o02_s00?ie=UTF8&amp;psc=1">TCP/IP Illustrated</a>. In this article, I will talk about layer 0, the lowest in the ISO / OSI stack. Enjoy the reading!</p>

<h3 id="introduction">Introduction</h3>
<p>As Andrew Tanenbaum says in his book, “the physical layer is the foundation on which the network is built [..], so it is a good place to start our journey into networkland.”. I agree, even if I would like to jump directly to higher network levels XD. I want to highlight that the physical layer I will talk about is defined in the <strong>ISO/OSI</strong> standard, not in <strong>TCP/IP</strong>. <strong>TCP/IP</strong> is designed to be hardware independent. As a result, <strong>TCP/IP</strong> may be implemented on top of virtually any hardware networking technology. The lowest layer in <strong>TCP/IP</strong> stack is the <em>link layer</em>: it is not really a layer at all, but rather an interface between hosts and transmission links used to move packets between the Internet layer interfaces of two different hosts on the same link. What I will talk about in the next paragraphs is the physical layer, defined in the <strong>ISO/OSI</strong> standard, divided into four section:</p>
<ul>
  <li><strong>Part 1</strong>: The theoretical parts regarding data transmission and limits imposed by Universe on what can be sent over a channel;</li>
  <li><strong>Part 2</strong>: The most important types of transmission media: guided (copper wire and fiber optics), wireless (terrestrial radio), and satellite;</li>
  <li><strong>Part 3</strong>: The digital modulation, which is all about how analog signals are converted into digital bits and back again;</li>
  <li><strong>Part 4</strong>: The multiplexing schemes aka <em>how multiple conversations can be put on the same transmission medium at the same time without interfering with one another</em>;</li>
</ul>

<h3 id="part-1-of-4---data-trasmission">Part 1 of 4 - Data trasmission</h3>
<p>First, you need to know what is a <span style="color:#A04279; font-size: bold;">the Fourier transform</span>: you can find a complex explanation <a href="https://en.wikipedia.org/wiki/Fourier_transform">here</a>. For those afraid of math, including myself, I will try to gild the pill in the next lines.</p>

<p>Let’s start with waveform: virtually <strong>everything</strong> in the world can be described via a waveform - a function of time, space or some other variable. For instance, sound waves, electromagnetic fields, the elevation of a hill versus location, the price of your favorite stock versus time, etc. The Fourier Transform gives us a unique and powerful way of <em>viewing</em> these waveforms, because it proves [wait for it] an incredible fact, that deserves quotation:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>All waveforms, no matter what you scribble or observe in the universe, are actually just the sum of simple sinusoids of different frequencies.
</code></pre></div></div>

<p>This fact is amazing for lot of purpose, including the data trasmission in the physical layer. The Fourier Transform decomposes a waveform - basically any real world waveform - into sinusoids. Formally, the Fourier Transform is a <em>math tool</em> that breaks a waveform into an <em>alternate</em> representation, characterized by sine and cosines, and let us to represent the waveform itself in another way, as a sum of different fundamental frequencies, that combined together form the original waveform. Even if I don’t want to go in depth with the math, consider a specific example: the transmission of the ASCII character <code class="highlighter-rouge">b</code> encoded in an 8-bit byte, represented by the bit pattern <code class="highlighter-rouge">01100010</code>. The left-hand part of the figure below (a) shows the voltage output by the transmitting computer: the right part show the harmonic number. We know that the waveform in the left part, as stated before, is actually <em>the sum of simple sinusoids of different frequencies</em>. In the second part (b), there is the signal that results from a channel (a medium) that allows only the first harmonic (the fundamental, f) to pass through.</p>

<p align="center"><img src="https://image.ibb.co/nctuuw/fourier_t.png" alt="perceptron" style="width: 100%; marker-top: -10px;" /></p>

<p>In the figure you can see the spectra and reconstructed functions for higher-bandwidth channels. For digital transmission, the goal is to receive a signal with just enough fidelity to reconstruct the sequence of bits that was sent. Why not use a more accurate signal? Because, no transmission facility can transmit signals without losing some power in the process. The width of the frequency range transmitted without being strongly attenuated is called the <strong>bandwidth</strong> and different medium have different bandwith.</p>

<h4 id="bit-rate-data-rate-and-channels-example">Bit rate, data rate and channels example</h4>
<p>There is much confusion about bandwidth because it means different things to electrical engineers and to computer scientists.</p>
<ul>
  <li>To electrical engineers, (analog) bandwidth is a quantity measured in <script type="math/tex">Hz</script> (as we described below in the next example).</li>
  <li>To computer scientists, (digital) bandwidth is the maximum data rate of a channel, a quantity measured in bits/sec. 
Let’s make an example: given a bit rate (a sort of velocity <script type="math/tex">v</script>) mesured in <script type="math/tex">\; \frac{bits}{sec} \;</script>, the time required to send the <script type="math/tex">8</script> bits (a sort of space quantity <script type="math/tex">q</script>) is given by</li>
</ul>

<script type="math/tex; mode=display">time = \frac{space}{velocity}, \; \; \rightarrow \; \; time = \frac{q}{v} seconds</script>

<p>In our example <script type="math/tex">v = 1</script> bit at a time, so the <em>frequency</em> of the first harmonic of this signal is <script type="math/tex">v/8 \; Hz</script>. Limiting the bandwidth limits the data (bits) rate (even for perfect channels completly noiseless). So what is the data rate? The data rate, as Tanenbaum says, “<em>is the end result of using the analog bandwidth of a physical channel for digital transmission</em>”. If you want to know more about waveform, look <a href="https://en.wikipedia.org/wiki/Waveform">here</a> and <a href="https://en.wikipedia.org/wiki/Sine_wave">here</a>.</p>

<h5 id="nyquist">Nyquist</h5>
<p>Henry Nyquist, AT&amp;T engineer, in 1924 realized that even a perfect channel has a finite transmission capacity. He derived an equation expressing the maximum data rate for a finite-bandwidth noiseless channel.</p>

<p><span style="color:#A04279; font-size: bold;">Difficult explanation</span>
Sampling is the first step in the analog-to-digital conversion process of a signal. It consists of taking samples (samples) from an analogue signal and continuing over time each <script type="math/tex">\Delta t</script> seconds.</p>

<p align="center">
    <img src="https://upload.wikimedia.org/wikipedia/commons/c/ca/Analog_signal.png" alt="perceptron" style="width: 35%;  margin: 0 auto; marker-top: -10px;" />
    <img src="https://upload.wikimedia.org/wikipedia/commons/6/6e/Sampled_signal.png" alt="perceptron" style="width: 35%; margin: 0 auto; marker-top: -10px;" />
</p>

<p>The value <script type="math/tex">\Delta t</script> is called sampling interval, while <script type="math/tex">f_s = \frac{1}{\Delta t}</script> is the sampling rate. The result is an analog signal in discrete time, which is then quantized, coded and made accessible to any digital computer. The Nyquist-Shannon theorem (or signal sampling theorem) states that, given an analog signal <script type="math/tex">s(t)</script> whose frequency band is limited by the frequency <script type="math/tex">f_M</script> and given <script type="math/tex">n \in \mathbb{Z}</script>, the signal <script type="math/tex">s(t)</script> can be uniquely reconstructed from its samples <script type="math/tex">s(n \Delta t)</script> taken at frequency <script type="math/tex">f_s = \frac{1}{\Delta t}</script> if <script type="math/tex">f_s > 2f_M</script> using the following formula:</p>

<script type="math/tex; mode=display">{\displaystyle{\displaystyle s(t) = \sum_{k=-\infty}^{+\infty}s(k \Delta t){\textrm{sinc}} \left ({\frac{t}{\Delta t}} -k\right) \; \forall t \in \mathbb{R}}}</script>

<p>expressed in terms of the normalized sync function<sup id="fnref:sf"><a href="#fn:sf" class="footnote">1</a></sup>. What the f**k I said?! Don’t know.</p>

<p><span style="color:#A04279; font-size: bold;">Simpler explanation</span>
The only thing you have to remember is that _if the signal consists of <script type="math/tex">V</script> discrete levels (wait for example), Nyquist’s theorem states that the maximum data rate = <script type="math/tex">2B * log_2(V) \; bits/sec</script>. For example, a noiseless <script type="math/tex">3 \; kHz</script> channel cannot transmit binary (i.e., two-level) signals at a rate exceeding 6000 bps, because <script type="math/tex">2 * 3000 * log_2(2) \; bits/sec = 6000</script>.</p>

<p>If random noise is present, the situation deteriorates rapidly. Let be <script type="math/tex">S</script> the signal power, and <script type="math/tex">N</script> the noise power. Than, the signal-to-noise ratio is <script type="math/tex">S/N</script>. Usually, this ratio is expressed on a log scale as the quantity <script type="math/tex">10 * log_10(S/N)</script>, because it can vary over a tremendous range. The units of this log scale are called <strong>decibels</strong> (dB). Another genius, Shannon, derived an important result in this field: the maximum data rate or capacity of a noisy channel whose bandwidth is <script type="math/tex">B \; Hz</script> and whose signal-to-noise ratio is <script type="math/tex">S/N</script> is = <script type="math/tex">B * log_2(1 + S/N) \; bits/sec</script></p>

<h3 id="part-2-of-4---media-types">Part 2 of 4 - Media types</h3>
<p>Various physical media can be used for the actual transmission. Each one has its own niche in terms of bandwidth, delay, cost, and ease of installation and maintenance. Media are roughly grouped into guided media, such as copper wire and fiber optics, and unguided media, such as terrestrial wireless, satellite, and lasers through the air.</p>

<h4 id="guided-transmission-media">Guided Transmission Media</h4>
<p><span style="color:#A04279; font-size: bold;">Magnetic Media</span>
One of the most common ways to transport data from one computer to another is to write them onto magnetic tape or removable media (e.g., recordable DVDs), physically transport the tape or disks to the destination machine, and read them back in again.</p>

<table>
  <thead>
    <tr>
      <th>Pro</th>
      <th>Cons</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Bandwith</td>
      <td>Transmission time</td>
    </tr>
  </tbody>
</table>

<p><span style="color:#A04279; font-size: bold;">Twisted Pairs</span>
One of the oldest and still most common transmission media is twisted pair. It consists of two insulated copper wires. The wires are twisted together in a helical form, just like a DNA molecule. Twisting is done because two parallel wires constitute a fine antenna. When the wires are twisted, the waves from different twists cancel out, so the wire radiates less effectively. A signal is usually carried as the difference in voltage between the two wires in the pair. This provides better immunity to external noise because the noise tends to affect both wires the same, leaving the differential unchanged. The most common application of the twisted pair is the telephone system. The bandwidth depends on the thickness of the wire and the distance traveled, but several megabits/sec can be achieved for a few kilometers in many cases.
Twisted-pair cabling comes in several varieties.</p>
<ul>
  <li><strong>Unshielded Twisted Pair (UTP)</strong>: UTP cables are not shielded. This entails a high degree of flexibility and resistance to efforts. They are widely used in ethernet networks.</li>
</ul>
<p align="center"><img src="https://image.ibb.co/nks4SG/Cavo_UTP_t.png" alt="perceptron" style="width: 40%; marker-top: -10px;" /></p>
<ul>
  <li><strong>Shielded Twisted Pair (STP)</strong>: STP cables include a metal shield for each pair of cables. An example is that defined by IBM for its <strong>token ring network</strong>, but also that of the ANSI / TIA / EIA-568-A of the CAT5 shielded cable and later.</li>
</ul>
<p align="center"><img src="https://image.ibb.co/fv9jSG/Cavo_STP_t.png" alt="perceptron" style="width: 40%; marker-top: -10px;" /></p>
<ul>
  <li><strong>Screened Shielded Twisted Pair (S/STP)</strong>: S/STP cables are STP cables further protected by a metal shield enclosing the entire cable; this further improves interference resistance. The latter must also be connected from both sides to the ground, to ensure greater protection against external waves.</li>
</ul>
<p align="center"><img src="https://image.ibb.co/drv2Ew/Cavo_S_STP_t.png" alt="perceptron" style="width: 40%; marker-top: -10px;" /></p>
<ul>
  <li><strong>Screened Unshielded Twisted Pair (S/UTP o FTP)</strong>: S/UTP, also known as Foiled Twisted Pair (FTP) or Screened Foiled Twisted Pair (S/FTP), is an externally shielded UTP cable.</li>
</ul>
<p align="center"><img src="https://image.ibb.co/buPJnG/Cavo_S_UTP_t.png" alt="perceptron" style="width: 40%; marker-top: -10px;" /></p>

<p>This construction methods are tipically groubed in several categories (source: wikipedia):</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Typical construction</th>
      <th>Bandwidth</th>
      <th>Applications</th>
      <th>Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Level 1</td>
      <td> </td>
      <td>0.4 MHz</td>
      <td>Telephone and modem lines</td>
      <td>Not described in EIA/TIA recommendations. Unsuitable for modern systems.[9]</td>
    </tr>
    <tr>
      <td>Level 2</td>
      <td> </td>
      <td>4 MHz</td>
      <td>Older terminal systems, e.g. IBM 3270</td>
      <td>Not described in EIA/TIA recommendations. Unsuitable for modern systems.[9]</td>
    </tr>
    <tr>
      <td>Cat 3</td>
      <td>UTP[10]</td>
      <td>16 MHz[10]</td>
      <td>10BASE-T and 100BASE-T4 Ethernet[10]</td>
      <td>Described in EIA/TIA-568. Unsuitable for speeds above 16 Mbit/s. Now mainly for telephone cables[10]</td>
    </tr>
    <tr>
      <td>Cat 4</td>
      <td>UTP[10]</td>
      <td>20 MHz[10]</td>
      <td>16 Mbit/s[10] Token Ring</td>
      <td>Not commonly used[10]</td>
    </tr>
    <tr>
      <td>Cat 5</td>
      <td>UTP[10]</td>
      <td>100 MHz[10]</td>
      <td>100BASE-TX &amp; 1000BASE-T Ethernet[10]</td>
      <td>Common for current LANs. Superseded by Cat5e, but most Cat5 cable meets Cat5e standards.[10]</td>
    </tr>
    <tr>
      <td>Cat 5e</td>
      <td>UTP[10]</td>
      <td>100 MHz[10]</td>
      <td>100BASE-TX &amp; 1000BASE-T Ethernet[10]</td>
      <td>Enhanced Cat5. Common for current LANs. Same construction as Cat5, but with better testing standards.[10]</td>
    </tr>
    <tr>
      <td>Cat 6</td>
      <td>UTP[10]</td>
      <td>250 MHz[10]</td>
      <td>10GBASE-T Ethernet</td>
      <td>ISO/IEC 11801 2nd Ed. (2002), ANSI/TIA 568-B.2-1. Most commonly installed cable in Finland according to the 2002 standard EN 50173-1.</td>
    </tr>
    <tr>
      <td>Cat 6A</td>
      <td>F/UTP, U/FTP</td>
      <td>500 MHz</td>
      <td>10GBASE-T Ethernet</td>
      <td>Adds cable shielding. ISO/IEC 11801 2nd Ed. Am. 2. (2008), ANSI/TIA-568-C.1 (2009)</td>
    </tr>
    <tr>
      <td>Cat 7</td>
      <td>S/FTP, F/FTP</td>
      <td>600 MHz</td>
      <td>10GBASE-T Ethernet or POTS/CATV/1000BASE-T over single cable</td>
      <td>Fully shielded cable. ISO/IEC 11801 2nd Ed. (2002)</td>
    </tr>
    <tr>
      <td>Cat 7A</td>
      <td>S/FTP, F/FTP</td>
      <td>1000 MHz</td>
      <td>10GBASE-T Ethernet or POTS/CATV/1000BASE-T over single cable</td>
      <td>Uses all four pairs. ISO/IEC 11801 2nd Ed. Am. 2. (2008)</td>
    </tr>
    <tr>
      <td>Cat 8/8.1</td>
      <td>F/UTP, U/FTP</td>
      <td>1600–2000 MHz</td>
      <td>40GBASE-T Ethernet or POTS/CATV/1000BASE-T over single cable</td>
      <td>In development (ANSI/TIA-568-C.2-1, ISO/IEC 11801 3rd Ed.)</td>
    </tr>
    <tr>
      <td>Cat 8.2</td>
      <td>S/FTP, F/FTP</td>
      <td>1600–2000 MHz</td>
      <td>40GBASE-T Ethernet or POTS/CATV/1000BASE-T over single cable</td>
      <td>In development (ISO/IEC 11801 3rd Ed.)</td>
    </tr>
  </tbody>
</table>

<p><span style="color:#A04279; font-size: bold;">Coaxial Cable</span>
The coaxial cable has better shielding and greater bandwidth than unshielded twisted pairs, so it can span longer distances at higher speeds. Coaxial cables used to be widely used within the telephone system for long-distance lines but have now largely been replaced by fiber optics on longhaul routes.</p>

<p align="center"><img src="https://image.ibb.co/gH6nGb/coaxial.png" alt="perceptron" style="width: 100%; marker-top: -10px;" /></p>

<p><span style="color:#A04279; font-size: bold;">Power Lines</span>
The use of power lines (electricity distribution) for data communication is an old idea. In recent years there has been renewed interest in high-rate communication over these lines, both inside the home as a LAN and outside the home for broadband Internet access. Using electrical wires inside the home is not so easy, because of appliances switch on and off and creating electrical noise, electrical properties of the wiring change from house to house: international standards are under development because many products use various proprietary standards for power-line networking, allowing transport to a few hundred megabits.</p>

<p align="center"><img src="https://image.ibb.co/kwePCG/powerline.png" alt="perceptron" style="width: 80%; marker-top: -10px;" /></p>

<p><span style="color:#A04279; font-size: bold;">Fiber Optics</span> 
An optical transmission system has three key components: the light source, the transmission medium, and the detector. Conventionally, a pulse of light indicates a 1 bit and the absence of light indicates a 0 bit. The transmission medium is an ultra-thin fiber of glass. The detector generates an electrical pulse when light falls on it. By attaching a light source to one end of an optical fiber and a detector to the other, we have a unidirectional data transmission system that accepts an electrical signal, converts and transmits it by light pulses, and then reconverts the output to an electrical signal at the receiving end.</p>

<p align="center"><img src="https://image.ibb.co/gRN1bb/fiber_t.png" alt="perceptron" style="width: 100%; marker-top: -10px;" /></p>

<p>At the center is the glass core through which the light propagates. What happens inside the core? The light ray incident on the boundary above the critical angle will be reflected internally: this implies that many different rays will be bouncing around at different angles. Each ray is said to have a different mode, so a fiber having this property is called a <strong>multimode fiber</strong>. If the fiber’s diameter is reduced to a few wavelengths of light the fiber acts like a wave guide and the light can propagate only in a straight line, without bouncing, yielding a <strong>single-mode</strong> fiber. Single-mode fibers are more expensive but are widely used for longer distances.</p>

<h4 id="wireless-transmission">Wireless Transmission</h4>
<p>When electrons move, they create electromagnetic waves that can propagate through space. The number of oscillations per second of a wave is called frequency, <script type="math/tex">f</script>, and is measured in Hz. The distance between two consecutive maxima (or minima) is called the wavelength, which is universally designated by the Greek letter <script type="math/tex">\lambda</script>. The fundamental relation between <script type="math/tex">f</script>, <script type="math/tex">\lambda</script>, and <script type="math/tex">c</script> (in a vacuum) is:</p>

<script type="math/tex; mode=display">\lambda * f = c</script>

<p>The amount of information that a signal such as an electromagnetic wave can carry depends on the received power and is proportional to its bandwidth. Most transmissions use a relatively narrow frequency band. They concentrate their signals in this narrow band to use the spectrum efficiently and obtain reasonable data rates by transmitting with enough power.</p>

<p align="center"><img src="https://image.ibb.co/gNWWsG/spectrum_t.png" alt="perceptron" style="width: 100%; marker-top: -10px;" /></p>

<p>However, in some cases, a wider band is used, with three variations. In <strong>frequency hopping spread spectrum</strong>, the transmitter hops from frequency to frequency hundreds of times per second. It is popular for military communication because it makes transmissions hard to detect and next to impossible to jam. In <strong>direct sequence spread spectrum</strong> a code sequence is used to spread the data signal over a wider frequency band: this second method is used commercially as a spectrally efficient way to let multiple signals share the same frequency band. A third method of communication with a wider band is <strong>UWB</strong> (Ultra-WideBand) communication. <strong>UWB</strong> sends a series of rapid pulses, varying their positions to communicate information.</p>

<p><span style="color:#A04279; font-size: bold;">Radio Transmission</span>
Radio frequency (RF) waves are easy to generate, can travel long distances, and can penetrate buildings easily, so they are widely used for communication, both indoors and outdoors. Radio waves also are omnidirectional, meaning that they travel in all directions from the source, so the transmitter and receiver do not have to be carefully aligned physically.</p>

<p><span style="color:#A04279; font-size: bold;">Microwave Transmission</span>
Microwave communication is so widely used for long-distance telephone communication, mobile phones, television distribution, and other purposes that a severe shortage of spectrum has developed. It has several key advan- tages over fiber. The main one is that no right of way is needed to lay down cables. By buying a small plot of ground every 50 km and putting a microwave tower on it, one can bypass the telephone system entirely.</p>

<p>Then there are also other media to transmit signals, such as satellites. However, I leave this topic to switch to digital modulation.</p>

<h3 id="part-3-of-4---the-digital-modulation">Part 3 of 4 - The digital modulation</h3>
<p>To send digital information, analog signals have to be transformed in such a way to represent bits. The process of converting between bits and signals that represent them is called digital modulation. There are two different schemes:</p>
<ul>
  <li><strong>baseband transmission schemes</strong> directly convert bits into a signal: the signal occupies frequencies from zero up to a maximum that depends on the signaling rate. It is common for wires;</li>
  <li><strong>passband transmission schemes</strong> regulate the amplitude, phase, or frequency of a carrier signal to convey bits: the signal occupies a band of frequencies around the frequency of the carrier signal. It is common for wireless and optical channels for which the signals must reside in a given frequency band.</li>
</ul>

<p>Furthermore, channels are often shared by multiple signals because it is much more convenient. How can a medium be shared bewtween several channels? With <strong>multiplexing</strong>. There are several way of multiplexing: in particular you can separate the use of the medium using time, frequencies and or <em>codes</em>.</p>

<h4 id="baseband-transmission">Baseband Transmission</h4>
<p>The most straightforward form of digital modulation is to use a positive voltage to represent a 1 and a negative voltage to represent a 0 (this is actually a scheme, called Non-Return-to-Zero or NRZ, for short). There are many others, as shown in the figure.</p>

<p align="center"><img src="https://image.ibb.co/c4pUew/lines_t.png" alt="perceptron" style="width: 100%; marker-top: -10px;" /></p>

<p>All these schemes are called <strong>line codes</strong>. Different line codes help you with bandwidth efficiency, clock recovery, and balancing in different ways.</p>

<h5 id="bandwidth-efficiency">Bandwidth efficiency</h5>
<p>Look at the first (ok, the second) stream NRZ: the signal may cycle between the positive and negative levels up to every <script type="math/tex">2</script> bits (in the case of alternating 1s and 0s). Because of Nyquist, this means that we need a bandwidth of at least <script type="math/tex">B/2 \; Hz</script> when the bit rate is <script type="math/tex">B \; bits/sec</script>: to go faster, we need more bandwith and we already said it is often a limited resource. One strategy for using limited bandwidth more efficiently is to use more than two signaling levels. What do I mean? It’s simple: by using 4 different voltages, for instance, we can send 2 bits at once as a single symbol but… of course, the receiver needs to be sufficiently <em>strong</em> to distinguish the 4 levels of signal - considering also the noise. We call the <em>rate</em> at which the signal <em>changes</em> the <strong>symbol rate</strong> to distinguish it from the <strong>bit rate</strong>, that is the number of bits we transmit in time unit. This implies that</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The bit rate is equal to symbol rate multiplied by the number of bits per symbol.
</code></pre></div></div>

<p>The symbol rate is more famous to the oldest as the <span style="color:#A04279; font-size: bold;">baud rate</span>. In any case, using higher baud rate permits you to use the bandwith more efficiently.</p>

<p><strong>NOTE</strong>: the number of signal levels does not need to be a power of two. Often it is not, with some of the levels used for protecting against errors and simplifying the design of the receiver.</p>

<h5 id="clock-recovery">Clock Recovery</h5>
<p>NRZ sounds pretty cool but… there is a problem. For NRZ, and more in general for all schemes that encode bits into symbols, the receiver <strong>must</strong> know <em>when one symbol ends and the next symbol begins</em> to correctly decode the bits. Let’s take the NRZ: after a while it is hard to tell the bits apart, as 12 zeros look much like 13 or 11 zeros, unless you have a very accurate <strong>clock</strong>. However, creating a clock on the receiver is diffucult, because the bits (for sure, in modern network) are moved in milions for seconds (megabits) and over long path around the world: this would imply the clock to be super high, and it’s not doable. Someone thought to send the signal for the clock over a medium, by this would consume an entire line for sending data. What about data and clock combined togheter? This could actually work, and it is: this solution is called <strong>Manchester encoding</strong> and was used for classic Ethernet. The clock makes a clock transition in every bit time, so it runs at twice the bit rate. When it is XORed with the 0 level it makes a low-to-high transition that is simply the clock. This transition is a logical 0. When it is XORed with the 1 level it is inverted and makes a high-to- low transition. This transition is a logical 1.</p>

<p>The cons is that Manchester encoding requires twice as much bandwidth as NRZ: to simplify the situation, it is possible to code a 1 as a transition and a 0 as no transition, or vice versa. This coding is called NRZI (Non-Return-to-Zero Inverted), a twist on NRZ, and it used by <strong>USB</strong> standard. However, if NZR has problems with long runs of 1s… NZRI, an inverted version of NRZ, has problems with long runs of 0s. In U.S. (T1 telephone lines) the problem was resolved by mapping small groups of bits to be transmitted using a code table called <strong>4B/5B</strong> (you can find the table of translation online). Every 4 bits are mapped into a5-bit patterns with a fixed translation table, with no more than three consecutive 0s. Eventullay, original patterns were XORed with pseudo-random seed (that also the receiver must know).</p>

<h5 id="balanced-signals">Balanced Signals</h5>
<p>Signals that have as much positive voltage as negative voltage even over short periods of time are called balanced signals. Without go in depth with maths and religious details, a straightforward way to construct a balanced code is to use two voltage levels to represent a logical 1, (say +1 V or −1 V) with 0 V representing a logical zero. To send a 1, the transmitter alternates between the +1 V and −1 V levels so that they always average out. This scheme is called bipolar encoding or AMI Alternate Mark Inversion.</p>

<h4 id="passband-transmission">Passband Transmission</h4>
<p>Both for regulatory constraints (which frequencies you can use) and the need to avoid interference, specially for wireless (antenna dimensions are related to frequencies transmission) but even for wires, placing a signal in a given frequency band is useful to let different kinds of signals coexist on the channel. This kind of transmission is called passband transmission because an arbitrary band of frequencies is used to pass the signal. There are several ways to make a passband transmission.</p>
<ul>
  <li><strong>Amplitude Shift Keying</strong> (ASK): two different amplitudes are used to represent 0 and 1: further, more than two levels can be used to represent more symbols (change <script type="math/tex">\lambda</script>);</li>
  <li><strong>Frequency Shift Keying</strong> (FSK): two or more different tones are used (change <script type="math/tex">f</script>, high frequency low frequency);</li>
  <li><strong>Phase Shift Keying</strong> (PSK): the wave is systematically shifted 0 or 180 degrees at each symbol period;</li>
</ul>

<p>These schemes all change one <em>natural</em> characteristic of a fixed signal: maybe could be used together to transmit more bits per symbol (increasing the baud rate). This is exactly what happened whit <strong>costellation diagram</strong>. This are made of dots used to combine all togheter the methods described (QPSK): imagine cartesian plane, the phase of a dot is indicated by the angle a line from it to the origin makes with the positive x-axis. The amplitude of a dot is the distance from the origin.</p>

<h5 id="why-multiplexing-for-real">Why multiplexing (for real)</h5>
<p>This kind of multiplexing tricks I exposed have been developed by bad companies (I mean, all companies) to share lines among many signals. But…how? Of course, in several original, save-money ways. The first is the simplest one: it is called <strong>Frequency Division Multiplexing</strong> or FDM and takes advantage of passband transmission to share a channel. It divides the spectrum into frequency bands, with each user having exclusive possession of some band in which to send their signal. At the same time, users share the medium in a particular band. Another way is called Time Division Multiplexing, or TDM: have you already got it? The users take turns (in a <em>round-robin</em><sup id="fnref:rr"><a href="#fn:rr" class="footnote">2</a></sup> fashion), each one periodically getting the entire bandwidth for a little burst of time. There is also a statistical variation (STDM) in which the individual streams contribute to the multiplexed stream not on a fixed schedule, but according to the statistics of their demand.</p>

<p><span style="color:#A04279; font-size: bold;">CDMA</span>
There is also a third variation called <strong>CDMA</strong> (Code Division Multiple Access). I didn’t understand how it works, but I found interesting this analogy, directly from Computer Networks: you are in an airport lounge with many pairs of people conversing. <strong>TDM</strong> is comparable to pairs of people in the room taking turns speaking. <strong>FDM</strong> is comparable to the pairs of people speaking at different pitches, some high-pitched and some low-pitched such that each pair can hold its own conversation at the same time as but independently of the others. <strong>CDMA</strong> is comparable to each pair of people talking at once, but in a different language. The French-speaking couple just hones in on the French, rejecting everything that is not French as noise. Thus, the key to <strong>CDMA</strong> is to be able to extract the desired signal while rejecting everything else as random noise. How it works?</p>

<p>Each bit time is subdivided into m short intervals called chips. To transmit a 1 bit, a station sends its chip sequence. To transmit a 0 bit, it sends the negation of its chip sequence. No other patterns are permitted. Thus, for m = 8, if station A is assigned the chip sequence (+1 −1 +1 +1 -1 −1 +1 +1), it can send a 1 bit by transmiting the chip sequence and a 0 by transmitting (-1 +1 -1 −1 +1 +1 −1 −1). Thus, CDMA permits the stations to use the entire channels, without using only a single portion of the frequency spectrum (as FDM does). Wait a minute: what does it happen when more than one station begin to transmit? The signals adds to each others: so if three stations output +1 V and one station outputs −1 V, 2 V is received. To recover the bit stream of an individual station, if the received chip sequence is <script type="math/tex">S</script> and the receiver is trying to listen to a station whose chip sequence is <script type="math/tex">C</script>, the normalized inner product, <script type="math/tex">S \cdot C</script>, is computed by the receiver.</p>

<h3 id="part-4-of-4---the-dark-side-of-multiplexing">Part 4 of 4 - The dark side of multiplexing</h3>
<p>If you are still alive and you arrived here without becoming crazy, you certainly know the story of telephone. Bell, in the beginning a few phones, then offices, with operators that manually switch cables, etc. But the number of users continued growing and, in the end, by 1890 the three major parts of the telephone system were in place: the switching offices, the wires between the customers and the switching offices (by now balanced, insulated, twisted pairs instead of open wires with an earth return), and the long-distance connections between the switching offices.</p>

<h4 id="the-bell-telephone-model">The Bell telephone model</h4>
<p>This model has remained essentially intact for over 100 years. A simple description follow.</p>
<ul>
  <li>each telephone has two copper wires coming out of it that go directly to the telephone company’s nearest end office called <strong>local central office</strong>[^^lcod];</li>
  <li>the two-wire connections between each subscriber’s telephone and the end office are known in the trade as the <strong>local loop</strong>.</li>
</ul>

<p>If a user <script type="math/tex">U_a</script> attached to a given <strong>end office</strong> <script type="math/tex">O_1</script> calls another user <script type="math/tex">U_b</script> attached to <script type="math/tex">O_1</script>, the switching mechanism of the office sets up a <strong>direct electrical connection</strong> between the two <strong>local loops</strong>. This connection remains intact for the duration of the call.
If the <script type="math/tex">U_b</script>’s telephone is attached to another <strong>end office</strong> <script type="math/tex">O_2</script>, there’s a different procedure: each end office has a number of <strong>outgoing lines</strong> to one or more nearby switching centers, called <strong>toll offices</strong> (or, if they are within the same local area, tandem offices).</p>

<p>The cables that connect end office to toll office are colled <strong>toll connecting trunks</strong>: topology of these offices and disposition change from country to country. The toll offices communicate with each other via high-bandwidth <strong>intertoll trunks</strong> and. Even today, the telephone system consists of:</p>
<ul>
  <li>Local loops (analog twisted pairs going to houses and businesses);</li>
  <li>Trunks (digital fiber optic links connecting the switching offices);</li>
  <li>Switching offices (where calls are moved from one trunk to another);
The local loops are critical because provide everyone access to the whole system. Over trunks multiplexing is used to apply <strong>FDM</strong> and <strong>TDM</strong> to do it. How is it possible to switch? If you want to know more about this argument, search for LATAs, LEC and IXC.</li>
</ul>

<p>##### A deep dive in local loop: Modems, ADSL, and Fiber aka <em>how the telephone system really works</em>
The two-wire local loop, also know as the “last mile” between the end office and the houses. In the beginning of the Internet era for customers (of my generation, I mean XD) telephone modems sent digital data between computers over the narrow channel the telephone network provides for a voice call. After a while, they were displaced by broadband technologies (such as ADSL) that reuse the local loop to send digital data from a customer to the end office, where they are siphoned off to the Internet. Both modems and ADSL must deal with the limitations of old local loops: relatively narrow bandwidth. If you want to know more about the evolution of QPSK, <em>constellation points</em>, the table to correct errors used to gain speed in transfer rate (have a look at Trellis Coded Modulation), look at the sources. Let’s move one step forward to ADSL, without entering in the details of modem evolution history.</p>

<h5 id="adsl">ADSL</h5>
<p>The xDSL services have all been designed with certain goals in mind:</p>
<ul>
  <li>work over the existing old Category 3 twisted pair local loops;</li>
  <li>not affect customers’ existing telephones and fax machines;</li>
  <li>be much faster than 56 kbps;</li>
  <li>should be always on, with just a monthly charge and no per-minute charge;</li>
</ul>

<p>The trick that makes xDSL (Asymmetric DSL is the most popular, but there are many of them) work is that when a customer subscribes to it, the incoming line is connected to a different kind of switch, one that does not have the filter imposed in the end office for voice lines, thus making the entire capacity of the local loop available. The limiting factor then becomes the physics of the local loop - which supports roughly 1 MHz - and not anymore the artificial 3100 <script type="math/tex">Hz</script> bandwidth created by the filter at the point where each local loop terminates in the end office.
Unfortunately, the capacity of the local loop falls rather quickly with distance from the end office as the signal is increasingly degraded along the wire. ADSL use OFDM (also called DMT): this is a sort of FDM applied to digital transmission: pratically, each subcarriers’ signal is packed with the others. It is implemented using a Fourier transform over the signal. One channel is used for the telephone, the others for downstream and upstream with different numbers.</p>

<p>##### Fiber To The Home
Th fibers from several houses (up to 100) are joined together so that only a single fiber reaches the end office per group. In the downstream direction, optical splitters divide the signal (encrypted) from the end office so that it reaches all the houses. In the upstream direction, optical combiners merge the signals from the houses into a single signal that is received at the end office. This architecture is called a Passive Optical Network or PON. Downstream is simple: upstream is not. The houses ask for a time slots at the end office to send signal. Both TDM and FDM are used for fiber optics: the TDM is called SONET, the FDM is called wavelength division multiplexing or WDM. For more details look at the sources.</p>

<h4 id="switching">Switching</h4>
<p>There are two types of switching.</p>

<p><span style="color:#A04279; font-size: bold;">Circuit Switching</span>
The basic idea is that pnce a call has been set up, a dedicated path between both ends exists and will continue to exist until the call is finished. The elapsed time between the end of dialing and the start of ringing can easily be 10 sec, more on long-distance or international calls. During this time interval, the telephone system is hunting for a path.</p>

<p><span style="color:#A04279; font-size: bold;">Packet Switching</span>
With this technology, packets are sent as soon as they are available. There is no need to set up a dedicated path in advance. It is up to routers to use store-and-forward transmission to send each packet on its way to the destination on its own: of course packets can arrive out of order. Further, because no bandwidth is reserved with packet switching, packets may have to wait to be forwarded.</p>

<h3 id="conclusion">Conclusion</h3>
<p>In the book of Tanenbaum, before the chapter about the datalink layer, many more details on the telephone and television lines are still exposed. However, for my purposes I would like to concentrate more on levels related to the development of applications and maintenance of IT infrastructures. However, I hope this second post helps you in forming a general idea and have trust about the functioning of the physical level, on which so much time has been spent and there would be so much to be said yet!</p>

<p>Thank you everybody for reading. For those who missed the introduction, <a href="https://made2591.github.io/posts/network-layers-0">here</a> the link.</p>

<div class="footnotes">
  <ol>
    <li id="fn:sf">
      <p>In mathematics, physics and engineering, <script type="math/tex">sinc(x)</script> denotes the cardinal sine function or <a href="https://en.wikipedia.org/wiki/Sinc_function">sync function</a>&nbsp;<a href="#fnref:sf" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:rr">
      <p>In science, always <a href="https://en.wikipedia.org/wiki/Round-robin">here</a>&nbsp;<a href="#fnref:rr" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/network-layers-1</wp:post_id>
        <wp:post_date>2018-01-05T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-01-05T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="network"><![CDATA["network",]]></category>
        
          <category domain="post_tag" nicename="iso-osi"><![CDATA["iso/osi",]]></category>
        
          <category domain="post_tag" nicename="tcp-ip"><![CDATA["tcp/ip",]]></category>
        
          <category domain="post_tag" nicename="saga"><![CDATA["saga"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[My first textual game]]></title>
        <link>made2591.github.io/posts/textual-game</link>
        <pubDate>2018-01-02T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="a-beautiful-childhood">A beautiful childhood</h3>
<p>I’ve never been a fan of videogames, neither as a child nor today: do not get me wrong, as many guys of my generation I also owned and played with the legendary <strong>PlayStation 1</strong> (1995)<sup id="fnref:p1"><a href="#fn:p1" class="footnote">1</a></sup> and <strong>PlayStation 2</strong><sup id="fnref:p2"><a href="#fn:p2" class="footnote">2</a></sup> by Sony and the <strong>Nintendo Game Boy</strong><sup id="fnref:gb"><a href="#fn:gb" class="footnote">3</a></sup>. It was fun, but not so much as playing to videogames born a few years before I was born. 
In the 80s, there were not yet the powerful graphics chips that today can be found with a few hundred euros. How did the videogames work? It’s simple: without graphics. There were many <em>textual games</em> and in my opinion, for many vintage lovers, they would still be cool today. My generation has lost this advantage of literaly <em>building with fantasy the world around a game</em>. So, some days ago I found my self thinking back to Sheldoon Cooper that plays with the game Dungeon in the Big Bang Theory<sup id="fnref:bbt"><a href="#fn:bbt" class="footnote">4</a></sup>, or to the kids of <em>Stranger Things</em> by Netflix, or to my father, to whom I gave an original <em>Playstation 1</em> with the first TombRaider(s), and I asked myself <em>how it would be possible today to play again one of those text games</em> that were so popular in that decade…to the point of deciding to create one of my own.</p>

<p align="center"><img src="https://res.cloudinary.com/lmn/image/upload/e_sharpen:100/f_auto,fl_lossy,q_auto/v1/gameskinnyc/c/o/l/colossalcaveadventure1-100023877-orig-99278.jpg" style="width: 100%; marker-top: -10px;" /></p>

<p>In this article I will talk about how to create a vintage 80s game! If you want to download the a technical preview of textual Tomb Raider right now, <a href="http://github.com/made2591/tomb-raider">here</a> is the source code. If you want to find out how to build a game of the 80s - simply using Python<sup id="fnref:ff"><a href="#fn:ff" class="footnote">5</a></sup> - read on!</p>

<h3 id="recipe-for-a-good-game">Recipe for a good game</h3>
<p>Building a videogame, textual or not, is not the typical task for a computer scientists. Then, regardless of what your goal is and the complexity of the game you have in mind to create, you must first have a clear idea of <em>how you want</em> your video game to work. In my honest opinion, a textual game must be as adventurous as possible, with all the characteristics of a classic modern rpg: a single player, items of different nature that affect the player and the environment in which he is immersed, player’s life and/or statistics that interfere in performing certain actions, a simple and clear objective, even broken up into several simple tasks, one or more maps in which to hardly extricate themselves, possibly divided into levels too.</p>

<h4 id="ingredients">Ingredients</h4>
<p>The first thing you need to build your adventure textual game is a character, usually described in the beginning of the game: this is done to help the player imagine its role in the adventure. I started with a modify version of the game description provided in the <a href="https://www.wikiraider.com/index.php/Caves">wikiraider</a> page:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Welcome to Tomb Raider I! You will interprete the role of Lara, a British archaeologist and treasure hunter, most commonly known for her discovery of several noted artefacts, including Excalibur, the fabled sword of King Arthur. You was hired by Jacqueline Natla to travel to the Andes mountain range, in Peru, in search of an artefact known as the Scion, which rests in the Tomb of Qualopec somewhere in the mountains. Accompanied by a guide you arrived at a huge pair of stone doors, the entrance to an ancient Incan civilisation. You climbed to the top of the doors and found a hidden switch that opens the doors. A pack of ferocious wolves suddenly attacked you from inside the cave. You leaped to the ground, killing the wolves in a barrage of pistol fire. However, you are too late, and your guide is dead in the snow. 
Alone, you headed into the caves in search for the village Vilcabamba.
</code></pre></div></div>

<p>What else?</p>
<ul>
  <li>An amazing story: I decided to use the Tomb Raider story because I love Tomb Raider and Lara is one of my favourite characters;</li>
  <li>Previous adventure game experience: I think this could be ufeful in further step to build your textual game but not essential ;)</li>
</ul>

<p>…and?</p>
<ul>
  <li>A Python interpreter;</li>
  <li>A little bit of automata theory;</li>
</ul>

<p>That’s all! For those who are wondering why it is necessary to have theoretical foundations on automata, I answer “because this is not a guide to build textual game for painters but computer scientists, so let’s add some nerd stuff to make things a little bit nerdy”. Just kidding. Let’s move one step forward, introducing game formalism and settings.</p>

<h3 id="formalism-and-settings">Formalism and settings</h3>
<p>In many years of study I learnt that <em>working with semantics</em> is one of the most difficult task in NLP pipeline<sup id="fnref:nlp"><a href="#fn:nlp" class="footnote">6</a></sup>: if you don’t believe me have a look to one of my <a href="https://github.com/made2591/cognitive-system-postagger">old repo</a> on POS tagging with CYK<sup id="fnref:cyk"><a href="#fn:cyk" class="footnote">7</a></sup>. The point is simple: when you write a few line of codes, it’s easy for a compiler or an interpreter to <em>understand</em> what you mean. This is because the language you use is well formalised. The natural language is not well formalised: it’s ambiguous, not deterministic, and works because human beings dialogue between each others with the help of thousand of other structures and methods to support the language. If we were to speak unambiguously without using any system of logical inference on the context, ignoring the gestures, tones of voice and facial nuances (actually, <em>understanding</em> in the same way a compiler or a code interpreter would do), probably we would take 2 hours of conversation just to say hello to a friend of ours!</p>

<p>Over the years, I like to think also thanks to the incredible work of scientists like Chomsky<sup id="fnref:nc"><a href="#fn:nc" class="footnote">8</a></sup>, it was possible to build theories on the languages, on the grammars that support the more regular parts of them and, with the help of probabilistic calculation and with complicate deterministic systems, in the end Google translate was born. But there is a problem: <em>how</em> could a game, whose input is textual, work in the early 80s? In other words, <em>how</em> could a PC with a very little computational capacity (and without any theoretical support yet) correctly interpret sentences like <code class="highlighter-rouge">jump into leaves</code> or <code class="highlighter-rouge">what is a rpbd</code> and so on. 
I didn’t want to find in some webpage a pre-packaged answer to this question, because I like challenges: so I simply thought that input sentences in textual games are always simple… and this means that maybe it was possible to model textual analysis at a lower level: instead of working on <em>semantics</em>, I realized I could work on the <em>syntax</em>: in that moment I thought I could use a finite state automa.</p>

<h4 id="the-games-skeleton-finite-state-automa">The game’s skeleton: finite state automa</h4>
<p>Ok, I will use a finite state automa to build the game: how? Let’s start with the basic concept: look at the picture.</p>

<p align="center"><img src="https://image.ibb.co/gs7zBb/automa.png" alt="perceptron" style="width: 250px; marker-top: -10px;" /></p>

<p>In a textual game you are in a situation, you can do some actions, and change the situation. This can be implemented as a simple finite state automa, in which each possible scenario is a state, with the <em>right</em> action that point to the next state in the story, and <em>epsilon</em> moves that simply don’t make any difference to your state. How do I build it? Starting from the actions: you first have to define which actions are allowed in your game. The original Tomb Raider is a free roaming game with several different kind of jump, move, climb and attack actions with many different interactions with items. If you want to create a more accurate rebuild, ok…you don’t, so just start building a simple set of action.</p>

<p>For Lara, I add to my set of allowed actions <code class="highlighter-rouge">walk</code>, <code class="highlighter-rouge">run</code>, <code class="highlighter-rouge">jump</code>, <code class="highlighter-rouge">climb</code>, <code class="highlighter-rouge">examine</code>, <code class="highlighter-rouge">get</code>, <code class="highlighter-rouge">use</code>, <code class="highlighter-rouge">shot</code> and of course <code class="highlighter-rouge">save</code><sup id="fnref:sv"><a href="#fn:sv" class="footnote">9</a></sup>. After that, you can think about the states: each state is made of a description (printed in the cli of the player), than some items and - eventually - some npc that can interact with the main player. I thought about a state as simple dictionary of actions (keys) with other states as values (other keys) to which they bring to. Than, you can define items for a state with list of keywords, and so on.</p>

<p>Ok, we found out that finite state automa could be used to build your textual game. But how can you easly create and manipulate a finite state automa from a cli? Using dot? Of course, but an easier way came to my mind. You can use a new and innovative format: a JSON file.</p>

<h4 id="the-json-game">The JSON game</h4>
<p>Before definining a state, or <code class="highlighter-rouge">step</code>, let’s start with the <code class="highlighter-rouge">player</code>: he usually has a <code class="highlighter-rouge">name</code>, <code class="highlighter-rouge">life</code>, the <code class="highlighter-rouge">level</code> and the <code class="highlighter-rouge">step</code> he reached, the <code class="highlighter-rouge">items</code> he <strong>collected</strong> over the time, and some other generic properties useful for setup gaming speed and output.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
	</span><span class="s2">"player"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"columns"</span><span class="p">:</span><span class="w"> </span><span class="mi">80</span><span class="p">,</span><span class="w"> 
        </span><span class="s2">"items"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w"> 
        </span><span class="s2">"level"</span><span class="p">:</span><span class="w"> </span><span class="s2">"cave"</span><span class="p">,</span><span class="w"> 
        </span><span class="s2">"life"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="p">,</span><span class="w"> 
        </span><span class="s2">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"made2591"</span><span class="p">,</span><span class="w"> 
        </span><span class="s2">"step"</span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="p">,</span><span class="w"> 
        </span><span class="s2">"velocity"</span><span class="p">:</span><span class="w"> </span><span class="s2">"debug"</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>The level struct could be defined as follow:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
	</span><span class="s2">"player"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="s2">"levels"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"cave"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"levelDescription"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Welcome to Tomb Raider I! 
				 You will interprete the role of Lara [..]"</span><span class="p">,</span><span class="w"> 
            </span><span class="s2">"steps"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="s2">"0"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="s2">"availableActions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                        </span><span class="s2">"examine"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> 
                        </span><span class="s2">"get"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> 
                        </span><span class="s2">"run"</span><span class="p">:</span><span class="w"> </span><span class="s2">"10"</span><span class="p">,</span><span class="w"> 
                        </span><span class="s2">"use"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> 
                        </span><span class="s2">"walk"</span><span class="p">:</span><span class="w"> </span><span class="s2">"10"</span><span class="p">,</span><span class="w"> 
                        </span><span class="p">[</span><span class="err">..</span><span class="p">]</span><span class="w">
                    </span><span class="p">},</span><span class="w"> 
                    </span><span class="s2">"availableItems"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                        </span><span class="s2">"footprints"</span><span class="w">
                    </span><span class="p">],</span><span class="w"> 
                    </span><span class="s2">"stepDescription"</span><span class="p">:</span><span class="w"> </span><span class="s2">"There are 
                    	 some footprints coming from the North"</span><span class="w">
                </span><span class="p">},</span><span class="w"> 
                </span><span class="s2">"10"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">[</span><span class="err">..</span><span class="p">]</span><span class="w"> </span><span class="p">},</span><span class="w">
                </span><span class="p">[</span><span class="err">..</span><span class="p">]</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>As you can see, some actions don’t have a step value, and this implies that those actions don’t bring you anywhere / give you anything / etc. I wrote only a few transaction to the next state, but can you can add to the dictionary as many as you want.</p>

<p><strong>NOTE</strong>: to make the game more playable, the player needs always a feedback, not only to gather new informations about the state, or even to understand more about items or interact with npc: to do that, I setup some default messages for <em>epsisol moves</em>: in the core game you can use this default message for each empty move typed by the player.</p>

<p>To summarize, what we said until now seems ok for moving action but…what about suffix and prefix, or action like <code class="highlighter-rouge">examine the footprints</code>?</p>

<h3 id="different-type-of-action">Different type of action</h3>
<p>Actually, actions to go ahead in the game (<em>aka</em> available transaction between steps in the finite state automa), are not so simple as I argued. In fact, I splitted the allowed actions set in my game into two <em>game-agnostic</em> set.</p>

<h4 id="move-actions">Move actions</h4>
<p>The move action are simple: you can <code class="highlighter-rouge">walk/run/jump</code> in all direction (<code class="highlighter-rouge">straight/back/left/right</code>). To be more confortable, our core allow the player typing even the simple move action <code class="highlighter-rouge">move</code> or <code class="highlighter-rouge">run</code>, mapping this to straight direction by default.</p>

<h4 id="interaction-actions">Interaction actions</h4>
<p>The interaction actions are actions that <em>may</em> require some additionatl information: why may? Because, I thought that could be useful to be able to <code class="highlighter-rouge">examine</code> both a room, to gather more information about the room itself, and a specific item in the scene, to get more information about the next steps to do. You can think about interation actions as a <em>jump to a secondary chain of steps in the level</em> as shown in the schema below:</p>

<p align="center"><img src="https://image.ibb.co/hPR4uw/automa_epsilon_move.png" alt="perceptron" style="width: 650px; marker-top: -10px;" /></p>

<p>In this case, the chain is made of one single <em>step</em>: actually, it is not a real step, because if the <em>secondary story</em> is made of a single assertion that need to help the player to enrich his knowledge about the state, you don’t need a state. To handle this situation, I created a step, I print the step description, but I don’t change the state, without jumping to the empty state. If the optional / secondary chain is made of more than one action - find a secret or optional item such as a medikit, you can create a real chain of effective states and let jump to the main story from the last state of the chain - of course if it is plausible in the history. In the example above, the information about footprints origin could help the player imagine an opponent npc to kill in the garden and check if the he has guns, or bullets, or whatever, to kill him.</p>

<h3 id="state-with-consequences">State with consequences</h3>
<p>Some state has consequences: you might thinking “what do you mean?!”. Ok, let say that you jump into a state like this:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Three wolves are approaching in a hurry, they will attack you!
</code></pre></div></div>

<p>and you’re ok, because a finite-state-automa based textual game is a game with a sort of stop motion graphic setup XD but remember…you are Lara Croft and those wolves are real. It is very likely that in the next state, or after a few, you will die… Fortunately, you are the programmer of the game, so the first problem you have to deal with is “how can I die in a finite state automa?”</p>
<ul>
  <li>Option 1: in the next step you gonna die. This is simple to implement but wolves, or falling from a too high platform, or the insect sting don’t hurt you with the same intensity in real world, and even if this solution will end in a “game over state” - in other words, you can’t be wrong without die - <em>one-shot</em> way;</li>
  <li>Option 2: you create <em>consequences</em> in each steps;</li>
</ul>

<p>Look at the code:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
	</span><span class="s2">"player"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="p">},</span><span class="w">
    </span><span class="s2">"levels"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"cave"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"levelDescription"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Welcome [..]"</span><span class="p">,</span><span class="w"> 
            </span><span class="s2">"steps"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="s2">"0"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="s2">"availableActions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">[</span><span class="err">..</span><span class="p">]</span><span class="w"> </span><span class="p">},</span><span class="w"> 
                    </span><span class="s2">"availableItems"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"footprints"</span><span class="p">],</span><span class="w"> 
                    </span><span class="s2">"stepDescription"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The wolves are attacking you!"</span><span class="w">
                    </span><span class="s2">"consequences"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"life"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">-10</span><span class="w"> </span><span class="p">}</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="s2">"10"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">[</span><span class="err">..</span><span class="p">]</span><span class="w"> </span><span class="p">},</span><span class="w">
                </span><span class="p">[</span><span class="err">..</span><span class="p">]</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>With a simple field you are done! Due to the consequences on some properties of the character, it will be easy to recreate the effect of attacks / falls / other types of interaction between the player and npc, or elements in the scene, describing the effects at each progression of state, through steps evolution in the automa. For example, with this mode, you can easly simulate a poisoning, as a consequence that for 10 steps decreases life according to a geometric series.</p>

<h4 id="target">Target</h4>
<p>The goal must always be clear: don’t write too complicated descriptions to imagine, and always give a suggestion in each state about what the next move might be. A very important thing is the introduction of phrases that bind the various environments through which the player moves: for instance, sentences like</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>There are some footprints coming from the North
</code></pre></div></div>

<p>are perfect to suggest without any consequences that maybe the North will be a direction involved in exploration (even if not exactly in the further step, but in some others in the story). Details can be left to secondary epsilon moves that add elements of the scene only if the player considers it necessary through actions such as <code class="highlighter-rouge">examine</code>.</p>

<h4 id="non-player-character-npc">Non-player character (NPC)</h4>
<p>To describe the behavior of the npc and the effects of the latter on the main player, you can use lists and dictionaries. For example, once the story was written, to begin with it is possible to create a list of all the entities that could interact with the main player during the evolution of the game. It is also possible to standardize some behaviors by creating distinct types of npc: for example, ferocious animals attacks provide damage to the player more or less always with the same intensity, or increasing intensity as the game progresses, or randomly in a given range. For the caves level of Tomb Raider, I defined the following npc(s):</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NPC_KEYWORDS = ["wolf", "wolves", "bear", "bears", "bat", "bats"]
</code></pre></div></div>

<p>Also arrows from walls can hurt you, so…try to model different type of npc if you want!</p>

<h4 id="actions">Actions</h4>
<p>The actions are simple transactions to new states: I use items list to prohibit the player from, for instance, getting more than one medikit, and so on. The list of items in a scene (in a state) can also be useful to establish on which entities presented in the description it is possible to perform interaction actions (get, use, etc). You can defined as many actions as you want, as I said before. To help the player remember how to use the actions, I always make available in a help command that allows you to scroll in the style of man the list of actions available in the game, with instructions on the uses and effects of the same.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">    </span><span class="s2">"actions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"walk"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"usageMessage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The WALK command lets Lara moving slow into the scenario. If Lara is not stucked by something in the scene, or there's any reason why she can not move, you will be always able to walk. You can move in a specific direction in the scene using the command WALK [STRAIGHT/DOWN/LEFT/RIGHT]. Note: if you type and execute WALK, you will WALK STRAIGHT by default."</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="s2">"climb"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"usageMessage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The CLIMB command lets Lara climb up/on something in the scene. You won't be always able to climb: Lara need something to climb up/on to complete this action. You can climb in the scene using the command CLIMB [UP/ON] [SOMETHING]. Note: if you type and execute CLIMB without specific element, Lara won't complete the action."</span><span class="w">
        </span><span class="p">},</span><span class="w"> 
        </span><span class="s2">"examine"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"usageMessage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The EXAMINE action is useful to help you explore the scene or a particular item in the scene. You can examine the scene using simply EXAMINE. If you try to examine an item you don't have in your pocket, the examine action will fail and nothing happens. You can examine an item using the command EXAMINE [ITEM_NAME] with the name of an item in the scene."</span><span class="w">
        </span><span class="p">},</span><span class="w"> 
        </span><span class="s2">"get"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"usageMessage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The GET action is used to get an item from the scene. If there are no items in the scene, nothing will be added to your pocket. You can get an item using the command GET [ITEM_NAME] with the name of an item in the scene."</span><span class="w">
        </span><span class="p">},</span><span class="w"> 
        </span><span class="s2">"use"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"usageMessage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"The USE action is used to use an item you hold. If you can't use the item in the scene than the item will remain in your pocket. You can use an item using the command USE [ITEM_NAME] with the name of an item in the scene."</span><span class="w">
        </span><span class="p">},</span><span class="w"> 
        </span><span class="p">[</span><span class="err">..</span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w"> </span></code></pre></figure>

<h4 id="items">Items</h4>
<p>The items interact with the player: eventually, they can also enable it for actions that are not available in a particular state. For example, it is not possible to light a flare to illuminate the scene if the player does not have a flare in the backpack, and so on. Another way to interact with items is to setup <code class="highlighter-rouge">REGEX</code> for actions that involve them, but I think it is more complicated. Write to me if you want more detail of these XD. <code class="highlighter-rouge">REGEX</code> could be useful in main to parse the sentece typed in input and loop through the automa.</p>

<h4 id="conclusion-first-part">Conclusion (first part)</h4>
<p>Until now I wrote about how to create the logic behind a text game using finite-state automata: in the next paragraph I will talk about how I started working at Tomb Raider!</p>

<h3 id="tomb-raider">Tomb Raider</h3>
<p>Tomb Raider is a very difficult and complicated game to model: Lara can move through many actions, the set of items and weapons available is very extensive after a few hours of play, the enigmas are difficult and it is complicated to move through the rooms to reach levers, buttons, platforms and gear systems. Moreover, it is a non-textual game, so you need to replay the game and manually describe all the scenes from scratch in a new form. To help me with this difficult task, I wrote a simple Python script that does nothing more than generate a story <em>starting from a text</em>, with some basic default actions to progress through the states, and some tricks to set some of the properties described above.</p>

<h4 id="a-parser-to-find-them-all">A parser to find them all</h4>
<p>Tomb Raider is one of those games so complex that it is not difficult to imagine that a lot of online solutions have been written: looking, I found in <a href="https://www.wikiraider.com/">wikirider</a> a good example to start from - even if today I do not consider it the best source. In any case, what we need is a description of the game. For starters, I used the <a href="https://www.wikiraider.com/index.php/Walkthrough:Caves">caves</a> walkthrough page as source. After the copy of the plaintext from the HTML page to a txt file, I used the following to create my draft version of states:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># separate lines</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"./levels/caves.txt"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="n">lines</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()</span>
	<span class="n">steps</span> <span class="o">=</span> <span class="p">[]</span>
	<span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
		<span class="n">steps</span> <span class="o">+=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">"."</span><span class="p">)</span>
<span class="c"># clean phase</span>
<span class="n">steps</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="s">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">steps</span> <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="s">""</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">]</span></code></pre></figure>

<p>The last line cleans the states list (list of sentences in my file) removing the empty lines and the titles. After that, you can create the steps for the level and also setup items / consequences looking npc and items in a (previously initialized) npc and items list of keywords. An example:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">step</span> <span class="ow">in</span> <span class="n">steps</span><span class="p">:</span>

	<span class="c"># create level structure</span>
	<span class="n">GAME_STRUCTURE</span><span class="p">[</span><span class="s">"levels"</span><span class="p">][</span><span class="s">"cave"</span><span class="p">][</span><span class="s">"steps"</span><span class="p">][</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
		<span class="s">"stepDescription"</span> <span class="p">:</span> <span class="n">step</span><span class="p">,</span>
		<span class="s">"availableItems"</span> <span class="p">:</span> <span class="p">[],</span>
		<span class="s">"availableActions"</span> <span class="p">:</span> <span class="p">{},</span>
	<span class="p">}</span>

	<span class="c"># insert items</span>
	<span class="k">for</span> <span class="n">keyword</span> <span class="ow">in</span> <span class="n">ITEMS_KEYWORDS</span><span class="p">:</span>
		
		<span class="c"># check if keyword of item appears in step description and it not already added to items list</span>
		<span class="k">if</span> <span class="n">keyword</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="ow">in</span> <span class="n">step</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="ow">and</span> <span class="n">keyword</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">GAME_STRUCTURE</span><span class="p">[</span><span class="s">"levels"</span><span class="p">][</span><span class="s">"cave"</span><span class="p">][</span><span class="s">"steps"</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s">"availableItems"</span><span class="p">]:</span>

			<span class="c"># add to items</span>
			<span class="n">GAME_STRUCTURE</span><span class="p">[</span><span class="s">"levels"</span><span class="p">][</span><span class="s">"cave"</span><span class="p">][</span><span class="s">"steps"</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s">"availableItems"</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">keyword</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>

	<span class="c"># create level structure</span>
	<span class="n">GAME_STRUCTURE</span><span class="p">[</span><span class="s">"levels"</span><span class="p">][</span><span class="s">"cave"</span><span class="p">][</span><span class="s">"steps"</span><span class="p">][</span><span class="n">index</span><span class="p">][</span><span class="s">"availableActions"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>

		<span class="s">"walk"</span> <span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="o">+</span><span class="n">STEP_OFFSET</span><span class="p">),</span>
		<span class="s">"walk straight"</span> <span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">index</span><span class="o">+</span><span class="n">STEP_OFFSET</span><span class="p">),</span>
		<span class="p">[</span><span class="o">..</span><span class="p">]</span>

	<span class="n">index</span> <span class="o">+=</span> <span class="n">INDEX_OFFSET</span></code></pre></figure>

<p>If you have a look to my previous examples, I setup state identifier with an <code class="highlighter-rouge">INDEX_OFFSET</code> (value = 10). Why? Because after the automatic phase, you need to add / modify each steps to create a real gaming experience, and in the main loop through each state could be usefull to have keys that can be ordered but also the ability to insert new states (primary or secondary) without breaking the original order.</p>

<h4 id="formalize-situations">Formalize situations</h4>
<p>The next step in creating a safe and easy way to expand and test the entire game-experience, is to formalize the several situations ih which the player could come across: the discovery of a medikit, the attack by an NPC. Every situation is repeatable by abstracting to the automaton that describes its evolution, and these automata can then be populated with distinct descriptions in order to be reused when necessary during the description of each level. And that’s how I now have to formalize separate automata and update my guide … XD</p>

<h4 id="conclusion-second-part">Conclusion (second part)</h4>
<p>If you enjoy this article, please share it! <a href="http://github.com/made2591/tomb-raider">Here</a> the source code of my work-in-progress Tomb Raider textual version.</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:p1">
      <p>Yes, it’s incredible. Playstation 1 goes back to 90s. The console was released on 3 December 1994 in Japan, 9 September 1995 in North America, 29 September 1995 in Europe, and for 15 November 1995 in Australia - <a href="https://en.wikipedia.org/wiki/PlayStation_(console)">source and more</a>&nbsp;<a href="#fnref:p1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:p2">
      <p>The Playstation 2 belongs to millennials OMG - <a href="https://en.wikipedia.org/wiki/PlayStation_2">source and more</a>&nbsp;<a href="#fnref:p2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:gb">
      <p>The first version of Game Boy is older than PS1 - <a href="https://en.wikipedia.org/wiki/Game_Boy">source and more</a>&nbsp;<a href="#fnref:gb" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:bbt">
      <p>The Big Bang Theory, <a href="http://www.imdb.com/title/tt1632243/">The Irish Pub Formulation</a>, Season 4 Episode 6&nbsp;<a href="#fnref:bbt" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:ff">
      <p>I would like to work to more modern version with Docker and Spring Boot!&nbsp;<a href="#fnref:ff" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:nlp">
      <p>Read more about <a href="https://en.wikipedia.org/wiki/Natural_language_processing">Natural language processing</a>&nbsp;<a href="#fnref:nlp" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:cyk">
      <p>Ok, this could be hard for those who are new to NLP problems…be careful: <a href="https://en.wikipedia.org/wiki/CYK_algorithm">CYK</a>&nbsp;<a href="#fnref:cyk" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:nc">
      <p>Pioner in language theory <a href="https://en.wikipedia.org/wiki/Noam_Chomsky">Wikipedia</a>&nbsp;<a href="#fnref:nc" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:sv">
      <p>To save the game in the original Tomb Raider (PS1 version) you need some crystal you encounter during the levels.&nbsp;<a href="#fnref:sv" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/textual-game</wp:post_id>
        <wp:post_date>2018-01-02T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2018-01-02T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="vintage"><![CDATA["vintage",]]></category>
        
          <category domain="post_tag" nicename="eighties"><![CDATA["eighties",]]></category>
        
          <category domain="post_tag" nicename="game"><![CDATA["game",]]></category>
        
          <category domain="post_tag" nicename="golang"><![CDATA["golang"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Best wishes for Christmas holidays!]]></title>
        <link>made2591.github.io/posts/merry-christmas</link>
        <pubDate>2017-12-24T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="merry-christmas-by-nerds">Merry Christmas by nerds</h3>
<p>Here we are!! Christmas holidays are coming and it’s time to collect nerd greetings for nerd friends! In this article I have collected some of my favorites: starting from css to the most unhealthy c code in the world, I hope you enjoy these repositories / snippets / gist / sketch! Best wishes for happy holidays!</p>

<h4 id="css">CSS</h4>
<p>While I was looking for some cool css stuff to share with you, I found this fantastic gist that show the kind of magic a web expert can do with a bunch of css lines. Riddle: what do you see if you use <strong>IE</strong> as a browser? The answer after the preview!</p>

<p align="center"><img src="https://image.ibb.co/jbOSZm/merrychristamas.png" style="width: 100%; marker-top: -10px;" /></p>

<p>The code to reproduce this nice Santa Claus is available in <a href="https://gist.github.com/narendrashetty/61dc353c42aedc23473c">this</a> gist: it’s a really simple gist, with one html and one css file!
Answer to the riddle: a Halloween pumpkin! 😂😂😂😂</p>

<h4 id="javascript">Javascript</h4>
<p><a href="https://github.com/anvaka">anvaka</a> created the fantastic tree in the figure below using only 11 lines of javascript codes! Have a look at his <a href="https://github.com/anvaka/atree">repo</a></p>

<p align="center"><img src="https://camo.githubusercontent.com/1ef821cdc5a42e5a04bfb71b0c830f7f4a6572d3/687474703a2f2f692e696d6775722e636f6d2f46793453316a522e676966" style="width: 100%; marker-top: -10px;" /></p>

<p>For the most curious, the lines used to build the spiral are the ones below:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">zoff</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span>
    <span class="nx">z</span> <span class="o">=</span> <span class="nx">dz</span> <span class="o">/</span> <span class="p">(</span><span class="nx">dz</span> <span class="o">-</span> <span class="nx">sign</span> <span class="o">*</span> <span class="nx">zoff</span> <span class="o">*</span> <span class="nx">zScale</span><span class="p">),</span>
    <span class="nx">x</span> <span class="o">=</span> <span class="nx">getX</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">z</span><span class="p">,</span> <span class="nx">sign</span><span class="p">),</span>
    <span class="nx">y</span> <span class="o">=</span> <span class="nx">getY</span><span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="nx">yLocalScale</span><span class="p">,</span> <span class="nx">z</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">zoff</span> <span class="o">+</span> <span class="nx">sign</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">/</span> <span class="mi">4</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">switchColor</span><span class="p">(</span><span class="nx">foreground</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">switchColor</span><span class="p">(</span><span class="nx">background</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">);</span>
  <span class="nx">ctx</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">getX</span><span class="p">(</span><span class="nx">i</span> <span class="o">+</span> <span class="mf">0.03</span><span class="p">,</span> <span class="nx">z</span><span class="p">,</span> <span class="nx">sign</span><span class="p">),</span> <span class="nx">getY</span><span class="p">((</span><span class="nx">i</span> <span class="o">+</span> <span class="mf">0.01</span><span class="p">)</span> <span class="o">*</span> <span class="nx">yLocalScale</span><span class="p">,</span> <span class="nx">z</span><span class="p">));</span>
<span class="p">};</span></code></pre></figure>

<h4 id="the-dom-trick">The DOM Trick</h4>
<p><a href="https://github.com/hakimel">hakimel</a> shared a tree created using <em>DOM</em> elements: you definetly have a look at the live <a href="https://lab.hakim.se/domtree/">demo</a>, it’s amazing! The repo is available <a href="https://github.com/hakimel/DOM-Tree">here</a>.</p>

<h4 id="best-whishes">Best whishes</h4>
<p><a href="https://github.com/soyuka">soyuka</a> thinks that instead of offering a gift to everyone, it’s fun to offer to some random member of your family (or friends). Have a look to its <a href="https://github.com/soyuka/noel">repo</a></p>

<h4 id="ascii-art-in-cli">ASCII Art in cli</h4>
<p>In a contest organised by polish nerd forum during Christmas in 2016, <a href="https://github.com/plkpiotr">repo</a> wrote an application that creates Christmas card based on ASCII Art!</p>

<p align="center"><img src="https://user-images.githubusercontent.com/21959354/28546433-04bf2dda-70cb-11e7-8738-42cb5f66e3f3.jpg" style="width: 100%; marker-top: -10px;" /></p>

<p>Original repo <a href="https://github.com/plkpiotr/christmas-tree">here</a></p>

<h4 id="sublime-text-christmas-theme">Sublime Text Christmas Theme</h4>
<p>If you want to customize your Sublime Text editor (vintage version, but ehy, you know), you can follow <a href="https://github.com/zntfdr">zntfdr</a> instructions ⛄:</p>
<ul>
  <li>Locate your Sublime Text Packages folder by using the menu item Preferences -&gt; Browse Packages…</li>
  <li>Download (Right click, save as) and put the .tmTheme file into a new folder named Christmas - Color Theme</li>
  <li>Move the new folder into Sublime Text’s Packages directory</li>
  <li>Activate the Christmas theme in Preferences -&gt; Color Scheme…</li>
  <li>Enjoy! 🎁</li>
</ul>

<p align="center"><img src="https://github.com/zntfdr/Christmas/blob/master/screenshot.png?raw=true" style="width: 100%; marker-top: -10px;" /></p>

<p>The repo is available <a href="https://github.com/zntfdr/Christmas">here</a></p>

<p>Thank you everybody for reading!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/merry-christmas</wp:post_id>
        <wp:post_date>2017-12-24T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2017-12-24T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="holidays"><![CDATA["holidays",]]></category>
        
          <category domain="post_tag" nicename="styles"><![CDATA["styles",]]></category>
        
          <category domain="post_tag" nicename="algorithm"><![CDATA["algorithm",]]></category>
        
          <category domain="post_tag" nicename="christmas"><![CDATA["christmas"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[The Doomsday rule]]></title>
        <link>made2591.github.io/posts/doomsday</link>
        <pubDate>2017-12-23T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="the-doomsday-rule">The Doomsday rule</h3>
<p>A few months ago I came across the name of J. H. Conway: you’re wondering who the hell he is. Well, Conway is an English mathematician active in the theory of <em>finite groups</em>, <em>knot theory</em>, <em>number theory</em>, <em>combinatorial game theory</em> and <em>coding theory</em>. He has also contributed to many branches of <em>recreational mathematics</em> and he is the invention of the Game of Life. Ah, I was forgetting one last thing: he is currently <strong>Professor Emeritus of Mathematics at Princeton University</strong> in New Jersey<sup id="fnref:wiki"><a href="#fn:wiki" class="footnote">1</a></sup>. Ok. let’s respect this guy but…what would I talk to you about? Well, in this article I will talk about a magic trick: the Doomsday rule.</p>

<p align="center"><img src="http://lbmagic.uk/wp-content/uploads/2016/11/1.jpg" style="width: 100%; marker-top: -10px;" /></p>

<h3 id="a-brief-history">A brief history</h3>
<p>Who has ever heard of it? No ones? Ok, the first thing to know is that the Doomsday rule is an <em>algorithm</em> of determination of the day of the week for a given date. This f<em>**</em>ng unbelievable trick of mind will allow you to win so many bets during the Christmas holidays that you will be envied by your nephews, close friends, neighbors, lovers and even your pets.</p>

<p>The mental calculation was devised by J. H. Conway in 1973: I don’t know how much a <em>mentalist</em> you have to be to trust this method, but the algorithm actually returns the correct answer: if you want to discover more about how it works, go ahead. If you want to try to discover how the algorithm works starting from the code, <a href="https://github.com/made2591/doomsday/blob/master/doomsday.rb">here</a> my repo with a Ruby implementation of the algorithm.</p>

<h3 id="the-algorithm">The algorithm</h3>
<p>First of all, a big picture of how the algorithm works in three steps:</p>
<ul>
  <li><strong>step 1</strong>: determination of the anchor day for the century,</li>
  <li><strong>step 2</strong>: calculation of the <em>doomsday</em> for the year from the anchor day,</li>
  <li><strong>step 3</strong>: selection of the closest date out of those that always fall on the doomsday, e.g., 4/4 and 6/6, and count of the number of days (modulo 7) between that date and the date in question to arrive at the day of the week;</li>
</ul>

<p>What?! Do you understand something?! Because if not, you really have to know that…Conway can usually give the correct answer to question like “what day of week was the 13 February 1867?”, in under two seconds<sup id="fnref:joke"><a href="#fn:joke" class="footnote">2</a></sup>. If you’re thinking that probably this is the main reason why you’re reading this blog and he’s <strong>Professor Emeritus of Mathematics at Princeton University</strong>, well, you’re right.</p>

<p>In any case, since I’m a computer scientist, and I have absolutely no desire to count things in mind nor to open a calendar or search on google for my <em>quiz-date</em>, I have implemented the Conway algorithm for the calculation of Doomsday using Ruby.</p>

<h3 id="preliminary-explanation">Preliminary explanation</h3>
<p>This algorithm involves treating days of the week like numbers <em>modulo 7</em>: Conway often suggests - in his course in Princeton called <em>“How I will literaly blow your mind”</em> - thinking of the days of the week as “Noneday”; or as “Sansday” (for Sunday), “Oneday”, (for Monday, it sounds similar), “Twosday”, “Treblesday”, “Foursday”, “Fiveday”, and “Six-a-day”. It doesn’t matter, because there are tables with - wait for it - <em>Doomsdays for the Gregorian calendar</em>, or what I call “The <strong>Year</strong> Doomsday”. Like the one below:</p>

<table>
  <thead>
    <tr>
      <th>Mon.</th>
      <th>Tue.</th>
      <th>Wed.</th>
      <th>Thu.</th>
      <th>Fri.</th>
      <th>Sat.</th>
      <th>Sun.</th>
      <th>Mon.</th>
      <th>Tue.</th>
      <th>Wed.</th>
      <th>Thu.</th>
      <th>Fri.</th>
      <th>Sat.</th>
      <th>Sun.</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1898</td>
      <td>1899</td>
      <td>1900</td>
      <td>1901</td>
      <td>1902</td>
      <td>1903</td>
      <td>→</td>
      <td>1904</td>
      <td>1905</td>
      <td>1906</td>
      <td>1907</td>
      <td>→</td>
      <td>1908</td>
      <td>1909</td>
    </tr>
    <tr>
      <td>1910</td>
      <td>1911</td>
      <td>→</td>
      <td>1912</td>
      <td>1913</td>
      <td>1914</td>
      <td>1915</td>
      <td>→</td>
      <td>1916</td>
      <td>1917</td>
      <td>1918</td>
      <td>1919</td>
      <td>→</td>
      <td>1920</td>
    </tr>
    <tr>
      <td>1921</td>
      <td>1922</td>
      <td>1923</td>
      <td>→</td>
      <td>1924</td>
      <td>1925</td>
      <td>1926</td>
      <td>1927</td>
      <td>→</td>
      <td>1928</td>
      <td>1929</td>
      <td>1930</td>
      <td>1931</td>
      <td>→</td>
    </tr>
    <tr>
      <td>1932</td>
      <td>1933</td>
      <td>1934</td>
      <td>1935</td>
      <td>→</td>
      <td>1936</td>
      <td>1937</td>
      <td>1938</td>
      <td>1939</td>
      <td>→</td>
      <td>1940</td>
      <td>1941</td>
      <td>1942</td>
      <td>1943</td>
    </tr>
    <tr>
      <td>→</td>
      <td>1944</td>
      <td>1945</td>
      <td>1946</td>
      <td>1947</td>
      <td>→</td>
      <td>1948</td>
      <td>1949</td>
      <td>1950</td>
      <td>1951</td>
      <td>→</td>
      <td>1952</td>
      <td>1953</td>
      <td>1954</td>
    </tr>
    <tr>
      <td>1955</td>
      <td>→</td>
      <td>1956</td>
      <td>1957</td>
      <td>1958</td>
      <td>1959</td>
      <td>→</td>
      <td>1960</td>
      <td>1961</td>
      <td>1962</td>
      <td>1963</td>
      <td>→</td>
      <td>1964</td>
      <td>1965</td>
    </tr>
    <tr>
      <td>1966</td>
      <td>1967</td>
      <td>→</td>
      <td>1968</td>
      <td>1969</td>
      <td>1970</td>
      <td>1971</td>
      <td>→</td>
      <td>1972</td>
      <td>1973</td>
      <td>1974</td>
      <td>1975</td>
      <td>→</td>
      <td>1976</td>
    </tr>
    <tr>
      <td>1977</td>
      <td>1978</td>
      <td>1979</td>
      <td>→</td>
      <td>1980</td>
      <td>1981</td>
      <td>1982</td>
      <td>1983</td>
      <td>→</td>
      <td>1984</td>
      <td>1985</td>
      <td>1986</td>
      <td>1987</td>
      <td>→</td>
    </tr>
    <tr>
      <td>1988</td>
      <td>1989</td>
      <td>1990</td>
      <td>1991</td>
      <td>→</td>
      <td>1992</td>
      <td>1993</td>
      <td>1994</td>
      <td>1995</td>
      <td>→</td>
      <td>1996</td>
      <td>1997</td>
      <td>1998</td>
      <td>1999</td>
    </tr>
    <tr>
      <td>→</td>
      <td>2000</td>
      <td>2001</td>
      <td>2002</td>
      <td>2003</td>
      <td>→</td>
      <td>2004</td>
      <td>2005</td>
      <td>2006</td>
      <td>2007</td>
      <td>→</td>
      <td>2008</td>
      <td>2009</td>
      <td>2010</td>
    </tr>
    <tr>
      <td>2011</td>
      <td>→</td>
      <td>2012</td>
      <td>2013</td>
      <td>2014</td>
      <td>2015</td>
      <td>→</td>
      <td>2016</td>
      <td>2017</td>
      <td>2018</td>
      <td>2019</td>
      <td>→</td>
      <td>2020</td>
      <td>2021</td>
    </tr>
    <tr>
      <td>2022</td>
      <td>2023</td>
      <td>→</td>
      <td>2024</td>
      <td>2025</td>
      <td>2026</td>
      <td>2027</td>
      <td>→</td>
      <td>2028</td>
      <td>2029</td>
      <td>2030</td>
      <td>2031</td>
      <td>→</td>
      <td>2032</td>
    </tr>
    <tr>
      <td>2033</td>
      <td>2034</td>
      <td>2035</td>
      <td>→</td>
      <td>2036</td>
      <td>2037</td>
      <td>2038</td>
      <td>2039</td>
      <td>→</td>
      <td>2040</td>
      <td>2041</td>
      <td>2042</td>
      <td>2043</td>
      <td>→</td>
    </tr>
    <tr>
      <td>2044</td>
      <td>2045</td>
      <td>2046</td>
      <td>2047</td>
      <td>→</td>
      <td>2048</td>
      <td>2049</td>
      <td>2050</td>
      <td>2051</td>
      <td>→</td>
      <td>2052</td>
      <td>2053</td>
      <td>2054</td>
      <td>2055</td>
    </tr>
    <tr>
      <td>→</td>
      <td>2056</td>
      <td>2057</td>
      <td>2058</td>
      <td>2059</td>
      <td>→</td>
      <td>2060</td>
      <td>2061</td>
      <td>2062</td>
      <td>2063</td>
      <td>→</td>
      <td>2064</td>
      <td>2065</td>
      <td>2066</td>
    </tr>
    <tr>
      <td>2067</td>
      <td>→</td>
      <td>2068</td>
      <td>2069</td>
      <td>2070</td>
      <td>2071</td>
      <td>→</td>
      <td>2072</td>
      <td>2073</td>
      <td>2074</td>
      <td>2075</td>
      <td>→</td>
      <td>2076</td>
      <td>2077</td>
    </tr>
    <tr>
      <td>2078</td>
      <td>2079</td>
      <td>→</td>
      <td>2080</td>
      <td>2081</td>
      <td>2082</td>
      <td>2083</td>
      <td>→</td>
      <td>2084</td>
      <td>2085</td>
      <td>2086</td>
      <td>2087</td>
      <td>→</td>
      <td>2088</td>
    </tr>
    <tr>
      <td>2089</td>
      <td>2090</td>
      <td>2091</td>
      <td>→</td>
      <td>2092</td>
      <td>2093</td>
      <td>2094</td>
      <td>2095</td>
      <td>→</td>
      <td>2096</td>
      <td>2097</td>
      <td>2098</td>
      <td>2099</td>
      <td>2100</td>
    </tr>
  </tbody>
</table>

<p>So…for a day, be a doomsday is a properties - at least - related to years. For instance, doomsday for the current year in the Gregorian calendar (2017) is Tuesday. The Conway algorithm works because it is possible to <em>easily</em> find the day of the week of a given calendar date by using a <em>nearby</em> doomsday as a reference point. To help with this, Conway findout that there is a list of <em>easy-to-remember</em> dates…for each month…</p>

<p>that always land on the doomsday of the given year: O.M.G.</p>

<p>What does it means? It means that, for instance, the last day of February defines a doomsday. Or January, January 3 is a doomsday during common years and January 4 a doomsday during leap years, and so on. What the hell of magic days are these doomsday?!? We will explain <em>how</em> the Doomsday for a year is computed. For now, let be the following table a month table that correspond <strong>always</strong> to the doomsday.</p>

<table>
  <thead>
    <tr>
      <th>Month</th>
      <th>Doomsdays</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>January</td>
      <td>3, 31 (solar year) 4 (leap years)</td>
    </tr>
    <tr>
      <td>February</td>
      <td>7, 14, 21, 28 (solar year) 1, 29 (leap years)</td>
    </tr>
    <tr>
      <td>March</td>
      <td>7, 14, 21, 28</td>
    </tr>
    <tr>
      <td>April</td>
      <td>4</td>
    </tr>
    <tr>
      <td>May</td>
      <td>9</td>
    </tr>
    <tr>
      <td>June</td>
      <td>6</td>
    </tr>
    <tr>
      <td>July</td>
      <td>11</td>
    </tr>
    <tr>
      <td>August</td>
      <td>8</td>
    </tr>
    <tr>
      <td>September</td>
      <td>5</td>
    </tr>
    <tr>
      <td>October</td>
      <td>10</td>
    </tr>
    <tr>
      <td>November</td>
      <td>7</td>
    </tr>
    <tr>
      <td>December</td>
      <td>12</td>
    </tr>
  </tbody>
</table>

<h3 id="step-1-aka-finding-a-years-base-day">Step 1 aka finding a year’s base day</h3>
<p>First of all, ask for a day</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">print</span> <span class="s1">'Insert day:   '</span>
<span class="n">day</span>   <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>
<span class="nb">print</span> <span class="s1">'Insert month: '</span>
<span class="n">month</span> <span class="o">=</span> <span class="nb">gets</span><span class="p">.</span><span class="nf">to_i</span>
<span class="nb">print</span> <span class="s1">'Insert year:  '</span>
<span class="n">year</span>  <span class="o">=</span> <span class="nb">gets</span></code></pre></figure>

<p>Then, given</p>

<script type="math/tex; mode=display">c = year's \; century + 1</script>

<p>(for instance, \(c(2017) = 20\)), then compute:</p>

<script type="math/tex; mode=display">\Big\{\Big[\Big(5c + \left \lfloor{\frac{c - 1}{4}}\right \rfloor\Big) \; mod \; 7\Big] + 4\Big\} \; mod \; 7</script>

<p>My really unefficient implementation of the formula using Ruby is:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">baseDay</span> <span class="o">=</span> <span class="p">(((</span><span class="mi">5</span> <span class="o">*</span> <span class="p">(</span><span class="n">year</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nf">to_i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">+</span> <span class="p">(</span><span class="n">year</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nf">to_i</span> <span class="o">/</span> <span class="mi">4</span><span class="p">).</span><span class="nf">ceil</span> <span class="o">%</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">%</span> <span class="mi">7</span>
<span class="nb">puts</span> <span class="n">baseDay</span></code></pre></figure>

<p>For example, the base day for the 21st century is Tuesday, because:</p>

<script type="math/tex; mode=display">\Big\{\Big[\Big(5 x 21 + \left \lfloor{\frac{21 - 1}{4}}\right \rfloor\Big) \; mod \; 7\Big] + 4\Big\} \; mod \; 7 = 2 = \; Tuesday</script>

<h3 id="step-2-aka-finding-a-years-doomsday">Step 2 aka finding a year’s Doomsday</h3>
<p>Let be:</p>

<script type="math/tex; mode=display">y = year's \; last \; 2 \; numbers</script>

<p>(for instance, \(y(2017) = 17\)), to determine the Doomsday of the year compute:</p>

<script type="math/tex; mode=display">\Big[\Big(\left \lfloor{\frac{y}{12}}\right \rfloor + y \; mod \; 7 + \left \lfloor{\frac{y \; mod \; 12 }{4}}\right \rfloor \Big) \; mod \; 7\Big] + year's \; baseday = \; year's \; Doomsday</script>

<p>A possible implementation of the formula using Ruby is:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">doomsday</span> <span class="o">=</span> <span class="p">(((</span><span class="n">year</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nf">to_i</span> <span class="o">/</span> <span class="mi">12</span><span class="p">).</span><span class="nf">ceil</span> <span class="o">+</span> <span class="p">(</span><span class="n">year</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nf">to_i</span> <span class="o">%</span> <span class="mi">12</span><span class="p">)</span> <span class="o">+</span> <span class="p">((</span><span class="n">year</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nf">to_i</span> <span class="o">%</span> <span class="mi">12</span><span class="p">)</span> <span class="o">/</span> <span class="mi">4</span><span class="p">).</span><span class="nf">ceil</span><span class="p">)</span> <span class="o">%</span> <span class="mi">7</span><span class="p">)</span> <span class="o">+</span> <span class="n">baseDay</span>
<span class="nb">puts</span> <span class="n">doomsday</span></code></pre></figure>

<p>For example, the Doomsday of the year 1966 is Monday, because:</p>

<script type="math/tex; mode=display">\Big[\Big(\left \lfloor{\frac{66}{12}}\right \rfloor + 66 \; mod \; 7 + \left \lfloor{\frac{66 \; mod \; 12 }{4}}\right \rfloor \Big) \; mod \; 7\Big] + 3 = 8</script>

<p>In <em>2010</em>, a <strong>simpler method</strong> - remember, less than two seconds - was discovered to find the year’s Doomsday. It has been shown that this method, more formaly called <em>“Odd + 11”</em>, is equivalent in formulas to compute:</p>

<script type="math/tex; mode=display">\Big[\Big(y + \left \lfloor{\frac{y}{4}}\right \rfloor \Big) \; mod \; 7 \Big] + year's \; baseday = \; year's \; Doomsday</script>

<p>This formula is particularly suitable for mental calculation, because it does not involve divisions and the procedure, as a recursive one, is easy to remember. So alternatively, to determine the doomsday it is also possible to add the last two digits of the year (<em>y</em>) to the quotient of the division between <em>y</em> and 4. In fact, also following this simpler formula, the Doomsday of the year 1966 is Monday:</p>

<script type="math/tex; mode=display">\Big[\Big(66 + \left \lfloor{\frac{66}{4}}\right \rfloor \Big) \; mod \; 7 \Big] + 3 = 8</script>

<h3 id="step-3-aka-finding-the-day-of-the-week-of-the-desired-day">Step 3 aka finding the day of the week of the desired day</h3>
<p>After you know the Doomsday of the year in question, the calculation of the day of the week of the desired day is very simple:</p>
<ul>
  <li>identify the Doomsday closest to the chosen day,</li>
  <li>subtract the date of the nearest doomsday from the date to be identified,</li>
  <li>add the value of the Doomsday of the year,</li>
  <li>and finally report the result obtained in base 7;</li>
</ul>

<p>Ok, let’s start from the…what!? How do you identify the Doomsday closest to the chosen day?! Ok, do you remember the table with the doomsday for each month I talked about before? The only thing you have to do is deal with some comparison between the month and some simple computation between abs difference. A possible implementation of the formula using Ruby is:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">### Step 3 - find the day of the week</span>

<span class="n">nearest</span> <span class="o">=</span> <span class="mi">9999999999</span>

<span class="k">case</span> <span class="n">month</span>
	<span class="k">when</span> <span class="mi">1</span>
		<span class="k">if</span> <span class="p">((</span><span class="n">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">and</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">))</span> <span class="n">or</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
			<span class="n">nearest</span> <span class="o">=</span> <span class="mi">4</span>
		<span class="k">else</span>
			<span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">31</span><span class="p">].</span><span class="nf">each</span> <span class="p">{</span>
				<span class="o">|</span><span class="n">val</span><span class="o">|</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">day</span><span class="o">-</span><span class="n">val</span><span class="p">).</span><span class="nf">abs</span> <span class="o">&lt;</span> <span class="n">nearest</span>
					<span class="n">nearest</span> <span class="o">=</span> <span class="n">val</span>
				<span class="k">end</span>
			<span class="p">}</span>
		<span class="k">end</span>
	<span class="k">when</span> <span class="mi">2</span>
		<span class="n">ddays</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">29</span><span class="p">]</span>
		<span class="k">if</span> <span class="p">((</span><span class="n">year</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">and</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">))</span> <span class="n">or</span> <span class="p">(</span><span class="n">year</span> <span class="o">%</span> <span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
			<span class="n">ddays</span> <span class="o">=</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">28</span><span class="p">]</span>
		<span class="k">end</span>
		<span class="n">ddays</span><span class="p">.</span><span class="nf">each</span> <span class="p">{</span>
			<span class="o">|</span><span class="n">val</span><span class="o">|</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">day</span><span class="o">-</span><span class="n">val</span><span class="p">).</span><span class="nf">abs</span> <span class="o">&lt;</span> <span class="n">nearest</span>
				<span class="n">nearest</span> <span class="o">=</span> <span class="n">val</span>
			<span class="k">end</span>
		<span class="p">}</span>
	<span class="k">when</span> <span class="mi">3</span>
		<span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">28</span><span class="p">].</span><span class="nf">each</span> <span class="p">{</span>
			<span class="o">|</span><span class="n">val</span><span class="o">|</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">day</span><span class="o">-</span><span class="n">val</span><span class="p">).</span><span class="nf">abs</span> <span class="o">&lt;</span> <span class="n">nearest</span>
				<span class="n">nearest</span> <span class="o">=</span> <span class="n">val</span>
			<span class="k">end</span>
		<span class="p">}</span>
	<span class="k">when</span> <span class="mi">4</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">4</span>
	<span class="k">when</span> <span class="mi">5</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">9</span>
	<span class="k">when</span> <span class="mi">6</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">6</span>
	<span class="k">when</span> <span class="mi">7</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">11</span>
	<span class="k">when</span> <span class="mi">8</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">8</span>
	<span class="k">when</span> <span class="mi">9</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">5</span>
	<span class="k">when</span> <span class="mi">10</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">10</span>
	<span class="k">when</span> <span class="mi">11</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">7</span>
	<span class="k">when</span> <span class="mi">12</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">12</span>
	<span class="k">else</span>
		<span class="n">nearest</span> <span class="o">=</span> <span class="mi">9999999999</span>
<span class="k">end</span></code></pre></figure>

<p>And that’s all: you are are done! In fact, the following three points of this third step can be computed with the following line:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">weekday</span> <span class="o">=</span> <span class="p">(</span><span class="n">day</span> <span class="o">-</span> <span class="n">nearest</span> <span class="o">+</span> <span class="n">doomsday</span><span class="p">)</span> <span class="o">%</span> <span class="mi">7</span></code></pre></figure>

<p>And of course you can pretty print the result with something really dirty and compact like:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="s2">"~~~~~~~~~~~~~~~~~~~~~~~"</span>
<span class="nb">puts</span> <span class="p">[</span><span class="s1">'January'</span><span class="p">,</span> <span class="s1">'February'</span><span class="p">,</span> <span class="s1">'March'</span><span class="p">,</span> 
	  <span class="s1">'April'</span><span class="p">,</span> <span class="s1">'May'</span><span class="p">,</span> <span class="s1">'June'</span><span class="p">,</span> <span class="s1">'July'</span><span class="p">,</span> 
	  <span class="s1">'August'</span><span class="p">,</span> <span class="s1">'September'</span><span class="p">,</span> <span class="s1">'October'</span><span class="p">,</span> 
	  <span class="s1">'November'</span><span class="p">,</span> <span class="s1">'December'</span><span class="p">][</span><span class="n">month</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span>
	  <span class="s2">" "</span><span class="o">+</span><span class="n">day</span><span class="p">.</span><span class="nf">to_s</span><span class="o">+</span><span class="s2">", "</span><span class="o">+</span>
	  <span class="n">year</span><span class="o">+</span><span class="s2">" was "</span><span class="o">+</span><span class="p">[</span><span class="s1">'Monday'</span><span class="p">,</span> <span class="s1">'Tuesday'</span><span class="p">,</span> 
	  				<span class="s1">'Wednesday'</span><span class="p">,</span> <span class="s1">'Thusday'</span><span class="p">,</span> 
	  				<span class="s1">'Friday'</span><span class="p">,</span> <span class="s1">'Saturday'</span><span class="p">,</span> 
	  				<span class="s1">'Sunday'</span><span class="p">][</span><span class="n">weekday</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span></code></pre></figure>

<p>For example, to calculate the September 13, 2011:</p>

<ul>
  <li>the nearest Doomsday is 5/9;</li>
  <li>13 - 5 = 8</li>
  <li>8 + 1 = 9 (the 2011 Doomsday was Monday, so the corresponding value is 1)</li>
  <li>9 mod 7 = 2 = Tuesday</li>
</ul>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:wiki">
      <p><a href="https://en.wikipedia.org/wiki/John_Horton_Conway">John Horton Conway</a>&nbsp;<a href="#fnref:wiki" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:joke">
      <p>Do not worry: it’s not an innate ability!! To improve his speed, he practices his calendrical calculations on his computer, which is programmed to quiz him with random dates every time he logs on.&nbsp;<a href="#fnref:joke" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/doomsday</wp:post_id>
        <wp:post_date>2017-12-23T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2017-12-23T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="doomsday"><![CDATA["doomsday",]]></category>
        
          <category domain="post_tag" nicename="algorithm"><![CDATA["algorithm",]]></category>
        
          <category domain="post_tag" nicename="ruby"><![CDATA["ruby"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[A journey through the network - Introduction]]></title>
        <link>made2591.github.io/posts/network-layers-0</link>
        <pubDate>2017-12-22T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="a-journey-through-the-network---introduction">A journey through the network - Introduction</h3>
<p>During the last year I understood one thing: sooner or later everyone should review network notions, so I decided to start writing articles about network fundamentals. As a main source I would use <a href="https://www.amazon.it/gp/product/9332518742/ref=oh_aui_detailpage_o01_s00?ie=UTF8&amp;psc=1">Computer Networks</a> and <a href="https://www.amazon.it/gp/product/9332535957/ref=oh_aui_detailpage_o02_s00?ie=UTF8&amp;psc=1">TCP/IP Illustrated</a>.</p>

<p>In this article, I will talk about two important network architectures: the <strong>OSI</strong> reference model and the <strong>TCP/IP</strong> reference model. These two model has opposite characteristics, in particular:</p>
<ul>
  <li>the <strong>ISO/OSI</strong> model protocols’ are not used any more, but the model itself is actually quite general and still valid and the features discussed at each layer are still very important;</li>
  <li>the <strong>TCP/IP</strong> model is not of much use but its protocols are widely used;</li>
</ul>

<p>Let’s start from the first!</p>

<h3 id="the-isoosi-reference-model">The <strong>ISO/OSI</strong> reference model</h3>
<p>The <strong>ISO/OSI</strong> is the Open Systems Interconnection (<strong>OSI</strong>) reference model for connecting open systems, <strong>based on a proposal</strong> originally developed by the International Standards Organization (<strong>ISO</strong>): <strong>OSI</strong> (for short) consists of a stack of protocols through which the implementation complexity of a communication system for networking is reduced. The <strong>OSI</strong> model has seven layers.</p>

<p align="center"><img src="https://image.ibb.co/jpZKUm/isoosi.png" alt="perceptron" style="width: 100%; marker-top: -10px;" /></p>

<p><span style="color:#A04279; font-size: bold;"><strong>NOTE</strong></span> the <strong>OSI</strong> model itself is not a network architecture: it just tells what each layer should do. But the International Standards Organization (<strong>ISO</strong>) has also produced standards for all the OSI layers, although these are not part of the reference model itself. Each one has been published as a separate international standard. What is a layer?</p>

<h4 id="layers">Layers</h4>
<p>A layer identifies a communication protocol of the same level. <strong>ISO/OSI</strong> performs a communication by levels, i.e. given two nodes <em>A</em> and <em>B</em>, the <em>n(th)</em> level of node <em>A</em> can exchange informations with the <em>n(th)</em> level of node <em>B</em>, but <strong>not</strong> with the others. Each level in transmission realizes the communication with the corresponding level on the transit nodes or recipients using the specification provided by the level immediately below. Thus, <strong>ISO/OSI</strong> encapsulates level <em>n</em> messages in messages of the <em>n-1</em> level. So if <em>A</em> has to send, for example, an e-mail to <em>B</em>, the application (level 7) of <em>A</em> will propagate the message using the layer below (level <em>6</em>) which in turn will use the <em>interfaces</em> of the lower layer, until to arrive at communication or transmission on the channel or physical transmission medium.</p>

<h5 id="the-physical-layer---1-of-7">The physical layer - 1 of 7</h5>
<p>The <span style="color:#A04279; font-size: bold;">physical layer</span> is concerned with transmitting raw bits over a communication channel of low-level networking equipment, such as some hubs, cabling, and repeaters. Examples of hardware in this layer are network adapters, repeaters, network hubs, modems, and fiber media converters. The design issues have to do with making sure that when one side sends a 1 bit it is received by the other side as a 1 bit, not as a 0 bit. Typical questions here are:</p>
<ul>
  <li>what <em>electrical signals</em> should be used to represent a 1 and a 0?</li>
  <li>how many <em>nanoseconds</em> a bit last?</li>
  <li>whether transmission may proceed simultaneously <em>in both directions</em>?</li>
  <li>how the initial connection is established?</li>
  <li>how it is torn down when both sides are finished?</li>
  <li>how many <em>pins</em> the network connector has?</li>
  <li>what each pin is used for?</li>
</ul>

<p>These design issues largely deal with mechanical, electrical, and timing interfaces, as well as the physical transmission medium, which lies below the physical layer.For instance, bit rate control is done at the physical layer. It may define transmission mode as simplex, half duplex, and full duplex. It defines the network topology as bus, mesh, or ring being some of the most common.</p>

<h5 id="the-data-link-layer---2-of-7">The data link layer - 2 of 7</h5>
<p>The <span style="color:#A04279; font-size: bold;">data link layer</span> provides a node-to-node data transfer - a link between two directly connected nodes - free of undetected transmission errors. To make a list, it:</p>
<ul>
  <li><em>detects</em> and possibly <em>corrects</em> errors that may occur in the physical layer by masking the real errors so that the network layer does not see them. It accomplishes this task by having the sender break up the input data into <strong>data frames</strong> (typically a few hundred or a few thousand bytes) and transmit the frames sequentially. If the service is reliable, the receiver confirms correct receipt of each frame by sending back an <strong>acknowledgement</strong> frame;</li>
  <li><em>defines</em> the protocol to establish and terminate a connection between two physically connected devices;</li>
  <li><em>defines</em> the protocol to keep a fast transmitter from drowning a slow receiver in data.</li>
</ul>

<p>The <em>IEEE 802</em> standard divides the data link layer into two <strong>sublayers</strong>:</p>
<ul>
  <li>Medium access control (<strong>MAC</strong>) sub-layer, responsible for controlling how devices in a network gain access to a medium and permission to transmit data. This layer resolves broadcast networks additional issues related to access control in a shared channel;</li>
  <li>Logical link control (<em>LLC</em>) sub-layer responsible for identifying and encapsulating network layer protocols, and controls error checking and frame synchronization.</li>
</ul>

<p><span style="color:#A04279; font-size: bold;"><strong>NOTE</strong></span> there is a protocol belonging to this layer, named Point-to-Point Protocol (<strong>PPP</strong>), that can operate over several different physical layers, such as synchronous and asynchronous serial lines.</p>

<h5 id="the-network-layer---3-of-7">The network layer - 3 of 7</h5>
<p>To define <em>where</em> the network layer operates, let’s first introduce two definition.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A datagram is a basic transfer unit typically structured in two components, a header and a payload section. 
</code></pre></div></div>

<p>The header contains all the information sufficient for routing from the originating equipment to the destination without relying on prior exchanges between the equipment and the network: they may include source and destination addresses as well as a type field. The payload is the data to be transported. This process of nesting data payloads in a tagged header is called encapsulation.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A network is a medium (physical) to which many nodes can be connected, on which every node has an address and which permits nodes connected to it to transfer messages to other nodes connected to it by merely providing the content of a message and the address of the destination node.
</code></pre></div></div>

<p>A <em>network</em> is able find the way to deliver the message to the destination node, possibly routing it through intermediate nodes: if the message is too large to be transmitted from one node to another on the data link layer between those nodes, the network may implement message delivery by splitting the message into several fragments at one node, sending the fragments independently, and reassembling the fragments at another node. It may, but does not need to, report delivery errors. Let’s move one step forward, introducing the network layer.</p>

<p>The <span style="color:#A04279; font-size: bold;">network layer</span> provides a way to transmit datagrams from one node to another connected in “different networks”: it works at the subnet level. A key design issue is determining <em>how packets are routed from source to destination</em>. Routes can be based on static tables that are ‘wired into’ the network itself, and rarely changed, or more often they can be updated automatically to avoid failed components. They can also be determined at the start of each conversation, for example, a terminal session, such as a login to a remote machine. Finally, they can be highly dynamic, being determined aew for each packet to reflect the current network load.</p>

<p>When a packet has to travel from one network to another to get to its destination, many problems can arise. The addressing used by the second network may be different from that used by the first one. The second one may not accept the packet at all because it is too large. The protocols may differ, and so on. It is up to the network layer to overcome all these problems to allow heterogeneous net- works to be interconnected. In broadcast networks, the routing problem is simple, so the network layer is often thin or even nonexistent.</p>

<p>Sometimes too many packets are present in the network at the same time: handling congestion is also a responsibility of the network layer, in conjunction with higher layers that adapt the load they place on the network. More generally, the quality of service provided (delay, transit time, jitter, etc.) is also a network layer issue. Routing protocols, multicast group management, network-layer information and error, and network-layer address assignment are all layer-management protocols that belong to the network layer.</p>

<p>Message delivery at the network layer is not necessarily guaranteed to be reliable; a network layer protocol may provide reliable message delivery, but it need not do so.</p>

<h4 id="chained-vs-end-to-end-layers">Chained vs end-to-end layers</h4>
<p>In the layers seen until now, each protocols is between a machine and its immediate neighbors, and not between the ultimate source and destination machines, which may be separated by many routers. This is why layers 1 through 3, which are chained, are shown with a communication subnet boundary in the first figure. The layers from 4 through 7 are called end-to-end layers: they carries data all the way from the source to the destination. In other words, a program on the source machine carries on a conversation with a similar program on the destination machine, using the message headers and control messages.</p>

<h5 id="the-transport-layer---4-of-7">The transport layer - 4 of 7</h5>
<p>The <span style="color:#A04279; font-size: bold;">transport layer</span> accepts data from above it, splits them up into smaller units if need be, pass these to the network layer (lv 3), and ensure that the pieces all arrive correctly at the other end. Furthermore, all this must be done efficiently and in a way that isolates the upper layers from the inevitable changes in the hardware technology over the course of time. The transport layer also determines what type of service to provide to the session layer (lv 5), and, ultimately, to the users of the network. The most popular type of transport connection is an error-free point-to-point channel that delivers messages or bytes in the order in which they were sent.</p>

<p>An example of a transport-layer protocol is the Transmission Control Protocol (<strong>TCP</strong>), usually built on top of the Internet Protocol (<strong>IP</strong>). The transport layer controls the reliability of a given link through flow control, segmentation/desegmentation, and error control. Some protocols are state and connection-oriented this means that the transport layer can keep track of the segments and re-transmit those that fail. The transport layer also provides the acknowledgement of the successful data transmission and sends the next data if no errors occurred: it creates packets out of the message received from the application layer. Let’s talk about the layers:</p>

<p>The <strong>OSI</strong> defines 5 classes of connection-mode transport protocols: Class 0 contains no error recovery, and was designed for use on network layers that provide error-free connections. Class 4 is closest to <strong>TCP</strong>, although <strong>TCP</strong> contains functions, such as the graceful close, which <strong>OSI</strong> assigns to the session layer. In your opinion, Which class <strong>UDP</strong> belong to?</p>

<table>
  <thead>
    <tr>
      <th>Feature name</th>
      <th>TP0</th>
      <th>TP1</th>
      <th>TP2</th>
      <th>TP3</th>
      <th>TP4</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Connection-oriented network</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Connectionless network</td>
      <td>No</td>
      <td>No</td>
      <td>No</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Concatenation and separation</td>
      <td>No</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Segmentation and reassembly</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Error recovery</td>
      <td>No</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Reinitiate connection</td>
      <td>No</td>
      <td>Yes</td>
      <td>No</td>
      <td>Yes</td>
      <td>No</td>
    </tr>
    <tr>
      <td>Multiplexing / demultiplexing over single virtual circuit</td>
      <td>No</td>
      <td>No</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Explicit flow control</td>
      <td>No</td>
      <td>No</td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Retransmission on timeout</td>
      <td>No</td>
      <td>No</td>
      <td>No</td>
      <td>No</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>Reliable transport service</td>
      <td>No</td>
      <td>Yes</td>
      <td>No</td>
      <td>Yes</td>
      <td>Yes</td>
    </tr>
  </tbody>
</table>

<h5 id="the-session-layer---5-of-7">The session layer - 5 of 7</h5>
<p>The <span style="color:#A04279; font-size: bold;">session layer</span> allows users on different machines to establish sessions between them. Sessions offer various services, including dialog control (keeping track of whose turn it is to transmit), token management (preventing two parties from attempting the same critical operation simultaneously), and synchronization (checkpointing long transmissions to allow them to pick up from where they left off in the event of a crash and subsequent recovery). The OSI model made this layer responsible for graceful close of sessions, which is a property of the <strong>TCP</strong> in Internet Protocol, and also for session checkpointing and recovery, which is not usually used in the Internet Protocol. The session layer is commonly implemented explicitly in application environments that use remote procedure calls.</p>

<h5 id="the-presentation-layer---6-of-7">The presentation layer - 6 of 7</h5>
<p>The <span style="color:#A04279; font-size: bold;">presentation layer</span> is about the syntax and semantics of the information transmitted: it provides independence from data representation by translating between application and network formats. The presentation layer transforms data into the form that the application accepts.</p>

<h5 id="the-application-layer---7-of-7">The application layer - 7 of 7</h5>
<p>The <span style="color:#A04279; font-size: bold;">application layer</span> contains a variety of protocols that are commonly needed by users. <strong>HTTP</strong> (HyperText Transfer Protocol) is the most famous example: when a browser wants a Web page, it sends the name of the page it wants to the server hosting the page using HTTP. The server then sends the page back. Other application protocols are used for file transfer, electronic mail, and network news.</p>

<p>Let’s talk about the <strong>TCP/IP</strong> reference model!</p>

<h3 id="the-tcpip-reference-model">The <strong>TCP/IP</strong> reference model</h3>
<p>The <strong>TCP/IP</strong> reference model was born from the <em>ARPANET</em> network. <em>ARPANET</em> was a research network sponsored by the U.S. Department of Defense, to connect hundreds of universities and government sites, using leased telephone lines. When satellite and radio networks were added later, the existing protocols had trouble interworking with them, so a new <em>reference</em> architecture was needed. Thus, from nearly the beginning, the ability to connect multiple networks in a seamless way was one of the major design goals: the architecture designed to accomplish this goal later became known as the <strong>TCP/IP</strong> reference model, after its two primary protocols.
Not only: in those years, DoD was scared by Soviet Union: thus, another major goal was that the network be <em>able to survive loss of subnet hardware</em> without, of course, existing conversations being broken off. The requirement was to have a network able to mantain the connections intact as long as the source and destination machines were functioning, even if some of the machines or transmission lines in between were suddenly put out of operation.</p>

<h4 id="layers-1">Layers</h4>
<p>Even in <strong>TCP/IP</strong> encapsulation is used to provide abstraction of protocols and services. Encapsulation is usually aligned with the division of the protocol suite into layers of general functionality. Again, the layers of the protocol suite near the top are logically closer to the user application, while those near the bottom are logically closer to the physical transmission of the data. <strong>TCP/IP</strong> is divided in 4 different levels</p>

<h5 id="the-link-layer---1-of-4">The link layer - 1 of 4</h5>
<p>The <span style="color:#A04279; font-size: bold;">link layer</span> is the lowest component layer of the internet protocols: it is not really a layer at all, but rather an interface between hosts and transmission links, because <strong>TCP/IP</strong> is designed to be hardware independent. As a result, <strong>TCP/IP</strong> may be implemented on top of virtually any hardware networking technology.</p>

<p>The link layer is used to move packets between the Internet layer interfaces of two different hosts on the same link. This processes is usually done by the software device driver for the network card: this perform data link functions such as adding a packet header to prepare it for transmission, then actually transmit the frame over a physical medium. The <strong>TCP/IP</strong> model includes specifications of translating the network addressing methods, used in the <strong>IP</strong> to link layer addresses, such as media access control (<strong>MAC</strong>) addresses. All other aspects below that level, however, are implicitly assumed to exist in the link layer, but are not explicitly defined.</p>

<p>This is also the layer where packets may be selected to be sent over a <em>virtual private network</em> or other <em>networking tunnel</em>. In this scenario, the link layer data may be considered application data which traverses another instantiation of the <em>IP</em> stack for transmission or reception over another <em>IP</em> connection. This is possible because the <strong>TCP/IP</strong> model doesn’t define a strict hierarchical encapsulation sequence.</p>

<p>The <strong>TCP/IP</strong> model’s link layer corresponds to the Open Systems Interconnection (<strong>OSI</strong>) model physical and data link layers (1 and 2) of the OSI model.</p>

<h5 id="the-internet-layer---2-of-4">The internet layer - 2 of 4</h5>
<p>The <span style="color:#A04279; font-size: bold;">internet layer</span> corresponding (quite) to the <strong>OSI</strong> network layer and permit hosts to inject packets into any network and have them travel independently to the destination (potentially on a different network). They may even arrive in a completely different order than they were sent, in which case it is the job of higher layers to rearrange them, if in-order delivery is desired. The internet layer defines an official packet format and protocol called IP (Internet Protocol), plus a companion protocol called ICMP (Internet Control Message Protocol) that helps it function. The job of the internet layer is to deliver IP packets where they are supposed to go. Packet routing is clearly a major issue here, as is congestion (though IP has not proven effective at avoiding congestion).</p>

<h5 id="the-transport-layer---3-of-4">The transport layer - 3 of 4</h5>
<p>The <span style="color:#A04279; font-size: bold;">transport layer</span> is designed to allow peer entities on the source and destination hosts to carry on a conversation, just as in the <strong>OSI</strong> transport layer. Two end-to-end transport protocols have been defined here:</p>
<ul>
  <li>the <strong>TCP</strong> (Transmission Control Protocol) is a reliable connection-oriented protocol that allows a byte stream originating on one machine to be delivered without error on any other machine in the internet; it segments the incoming byte stream into discrete messages and passes each one on to the internet layer; at the destination, the receiving <strong>TCP</strong> process reassembles the received messages into the output stream. <strong>TCP</strong> also handles flow control to make sure a fast sender cannot swamp a slow receiver with more messages than it can handle;</li>
  <li>the <strong>UDP</strong> (User Datagram Protocol) is an unreliable connectionless protocol for applications that do not want <strong>TCP</strong>’s sequencing or flow control and wish to provide their own. It is also widely used for one-shot, client-server-type request-reply queries and applications in which prompt delivery is more important than accurate delivery, such as transmitting speech or video;</li>
</ul>

<h5 id="the-application-layer---4-of-4">The application layer - 4 of 4</h5>
<p>The <span style="color:#A04279; font-size: bold;">application layer</span> contains all the higher-level protocols. The early ones included virtual terminal (<em>TELNET</em>), file transfer (<em>FTP</em>)and electronic mail (<em>SMTP</em>). Many other protocols have been added to these over the years.</p>

<h3 id="conclusion">Conclusion</h3>
<p>We talked a lot about the roles of each layers in <strong>OSI</strong> reference models. Let’s talk about</p>

<table>
  <thead>
    <tr>
      <th># </th>
      <th>Layer</th>
      <th>OSI</th>
      <th>TCP</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>7</td>
      <td>Application</td>
      <td>[..]</td>
      <td>Yes</td>
    </tr>
    <tr>
      <td>6</td>
      <td>Presentation</td>
      <td>[..]</td>
      <td>MIME / SSL / TLS / XDR</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Session</td>
      <td>[..]</td>
      <td>Sockets</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Transport</td>
      <td>[..]</td>
      <td>TCP / UDP / SCTP / DCCP</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Network</td>
      <td>[..]</td>
      <td>IP / Ipsec / ICMP / IGMP / OSPF / RIP</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Data link</td>
      <td>MAC</td>
      <td>PPP / SBTV / SLIP</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Physical</td>
      <td>[..]</td>
      <td>/</td>
    </tr>
  </tbody>
</table>

<p><span style="color:#A04279; font-size: bold;">UPDATE 05/01/2018</span>: you can now read the second part of the Network Saga at the post <a href="https://made2591.github.io/posts/network-layers-1">A journey through the network - Layer 1</a>. Enjoy the reading!</p>

<p>Thank you everybody for reading!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/network-layers-0</wp:post_id>
        <wp:post_date>2017-12-22T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2017-12-22T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="network"><![CDATA["network",]]></category>
        
          <category domain="post_tag" nicename="iso-osi"><![CDATA["iso/osi",]]></category>
        
          <category domain="post_tag" nicename="tcp-ip"><![CDATA["tcp/ip",]]></category>
        
          <category domain="post_tag" nicename="saga"><![CDATA["saga"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Predix Machine and how to configure them]]></title>
        <link>made2591.github.io/posts/predix-angular-iot</link>
        <pubDate>2017-12-21T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="predix-machine-and-how-to-configure-them">Predix Machine and how to configure them</h3>
<p>In September, waiting for a contract proposal from the company where I currently work, I wrote a tool for the (more or less) <em>automatic</em> configuration of Predix© Machine. Predix©<sup id="fnref:site"><a href="#fn:site" class="footnote">1</a></sup> is the platform created by <em>GE</em> for Industry 4.0, powered by CloudFoundry<sup id="fnref:pcf"><a href="#fn:pcf" class="footnote">2</a></sup>, to securely connect machines, data, and analytics to improve operational efficiency, help you develop, deploy, and operate industrial apps at the edge and in the cloud. As part of my internship I worked with the predix machine and I shared my work to the GE platform. GE mantains an open <a href="https://github.com/PredixDev">repository</a> with predix tool</p>

<p>I wrote an Angular 4 + Python based <a href="http://predix.io">Predix</a>© configurator tool (cli) to help me and the others who are using predix machine to transfer data from respective factories, managing an edge connectivity stack, from machines in your factory to Predix© microservices in your cloud space: the idea is to provide a web application tool to create a JSON seed, and use the seed to create configuration files. In this article I will talk about my tool - available for free <a href="http://github.com/made2591/predix-configurator">here</a>. If you’re looking for a boilerplate for multistage form, this could be a good project to start from!</p>

<h3 id="factory-stack">Factory stack</h3>
<p>The tool is intended for a factory infrastructure like the one below:</p>
<ul>
  <li>Use of a machine-protocol gateway able to handle several industrial communication protocols used by different machines. For our purpose we used <a href="http://www.geautomation.com/node/12978">IGS</a> by <a href="http://www.geautomation.com">GE Automation</a>;</li>
  <li>Use of a Predix Machine (you can find pre-configured version of Predix Machine <a href="https://github.com/PredixDev/predix-machine-templates">here</a> and other useful starting template for your application in <a href="https://github.com/PredixDev">Predix Dev</a>’s Github page);</li>
  <li>Available cloud space in Predix Platform;</li>
</ul>

<h3 id="how-it-works">How it works</h3>

<p>The tool is intended for both Predix dev / common users. I prepared two different step-by-step guidelines:</p>

<ul>
  <li>
    <p><a href="#oldschoolway">Old-school way</a>: prepare your JSON schema manually =&gt; run the configuration tool =&gt; enjoy.</p>
  </li>
  <li>
    <p><a href="#thirdmillenniumway">Third Millennium way</a>: prepare your JSON schema through the use of a stunning serverless web app XD =&gt; run the configuration tool =&gt; enjoy.</p>
  </li>
</ul>

<h3 id="-how-it-works-old-school-way"><a name="oldschoolway"></a> How it works: old-school way</h3>

<p>The only script you need is the python script under the folder <code class="highlighter-rouge">cli/</code> named <code class="highlighter-rouge">predix-configurator.py</code>. The script has only one dependency to pretty print xml to file.
You can run it from your command line simply following this step:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git clone https://github.com/made2591/predix-configurator
 cd predix-configurator
 cd cli
 #[optional create venv] virtualenv .venv &amp; source .venv/bin/activate
 pip install requirements.txt
 python predix-configurator.py
</code></pre></div></div>

<p>When <code class="highlighter-rouge">predix-configurator</code> starts, it looks for a configuration file under the folder <code class="highlighter-rouge">schema</code> called <code class="highlighter-rouge">your-factory.json</code> (you can change the name of the file and update the const value in the header of the script with the new name / path as well).</p>

<p>A <code class="highlighter-rouge">your-factory.json</code> schema is already available in <code class="highlighter-rouge">schema</code> folder: for obvious reasons, I can’t provide more details using real parameters instances XD.</p>

<h4 id="json-schema-details">JSON Schema details</h4>

<h5 id="global_config">GLOBAL_CONFIG</h5>

<p>The <strong><code class="highlighter-rouge">GLOBAL_CONFIG</code></strong> key in the root of JSON specify the output path of python-configurator. When you run the <code class="highlighter-rouge">predix-configurator.py</code>, generated configuration files will be created in the <code class="highlighter-rouge">GLOBAL_CONFIG.OUTPUT_DIR</code> folder.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
	</span><span class="s2">"GLOBAL_CONFIG"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

		</span><span class="s2">"OUTPUT_DIR"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"./config/"</span><span class="w">

	</span><span class="p">},</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<h5 id="global_igs_config">GLOBAL_IGS_CONFIG</h5>

<p>The <strong><code class="highlighter-rouge">GLOBAL_IGS_CONFIG</code></strong> key in the root of JSON specify <a href="http://www.geautomation.com/node/12978">IGS</a> parameters. The most important parameter is <code class="highlighter-rouge">SERVER_URI</code>, that specify <code class="highlighter-rouge">opcua</code> endpoint exposed by your IGS instance to Predix Machine.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="p">{</span><span class="w">
	</span><span class="s2">"IGS_CONFIG"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

		</span><span class="s2">"SERVER_URI"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"opc.tcp://localhost:49310"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"APP_URI"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"urn:localhost:Intellution.IntellutionGatewayOPCServer:UA Client Driver"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"PRODUCT_URI"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"urn:localhost:UA:PredixMachine_OPCUAAdapter"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"NAMESPACE_INDEX"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"your.namespace.index"</span><span class="w">
	</span><span class="p">},</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<h5 id="predix_global_config">PREDIX_GLOBAL_CONFIG</h5>

<p>The <strong><code class="highlighter-rouge">PREDIX_GLOBAL_CONFIG</code></strong> key in the root of JSON specify <a href="https://github.com/PredixDev/predix-machine-templates">Predix Machine</a> most-important configuration file names and extensions. This field is intended to provide more flexibility to future version of Predix Machine.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">	</span><span class="s2">"PREDIX_GLOBAL_CONFIG"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

		</span><span class="s2">"GLOBAL_CONFIG_SUFFIX"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">".config"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"DATATYPE_CONFIG_SUFFIX"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">".xml"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"OPCUA_DATANODES"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"com.ge.dspmicro.machineadapter.opcua-0"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"HOOVER_SPILLWAY"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"com.ge.dspmicro.hoover.spillway-0"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"PREDIX_CLOUD_IDENTITY"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"com.ge.dspmicro.predixcloud.identity"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"PREDIX_WEBSOCKER_RIVER"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"com.ge.dspmicro.websocketriver.send-0"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"PROXY_CONFIGURATION"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"org.apache.http.proxyconfigurator-0"</span><span class="w">

	</span><span class="p">},</span></code></pre></figure>

<h5 id="predix_cloud_config">PREDIX_CLOUD_CONFIG</h5>

<p>The <strong><code class="highlighter-rouge">PREDIX_CLOUD_CONFIG</code></strong> key in the root of JSON specify <a href="https://www.ge.com/digital/predix">Predix Cloud</a> most-important configuration parameters. Here you can define your timeseries Zone-ID (env vars), UAA parameters and proxy (if needed by your organization) with exceptions.
The files involved by these keys are the one pointed by <code class="highlighter-rouge">PREDIX_GLOBAL_CONFIG.PREDIX_WEBSOCKER_RIVER</code>, <code class="highlighter-rouge">PREDIX_GLOBAL_CONFIG.PREDIX_CLOUD_IDENTITY</code> and <code class="highlighter-rouge">PREDIX_GLOBAL_CONFIG.PROXY_CONFIGURATION</code>.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">	</span><span class="s2">"PREDIX_CLOUD_CONFIG"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

		</span><span class="s2">"TIMESERIES_ZONE_ID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"f37*****-****-****-****-************"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"URL_OAUTH_TOKEN"</span><span class="p">:</span><span class="w"> </span><span class="s2">"https://********-****-****-****-************.*****************/oauth/token"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"APP_CLIENT_ID"</span><span class="p">:</span><span class="w"> </span><span class="s2">"**********"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"APP_CLIENT_SECRET"</span><span class="p">:</span><span class="w"> </span><span class="s2">"**********"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"PROXY_HOST"</span><span class="p">:</span><span class="w"> </span><span class="s2">"**********"</span><span class="p">,</span><span class="w">
		</span><span class="s2">"PROXY_EXCEPTIONS"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
			</span><span class="s2">"**********"</span><span class="w">
		</span><span class="p">]</span><span class="w">

	</span><span class="p">},</span></code></pre></figure>

<p>You can add more then one exception from Webgui (see below).</p>

<h5 id="tag_mapping_schema">TAG_MAPPING_SCHEMA</h5>

<p>The <strong><code class="highlighter-rouge">TAG_MAPPING_SCHEMA</code></strong> key in the root of JSON specify Tag Mapping between your Predix Cloud application and <a href="http://www.geautomation.com/node/12978">IGS</a> (or your collector): it is a dict, with key defining Tag Mapping schema names, and values, the respective content of the schema.
The file involved by these keys are the one pointed by <code class="highlighter-rouge">PREDIX_GLOBAL_CONFIG.OPCUA_DATANODES</code>.</p>

<p><strong>NOTE</strong>: each Tag Schema have to be named: if you procede without giving a name to a Tag Schema, a default name will be assigned to the schema. Further, each Tag Couple has to be “headed” with a destination tags: if you procede without giving a name to a Tag Couple (pairing), a default head tag will be assigned. This logic is intended to prevent losing of partial setup during step.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">	</span><span class="s2">"TAG_MAPPING_SCHEMA"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

		</span><span class="s2">"tag_mapping_schema_1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

			</span><span class="s2">"CHANNEL_PREFIX"</span><span class="p">:</span><span class="w"> </span><span class="s2">"channel_prefix_1"</span><span class="p">,</span><span class="w">
			</span><span class="s2">"MAPPING"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
				</span><span class="s2">"PREDIX_TAG_1"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MACHINE_TAG_1"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"PREDIX_TAG_2"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MACHINE_TAG_2"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"PREDIX_TAG_3"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MACHINE_TAG_3"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"PREDIX_TAG_4"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MACHINE_TAG_4"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"PREDIX_TAG_5"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MACHINE_TAG_5"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"PREDIX_TAG_6"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MACHINE_TAG_6"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"PREDIX_TAG_7"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MACHINE_TAG_7"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"PREDIX_TAG_8"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MACHINE_TAG_8"</span><span class="p">,</span><span class="w">
				</span><span class="s2">"PREDIX_TAG_9"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MACHINE_TAG_9"</span><span class="w">
			</span><span class="p">}</span><span class="w">

		</span><span class="p">},</span><span class="w">

		</span><span class="s2">"tag_mapping_schema_2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="p">},</span><span class="w">
		</span><span class="err">...</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">other</span><span class="w"> </span><span class="err">schema</span><span class="w"> </span><span class="err">go</span><span class="w"> </span><span class="err">here</span><span class="w">

	</span><span class="p">}</span></code></pre></figure>

<p>You can easly add new Tag Schema using web app.</p>

<h5 id="sites">SITES</h5>

<p>The <strong><code class="highlighter-rouge">SITES</code></strong> key in the root of JSON specify Sites and Groups of machine: it is a dict, with key defining Site names, that maps into another dict, with key defining Group name, the maps into another dict with values defining the specific Group.
In the last step before result you can define machines for each Group in each Site. The key are clear: <code class="highlighter-rouge">GLOBAL_ENABLE_SETUP</code> enable setup for each machine, <code class="highlighter-rouge">GLOBAL_TAG_MAPPING_SCHEMA</code> schema will define a general tag mapping schema (you could define a local one for each machine in each group, and enable/disable setup for specific machine), and so on…
The file involved by these keys are the one pointed by <code class="highlighter-rouge">PREDIX_GLOBAL_CONFIG.OPCUA_DATANODES</code>.</p>

<p><strong>NOTE</strong>: each Site and each Group of machines in each Site have to be named: if you procede without giving a name to a Site Schema, a default name will be assigned to the schema. Further, each Group has to be “headed” with a name: if you procede without giving a name to a Group, a default head name will be assigned. This logic is intended to prevent losing of partial setup during step.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">  </span><span class="s2">"SITES"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"site_1_name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"group_1_name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"GLOBAL_TAG_MAPPING_SCHEMA"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tag_mapping_schema_1"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"GLOBAL_ENABLE_SETUP"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
        </span><span class="s2">"GLOBAL_PREFIX"</span><span class="p">:</span><span class="w"> </span><span class="s2">"predix.group.prefix.1_"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"MACHINES"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="s2">"machine_plate_1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"PCU"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pcu_name_1"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"IP"</span><span class="p">:</span><span class="w"> </span><span class="s2">"machine_ip"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"NAT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"machine_natted_ip"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"INFO"</span><span class="p">:</span><span class="w"> </span><span class="s2">"machine_description"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"PROTOCOL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"machine_protocol"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"LOCAL_TAG_MAPPING_SCHEMA"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tag_mapping_schema_1"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"LOCAL_ENABLE_SETUP"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
          </span><span class="p">},</span><span class="w">
          </span><span class="s2">"machine_plate_2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

        </span><span class="s2">"tag_mapping_schema_2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="p">},</span><span class="w">
        </span><span class="err">...</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">other</span><span class="w"> </span><span class="err">schema</span><span class="w"> </span><span class="err">go</span><span class="w"> </span><span class="err">here</span><span class="w">

	</span><span class="p">}</span></code></pre></figure>

<h5 id="machines">MACHINES</h5>

<p>The <strong><code class="highlighter-rouge">MACHINES</code></strong> key in the body of a Group specify machines: it is a dict, with key defining properties. They are not all necessary: the most important are the machine plate and the PCU name for IGS. The other one are only descriptive information.
The file involved by these keys are the one pointed by <code class="highlighter-rouge">PREDIX_GLOBAL_CONFIG.OPCUA_DATANODES</code>.</p>

<p><strong>NOTE</strong>: each machine plate must be different from the others in the same Group.</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">  </span><span class="s2">"SITES"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="s2">"site_1_name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="s2">"group_1_name"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="s2">"GLOBAL_TAG_MAPPING_SCHEMA"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tag_mapping_schema_1"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"GLOBAL_ENABLE_SETUP"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
        </span><span class="s2">"GLOBAL_PREFIX"</span><span class="p">:</span><span class="w"> </span><span class="s2">"predix.group.prefix.1_"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"MACHINES"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="s2">"machine_plate_1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="s2">"PCU"</span><span class="p">:</span><span class="w"> </span><span class="s2">"pcu_name_1"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"IP"</span><span class="p">:</span><span class="w"> </span><span class="s2">"machine_ip"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"NAT"</span><span class="p">:</span><span class="w"> </span><span class="s2">"machine_natted_ip"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"INFO"</span><span class="p">:</span><span class="w"> </span><span class="s2">"machine_description"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"PROTOCOL"</span><span class="p">:</span><span class="w"> </span><span class="s2">"machine_protocol"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"LOCAL_TAG_MAPPING_SCHEMA"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tag_mapping_schema_1"</span><span class="p">,</span><span class="w">
            </span><span class="s2">"LOCAL_ENABLE_SETUP"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
          </span><span class="p">},</span><span class="w">
          </span><span class="s2">"machine_plate_2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">

        </span><span class="s2">"tag_mapping_schema_2"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="p">},</span><span class="w">
        </span><span class="err">...</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">other</span><span class="w"> </span><span class="err">schema</span><span class="w"> </span><span class="err">go</span><span class="w"> </span><span class="err">here</span><span class="w">

	</span><span class="p">}</span></code></pre></figure>

<h3 id="-how-it-works-third-millennium-way"><a name="thirdmillenniumway"></a> How it works: Third Millennium way</h3>

<p>I create an angular4-based webapp to help you create your <code class="highlighter-rouge">your-factory.json</code> configuration file. The app will guide you through various step, but you can always see in real time the preview of your json configuration changing over time. You can setup your app to run locally or use the one host on <a href="https://predix-configurator.github.io">TODO</a></p>

<h4 id="setup-webapp-to-run-locally">Setup Webapp to run locally</h4>

<p>Make sure you have <a href="https://www.npmjs.com/get-npm">NPM</a> and <a href="https://cli.angular.io">AngularCLI</a> installed on your machine. Then:</p>

<figure class="highlight"><pre><code class="language-sh" data-lang="sh">git clone https://github.com/made2591/predix-configurator
<span class="nb">cd </span>predix-configurator/webgui
npm install
ng serve</code></pre></figure>

<p>And point your browser to <a href="http://localhost:4200/">http://localhost:4200/</a></p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:site">
      <p>more at <a href="http://predix.io">http://predix.io</a>&nbsp;<a href="#fnref:site" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:pcf">
      <p>more at <a href="http://pivotal.io">http://pivotal.io</a>&nbsp;<a href="#fnref:pcf" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/predix-angular-iot</wp:post_id>
        <wp:post_date>2017-12-21T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2017-12-21T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="theory"><![CDATA[["theory",]]></category>
        
          <category domain="post_tag" nicename="network"><![CDATA["network",]]></category>
        
          <category domain="post_tag" nicename="angular"><![CDATA["angular",]]></category>
        
          <category domain="post_tag" nicename="predix"><![CDATA["predix",]]></category>
        
          <category domain="post_tag" nicename="brilliant"><![CDATA["brilliant",]]></category>
        
          <category domain="post_tag" nicename="factory"><![CDATA["factory",]]></category>
        
          <category domain="post_tag" nicename="iot"><![CDATA["iot"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Build a multilayer perceptron with Golang]]></title>
        <link>made2591.github.io/posts/neuralnetwork</link>
        <pubDate>2017-12-20T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="history">History</h3>
<p>We can date the birth of artificial neural networks in 1958, with the introduction of Perceptron <sup id="fnref:rosen"><a href="#fn:rosen" class="footnote">1</a></sup> by Frank Rosenblatt. It was the first algorithm created to reproduce the biological neuron. Conceptually, the easier perceptron that you might think of is made of a single neuron: when it’s exposed to a stimulus, it provides a binary response, just as would a biological neuron.</p>

<p><img src="https://pbs.twimg.com/media/DPtxHXKW4AEcLyc.jpg" alt="ann" /></p>

<p>This model differs greatly from the neural network involving billions of neurons in a biological brain. Shortly after his birth, the researchers showed the world the problems of Perceptron: in fact, it was quickly proved that perceptrons could not be trained to recognize many classes of input patterns. To get a more powerful network, it was necessary to take advantage of multiple level of units and create a multilayers perceptron, with more intermediates neurons used to solve linearly separable<sup id="fnref:linsep"><a href="#fn:linsep" class="footnote">2</a></sup> subproblems, whose outputs were combined together by the final level to provide a concrete response to original input problem. Even though the Perceptron was just a simple but severely limited binary classifier, it introduced a great innovation: the idea to simulate the basic computational unit of a complex biological system that exists in nature.</p>

<h3 id="theory">Theory</h3>
<p>Fundamentally, a neural network is nothing more than a really good function approximator — I mean, you give a trained network as an input vector, it performs a series of operations, and it produces an output vector. To train an ann to estimate an unknown function, the process is really simple: you have to get a training set - a collection of data points - that the network will learn from and generalize on to make future inferences. In a multilayer perceptron data points are forwarded through the network layer-by-layer until they reach the final layer. The final layer’s activations are the predictions that the network actually makes. In this article, I describe how I built with Golang my own perceptron - and then a multilayer perceptron. Let first talk about the representation of the input: all the example codes are from my <a href="https://github.com/made2591/go-perceptron-go">go-perceptron-go</a> repository.</p>

<h4 id="base-structures---code">Base structures - <a href="https://github.com/made2591/go-perceptron-go/tree/master/model/neural">code</a></h4>
<p>To create a neural network, the first thing you have to do is dealing with the definition of data structures. I create a <code class="highlighter-rouge">neural</code> package to collect all files related to architecture structure and elements.</p>

<h5 id="pattern---code">Pattern - <a href="https://github.com/made2591/go-perceptron-go/blob/master/model/neural/pattern.go">code</a></h5>
<p>The <code class="highlighter-rouge">Pattern</code> struct represent a single input to the <code class="highlighter-rouge">Perceptron</code> struct. Look at the code:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// Pattern struct represents one pattern with dimensions and desired value</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">Pattern</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Features</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="x">
	</span><span class="n">SingleRawExpectation</span><span class="x"> </span><span class="kt">string</span><span class="x">
	</span><span class="n">SingleExpectation</span><span class="x"> </span><span class="kt">float64</span><span class="x">
	</span><span class="n">MultipleExpectation</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p>It satisfies our needs with only four fields:</p>
<ul>
  <li><code class="highlighter-rouge">Features</code> is a slice of 64 bit float and this is perfect to represent input dimension,</li>
  <li><code class="highlighter-rouge">SingleRawExpectation</code> is a string and is filled by parser with input classification (in terms of belonging class),</li>
  <li><code class="highlighter-rouge">SingleExpectation</code> is a 64 bit float representation of the class which the pattern belongs,</li>
  <li><code class="highlighter-rouge">MultipleExpectation</code> is a slice of 64 bit float and it is used for multiple class classification problems;</li>
</ul>

<h5 id="neuron---code">Neuron - <a href="https://github.com/made2591/go-perceptron-go/blob/master/model/neural/neuronUnit.go">code</a></h5>
<p>The <code class="highlighter-rouge">NeuronUnit</code> struct represent a single computation unit. Look at the code:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// NeuronUnit struct represents a simple NeuronUnit network with a slice of n weights.</span><span class="x">
</span><span class="k">type</span><span class="x"> </span><span class="n">NeuronUnit</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Weights</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="x">
	</span><span class="n">Bias</span><span class="x"> </span><span class="kt">float64</span><span class="x">
	</span><span class="n">Lrate</span><span class="x"> </span><span class="kt">float64</span><span class="x">
	</span><span class="n">Value</span><span class="x"> </span><span class="kt">float64</span><span class="x">
	</span><span class="n">Delta</span><span class="x"> </span><span class="kt">float64</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p>A neuron corresponds to the simple binary perceptron originally proposed by Rosenblat. It is made of:</p>
<ul>
  <li><code class="highlighter-rouge">Weights</code>, a slice of 64 bit float to represent the way each dimensions of the pattern is modulated,</li>
  <li><code class="highlighter-rouge">Bias</code>, a 64 bit float that represents NeuronUnit natural propensity to spread signal,</li>
  <li><code class="highlighter-rouge">Lrate</code>, a 64 bit float that represents learning rate of neuron,</li>
  <li><code class="highlighter-rouge">MultipleExpectation</code>, a 64 bit float that represents the desired value when I load the input pattner into network in Multi NeuralLayer Perceptron,</li>
  <li><code class="highlighter-rouge">Delta</code>, a 64 bit float that mantains error during execution of training algorithm (later);</li>
</ul>

<h5 id="perceptron">Perceptron</h5>
<p>As I said, the single perceptron schema is implemented by a single neuron. The easiest way to implement this simple classifier is to establish a threshold function, insert it into the neuron, combine the values (eventually using different weights for each of them) that describe the stimulus in a single value, provide this value to the neuron and see what it returns in output. The schema show how it works:</p>

<p><img src="https://upload.wikimedia.org/wikipedia/commons/6/60/ArtificialNeuronModel_english.png" alt="perceptron" /></p>

<h5 id="metric">Metric</h5>
<p>Why <em>weights</em>? What does it mean the expression <em>dimension modulation</em> of the the input? Well, training conceptually is “the process of learning the skills you need to do a particular job or activity”. But how do you know if you’re getting better, or if you are learning the skills you need? Of course, you need a metric of how good or bad you’re doing. Also in ANN there’s a metric generally called <em>cost function</em>. Suppose we want to change a certain <em>wi</em> weight of the network. More or less, the cost function looks at the function the network has inferred and uses it to estimate values for the data points in the training set. The difference between the outputs of the network and the training set data points are the main values for the cost function. When training your network, the goal is to get the value of this cost function as low as possible. The most basic of the training algorithms is the <em>gradient descent</em>.
Suppose we can calculate the error <em>E</em> according to the variation of the weight value <em>wi</em>: we are therefore able to draw the graph in a graph like the one in the figure.</p>

<p align="center"><img src="https://image.ibb.co/jJH2em/graph.png" alt="perceptron" style="width: 250px; marker-top: -10px;" /></p>

<p>Therefore, if we calculate the derivative of this function, we can understand how the variation of the weight makes a positive or negative contribution to the error. In practice, whatever the derived value, we can use a single weight correction function that decrease the involved weight of derived quantity (modulated by learning rate). Despite the fact that it’s quite impossible, for any network or cost function, to be truly convex, the gradient descent follows the derivatives computed for each neuron unit to essentially “roll” down the slope until it finds its way to the center - as close as possible to the <em>global minimum</em>. Before continuing, let’s take a step back.</p>

<h5 id="why-multilayer-the-linearly-separable-problems">Why multilayer? The linearly separable problems</h5>
<p>The problem with the binary perceptron made with a single neuron is the inability to handle non-linearly separable problems: these kind of problems are the ones in which, in other words, it’s impossible to define an hyperplane able to separate, in the vector space of the inputs, those that require a positive output from those requiring a negative output. An example of three non-collinear points belonging to two different classes (‘<em>+</em>’ and ‘<em>-</em>’) are always linearly separable in two dimensions. This is illustrated by the first three examples in the following figure:</p>

<p align="center"><img src="https://image.ibb.co/coBkX6/linear.png" alt="perceptron" style="width: 250px; marker-top: -10px;" /></p>

<p>However, not all sets of four points, no three collinear, are linearly separable in two dimensions. The fourth image would need two straight lines and thus is not linearly separable. This is the main reason scientist start working with multilayers at the very beginning. Let’s move one step forward, introducing the <code class="highlighter-rouge">NeuralLayer</code> struct.</p>

<h5 id="neural-layer---code">Neural Layer - <a href="https://github.com/made2591/go-perceptron-go/blob/master/model/neural/neuralLayer.go">code</a></h5>
<p>The <code class="highlighter-rouge">NeuralLayer</code> struct represents a network layer with a slice of <em>n</em> <code class="highlighter-rouge">NeuronUnits</code>.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">type</span><span class="x"> </span><span class="n">NeuralLayer</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">NeuronUnits</span><span class="x"> </span><span class="p">[]</span><span class="n">NeuronUnit</span><span class="x">
	</span><span class="n">Length</span><span class="x"> </span><span class="kt">int</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p>where:</p>
<ul>
  <li><code class="highlighter-rouge">NeuronUnits</code> represents NeuronUnits in layer,</li>
  <li><code class="highlighter-rouge">Length</code> represents number of NeuronUnit in layer;</li>
</ul>

<p>Now that we are able to build layers of neurons, we can define the <code class="highlighter-rouge">MultiLayerNetwork</code> struct.</p>

<h5 id="multilayer-perceptron---code">Multilayer Perceptron - <a href="https://github.com/made2591/go-perceptron-go/blob/master/model/neural/multiLayerNetwork.go">code</a></h5>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">type</span><span class="x"> </span><span class="n">MultiLayerNetwork</span><span class="x"> </span><span class="k">struct</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">L_rate</span><span class="x"> </span><span class="kt">float64</span><span class="x">
	</span><span class="n">NeuralLayers</span><span class="x"> </span><span class="p">[]</span><span class="n">NeuralLayer</span><span class="x">
	</span><span class="n">T_func</span><span class="x"> </span><span class="n">transferFunction</span><span class="x">
	</span><span class="n">T_func_d</span><span class="x"> </span><span class="n">transferFunction</span><span class="x">
</span><span class="p">}</span></code></pre></figure>

<p>where:</p>
<ul>
  <li><code class="highlighter-rouge">NeuralLayers</code> represents layer of neurons,</li>
  <li><code class="highlighter-rouge">Length</code> represents learning rate of neuron,</li>
  <li><code class="highlighter-rouge">T_func</code> and <code class="highlighter-rouge">T_func_d</code> represents the transferFunction and its derivative;</li>
</ul>

<p>Inside the <code class="highlighter-rouge">MultiLayerNetwork</code> struct there’s an algorithm to create multilayer perceptron: if you pass a struct with <code class="highlighter-rouge">NeuralLayers</code> [4, 3, 3], you can define a network struct with 3 layer: input, hidden, output, with respectively 4, 3 and 3 neurons, as shown in the figure below.</p>

<p><img src="https://image.ibb.co/j9jgpm/first_example_copia.png" alt="perceptron" /></p>

<p>The piece of code that handle network creation is the following:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// ... the following is in the neuralLayer.go</span><span class="x">

</span><span class="c">// PrepareLayer create a NeuralLayer with n NeuronUnits inside</span><span class="x">
</span><span class="c">// [n:int] is an int that specifies the number of neurons in the NeuralLayer</span><span class="x">
</span><span class="c">// [p:int] is an int that specifies the number of neurons in the previous NeuralLayer</span><span class="x">
</span><span class="c">// It returns a NeuralLayer object</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">PrepareLayer</span><span class="p">(</span><span class="n">n</span><span class="x"> </span><span class="kt">int</span><span class="p">,</span><span class="x"> </span><span class="n">p</span><span class="x"> </span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="n">l</span><span class="x"> </span><span class="n">NeuralLayer</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="n">l</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">NeuralLayer</span><span class="p">{</span><span class="n">NeuronUnits</span><span class="o">:</span><span class="x"> </span><span class="nb">make</span><span class="p">([]</span><span class="n">NeuronUnit</span><span class="p">,</span><span class="x"> </span><span class="n">n</span><span class="p">),</span><span class="x"> </span><span class="n">Length</span><span class="o">:</span><span class="x"> </span><span class="n">n</span><span class="p">}</span><span class="x">

	</span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">n</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">RandomNeuronInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">l</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="x"> </span><span class="n">p</span><span class="p">)</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="n">log</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">log</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span><span class="x">
		</span><span class="s">"level"</span><span class="o">:</span><span class="x">   </span><span class="s">"info"</span><span class="p">,</span><span class="x">
		</span><span class="s">"msg"</span><span class="o">:</span><span class="x">     </span><span class="s">"multilayer perceptron init completed"</span><span class="p">,</span><span class="x">
		</span><span class="s">"neurons"</span><span class="o">:</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">),</span><span class="x">
		</span><span class="s">"lengthPreviousLayer"</span><span class="o">:</span><span class="x"> </span><span class="n">l</span><span class="o">.</span><span class="n">Length</span><span class="p">,</span><span class="x">
	</span><span class="p">})</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Complete NeuralLayer init."</span><span class="p">)</span><span class="x">

	</span><span class="k">return</span><span class="x">

</span><span class="p">}</span><span class="x">

</span><span class="c">// ... the following is in the multiLayerNetwork.go</span><span class="x">

</span><span class="c">// PrepareMLPNet create a multi layer Perceptron neural network.</span><span class="x">
</span><span class="c">// [l:[]int] is an int array with layers neurons number [input, ..., output]</span><span class="x">
</span><span class="c">// [lr:int] is the learning rate of neural network</span><span class="x">
</span><span class="c">// [tr:transferFunction] is a transfer function</span><span class="x">
</span><span class="c">// [tr:transferFunction] the respective transfer function derivative</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">PrepareMLPNet</span><span class="p">(</span><span class="n">l</span><span class="x"> </span><span class="p">[]</span><span class="kt">int</span><span class="p">,</span><span class="x"> </span><span class="n">lr</span><span class="x"> </span><span class="kt">float64</span><span class="p">,</span><span class="x"> </span><span class="n">tf</span><span class="x"> </span><span class="n">transferFunction</span><span class="p">,</span><span class="x"> </span><span class="n">trd</span><span class="x"> </span><span class="n">transferFunction</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="n">mlp</span><span class="x"> </span><span class="n">MultiLayerNetwork</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="c">// setup learning rate and transfer function</span><span class="x">
	</span><span class="n">mlp</span><span class="o">.</span><span class="n">L_rate</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">lr</span><span class="x">
	</span><span class="n">mlp</span><span class="o">.</span><span class="n">T_func</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">tf</span><span class="x">
	</span><span class="n">mlp</span><span class="o">.</span><span class="n">T_func_d</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">trd</span><span class="x">

	</span><span class="c">// setup layers</span><span class="x">
	</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="nb">make</span><span class="p">([]</span><span class="n">NeuralLayer</span><span class="p">,</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">))</span><span class="x">

	</span><span class="c">// for each layers specified</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="n">il</span><span class="p">,</span><span class="x"> </span><span class="n">ql</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="k">range</span><span class="x"> </span><span class="n">l</span><span class="x"> </span><span class="p">{</span><span class="x">

		</span><span class="c">// if it is not the first</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">il</span><span class="x"> </span><span class="o">!=</span><span class="x"> </span><span class="m">0</span><span class="x"> </span><span class="p">{</span><span class="x">

			</span><span class="c">// prepare the GENERIC layer with specific dimension and correct number of links for each NeuronUnits</span><span class="x">
			</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">il</span><span class="p">]</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">PrepareLayer</span><span class="p">(</span><span class="n">ql</span><span class="p">,</span><span class="x"> </span><span class="n">l</span><span class="p">[</span><span class="n">il</span><span class="o">-</span><span class="m">1</span><span class="p">])</span><span class="x">

		</span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">

			</span><span class="c">// prepare the INPUT layer with specific dimension and No links to previous.</span><span class="x">
			</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">il</span><span class="p">]</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">PrepareLayer</span><span class="p">(</span><span class="n">ql</span><span class="p">,</span><span class="x"> </span><span class="m">0</span><span class="p">)</span><span class="x">

		</span><span class="p">}</span><span class="x">

	</span><span class="p">}</span><span class="x">

	</span><span class="n">log</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">log</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span><span class="x">
		</span><span class="s">"level"</span><span class="o">:</span><span class="x">     </span><span class="s">"info"</span><span class="p">,</span><span class="x">
		</span><span class="s">"msg"</span><span class="o">:</span><span class="x">       </span><span class="s">"multilayer perceptron init completed"</span><span class="p">,</span><span class="x">
		</span><span class="s">"layers"</span><span class="o">:</span><span class="x">  </span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">),</span><span class="x">
		</span><span class="s">"learningRate: "</span><span class="o">:</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">L_rate</span><span class="p">,</span><span class="x">
	</span><span class="p">})</span><span class="o">.</span><span class="n">Info</span><span class="p">(</span><span class="s">"Complete Multilayer Perceptron init."</span><span class="p">)</span><span class="x">

	</span><span class="k">return</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>For classification problems the input layers has to be define with a number of neurons that match features of pattern shown to network. Of course, the output layer should have a number of unit equals to the number of class in training set.</p>

<p><strong>NOTE</strong>: from the architectural point of view an interesting theorem guarantee that <em>given a sufficient number of hidden units, everything that can be solved by a multilayer network at n levels can also be solved by a two-level network</em>. Therefore in examples we will limit ourselves to using only two levels.</p>

<h4 id="backpropagation-algorithm---code">BackPropagation Algorithm - <a href="https://github.com/made2591/go-perceptron-go/blob/master/model/neural/multiLayerNetwork.go">code</a></h4>
<p>The learning algorithm can be divided into two phases: propagation and weight update.</p>

<h5 id="propagation---1-of-2">Propagation - 1 of 2</h5>
<p>Each propagation involves the following steps:</p>

<ul>
  <li>the <em>propagation</em> forward through the network to generate the output value(s) is done by <code class="highlighter-rouge">Execute</code> function,</li>
  <li>the calculation of the cost (error term) is done here at the very beginning of the <code class="highlighter-rouge">BackPropagate</code> function,</li>
  <li>the propagation of the output activations <strong>back</strong> through the network, using the training pattern target in order to generate the deltas (the difference between the targeted and actual output values) of all output and hidden neurons, done of coure <code class="highlighter-rouge">BackPropagate</code> function;</li>
</ul>

<p>First, let’s have a look to the <code class="highlighter-rouge">Execute</code> function.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// Execute a multi layer Perceptron neural network.</span><span class="x">
</span><span class="c">// [mlp:MultiLayerNetwork] multilayer perceptron network pointer, [s:Pattern] input value</span><span class="x">
</span><span class="c">// It returns output values by network</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">Execute</span><span class="p">(</span><span class="n">mlp</span><span class="x"> </span><span class="o">*</span><span class="n">MultiLayerNetwork</span><span class="p">,</span><span class="x"> </span><span class="n">s</span><span class="x"> </span><span class="o">*</span><span class="n">Pattern</span><span class="p">,</span><span class="x"> </span><span class="n">options</span><span class="x"> </span><span class="o">...</span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="n">r</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="c">// new value</span><span class="x">
	</span><span class="n">nv</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0.0</span><span class="x">

	</span><span class="c">// result of execution for each OUTPUT NeuronUnit in OUTPUT NeuralLayer</span><span class="x">
	</span><span class="n">r</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">)</span><span class="x">

	</span><span class="c">// show pattern to network =&gt;</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">Features</span><span class="p">);</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

		</span><span class="c">// setup value of each neurons in first layers to respective features of pattern</span><span class="x">
		</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="m">0</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Value</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">s</span><span class="o">.</span><span class="n">Features</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="x">

	</span><span class="p">}</span><span class="x">

	</span><span class="c">// execute - hiddens + output</span><span class="x">
	</span><span class="c">// for each layers from first hidden to output</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="n">k</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">1</span><span class="p">;</span><span class="x"> </span><span class="n">k</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">);</span><span class="x"> </span><span class="n">k</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

		</span><span class="c">// for each neurons in focused level</span><span class="x">
		</span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

			</span><span class="c">// init new value</span><span class="x">
			</span><span class="n">nv</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="m">0.0</span><span class="x">

			</span><span class="c">// for each neurons in previous level (for k = 1, INPUT)</span><span class="x">
			</span><span class="k">for</span><span class="x"> </span><span class="n">j</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">j</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">-</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">j</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

				</span><span class="c">// sum output value of previous neurons multiplied by weight between previous and focused neuron</span><span class="x">
				</span><span class="n">nv</span><span class="x"> </span><span class="o">+=</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Weights</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="x"> </span><span class="o">*</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">-</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">Value</span><span class="x">

				</span><span class="n">log</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">log</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span><span class="x">
					</span><span class="s">"level"</span><span class="o">:</span><span class="x">     </span><span class="s">"debug"</span><span class="p">,</span><span class="x">
					</span><span class="s">"msg"</span><span class="o">:</span><span class="x">       </span><span class="s">"multilayer perceptron execution"</span><span class="p">,</span><span class="x">
					</span><span class="s">"len(mlp.NeuralLayers)"</span><span class="o">:</span><span class="x">  </span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">),</span><span class="x">
					</span><span class="s">"layer:  "</span><span class="o">:</span><span class="x"> </span><span class="n">k</span><span class="p">,</span><span class="x">
					</span><span class="s">"neuron: "</span><span class="o">:</span><span class="x"> </span><span class="n">i</span><span class="p">,</span><span class="x">
					</span><span class="s">"previous neuron: "</span><span class="o">:</span><span class="x"> </span><span class="n">j</span><span class="p">,</span><span class="x">
				</span><span class="p">})</span><span class="o">.</span><span class="n">Debug</span><span class="p">(</span><span class="s">"Compute output propagation."</span><span class="p">)</span><span class="x">

			</span><span class="p">}</span><span class="x">

			</span><span class="c">// add neuron bias</span><span class="x">
			</span><span class="n">nv</span><span class="x"> </span><span class="o">+=</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Bias</span><span class="x">

			</span><span class="c">// compute activation function to new output value</span><span class="x">
			</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Value</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">T_func</span><span class="p">(</span><span class="n">nv</span><span class="p">)</span><span class="x">

			</span><span class="n">log</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">log</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span><span class="x">
				</span><span class="s">"level"</span><span class="o">:</span><span class="x">     </span><span class="s">"debug"</span><span class="p">,</span><span class="x">
				</span><span class="s">"msg"</span><span class="o">:</span><span class="x">       </span><span class="s">"setup new neuron output value after transfer function application"</span><span class="p">,</span><span class="x">
				</span><span class="s">"len(mlp.NeuralLayers)"</span><span class="o">:</span><span class="x">  </span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">),</span><span class="x">
				</span><span class="s">"layer:  "</span><span class="o">:</span><span class="x"> </span><span class="n">k</span><span class="p">,</span><span class="x">
				</span><span class="s">"neuron: "</span><span class="o">:</span><span class="x"> </span><span class="n">i</span><span class="p">,</span><span class="x">
				</span><span class="s">"outputvalue"</span><span class="x"> </span><span class="o">:</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Value</span><span class="p">,</span><span class="x">
			</span><span class="p">})</span><span class="o">.</span><span class="n">Debug</span><span class="p">(</span><span class="s">"Setup new neuron output value after transfer function application."</span><span class="p">)</span><span class="x">

		</span><span class="p">}</span><span class="x">

	</span><span class="p">}</span><span class="x">


	</span><span class="c">// get ouput values</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

		</span><span class="c">// simply accumulate values of all neurons in last level</span><span class="x">
		</span><span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Value</span><span class="x">

	</span><span class="p">}</span><span class="x">

	</span><span class="k">return</span><span class="x"> </span><span class="n">r</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>Basically, what <code class="highlighter-rouge">Execute</code> function does is computing the result of execution for each <em>output</em> <code class="highlighter-rouge">NeuronUnit</code> in <em>output</em> <code class="highlighter-rouge">NeuralLayer</code>. In order, it first <em>inserts input</em> to <em>input</em> <code class="highlighter-rouge">NeuralLayer</code> of the network, assigning the values of the dimensions (<code class="highlighter-rouge">Features</code> field) of each pattern to values (<code class="highlighter-rouge">Value</code> field) of each <code class="highlighter-rouge">NeuronUnit</code> in input layer (<code class="highlighter-rouge">mlp.NeuralLayers[0]</code>); after that, for each layers from first hidden to output, and for each neurons in the previous level and the current, execution algorithm computes the sum of multiplication between the weight that links two involved neurons and the (output) computed in the step before of the previous neuron - this is the meaning of most internal for. Then, the bias - natural propension to activation - of the neuron is added to the quantity <em>nv</em>, and output value of the current neuron in the current neural layer is <em>updated</em> with the activation function computed passing this quantity <em>nv</em> as parameter. The last for simply accumulate values of all neurons in last level and return the result. To summarize, this algorithm makes the input flow through the network, using weights to modulate the various dimensions that describe it and the activation functions to calculate the response of each neuron. In the end, the values accumulated in the neurons of the last level are returned.</p>

<p>Back to the <code class="highlighter-rouge">BackPropagate</code>, we already said it starts executing the network. The idea is to get the value accumulated in the neurons of the last level, to compute the error accumulated retracing the various steps backwards. With the (<strong>uncorrect</strong>) assumption of a convex function, we can imagine that <em>solving the weight update task backwards, by calculating the derivative of the activation function</em>, is a good way to <em>go down towards the global optimum</em>. In reality, there is no guarantee of not being <em>stuck in a false minimum</em>, and this depends on the characteristics of the function and (most likely) also on the architecture chosen for our ann.</p>

<p align="center"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1e/Extrema_example.svg/600px-Extrema_example.svg.png" alt="perceptron" style="width: 300px; marker-top: -10px;" /></p>

<p>Weights update:</p>

<h5 id="weight-update---2-of-2">Weight update - 2 of 2</h5>
<p>For each weight in the network, the following steps must be followed:</p>

<ul>
  <li>the weight’s output delta and input activation are multiplied to find the gradient of the weight,</li>
  <li>a percentage (modulated by learning rate) of the weight’s gradient is subtracted from the weight;</li>
</ul>

<p>The learning rate <em>influences</em> the speed and quality of learning. The greater it is, the faster the neuron trains, but the lower it is, the more accurate the training is. The sign of the gradient of a weight indicates whether the error varies directly with, or inversely to, the weight. Therefore, the weight must be updated in the opposite direction - this is the reason of the name <em>gradient descent</em>.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// BackPropagation algorithm.</span><span class="x">
</span><span class="c">// [mlp:MultiLayerNetwork] input value		[s:Pattern] input value (scaled between 0 and 1)</span><span class="x">
</span><span class="c">// [o:[]float64] expected output value (scaled between 0 and 1)</span><span class="x">
</span><span class="c">// return [r:float64] delta error between generated output and expected output</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">BackPropagate</span><span class="p">(</span><span class="n">mlp</span><span class="x"> </span><span class="o">*</span><span class="n">MultiLayerNetwork</span><span class="p">,</span><span class="x"> </span><span class="n">s</span><span class="x"> </span><span class="o">*</span><span class="n">Pattern</span><span class="p">,</span><span class="x"> </span><span class="n">o</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="p">,</span><span class="x"> </span><span class="n">options</span><span class="x"> </span><span class="o">...</span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="p">(</span><span class="n">r</span><span class="x"> </span><span class="kt">float64</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="k">var</span><span class="x"> </span><span class="n">no</span><span class="x"> </span><span class="p">[]</span><span class="kt">float64</span><span class="p">;</span><span class="x">
	</span><span class="c">// execute network with pattern passed over each level to output</span><span class="x">
	</span><span class="k">if</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">options</span><span class="p">)</span><span class="x"> </span><span class="o">==</span><span class="x"> </span><span class="m">1</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">no</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">Execute</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span><span class="x"> </span><span class="n">s</span><span class="p">,</span><span class="x"> </span><span class="n">options</span><span class="p">[</span><span class="m">0</span><span class="p">])</span><span class="x">
	</span><span class="p">}</span><span class="x"> </span><span class="k">else</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">no</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">Execute</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span><span class="x"> </span><span class="n">s</span><span class="p">)</span><span class="x">
	</span><span class="p">}</span><span class="x">

	</span><span class="c">// init error</span><span class="x">
	</span><span class="n">e</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0.0</span><span class="x">

	</span><span class="c">// compute output error and delta in output layer</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

		</span><span class="c">// compute error in output: output for given pattern - output computed by network</span><span class="x">
		</span><span class="n">e</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">o</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="x"> </span><span class="o">-</span><span class="x"> </span><span class="n">no</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="x">

		</span><span class="c">// compute delta for each neuron in output layer as:</span><span class="x">
		</span><span class="c">// error in output * derivative of transfer function of network output</span><span class="x">
		</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Delta</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">e</span><span class="x"> </span><span class="o">*</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">T_func_d</span><span class="p">(</span><span class="n">no</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="x">

	</span><span class="p">}</span><span class="x">

	</span><span class="c">// backpropagate error to previous layers</span><span class="x">
	</span><span class="c">// for each layers starting from the last hidden (len(mlp.NeuralLayers)-2)</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="n">k</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">)</span><span class="o">-</span><span class="m">2</span><span class="p">;</span><span class="x"> </span><span class="n">k</span><span class="x"> </span><span class="o">&gt;=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">k</span><span class="o">--</span><span class="x"> </span><span class="p">{</span><span class="x">

		</span><span class="c">// compute actual layer errors and re-compute delta</span><span class="x">
		</span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

			</span><span class="c">// reset error accumulator</span><span class="x">
			</span><span class="n">e</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="m">0.0</span><span class="x">

			</span><span class="c">// for each link to next layer</span><span class="x">
			</span><span class="k">for</span><span class="x"> </span><span class="n">j</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">j</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">j</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

				</span><span class="c">// sum delta value of next neurons multiplied by weight between focused neuron and all neurons in next level</span><span class="x">
				</span><span class="n">e</span><span class="x"> </span><span class="o">+=</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">Delta</span><span class="x"> </span><span class="o">*</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">Weights</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="x">

			</span><span class="p">}</span><span class="x">

			</span><span class="c">// compute delta for each neuron in focused layer as error * derivative of transfer function</span><span class="x">
			</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Delta</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">e</span><span class="x"> </span><span class="o">*</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">T_func_d</span><span class="p">(</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Value</span><span class="p">)</span><span class="x">

		</span><span class="p">}</span><span class="x">

		</span><span class="c">// compute weights in the next layer</span><span class="x">
		</span><span class="c">// for each link to next layer</span><span class="x">
		</span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

			</span><span class="c">// for each neurons in actual level (for k = 0, INPUT)</span><span class="x">
			</span><span class="k">for</span><span class="x"> </span><span class="n">j</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">j</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">Length</span><span class="p">;</span><span class="x"> </span><span class="n">j</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

				</span><span class="c">// sum learning rate * next level next neuron Delta * actual level actual neuron output value</span><span class="x">
				</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Weights</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="x"> </span><span class="o">+=</span><span class="x">
					</span><span class="n">mlp</span><span class="o">.</span><span class="n">L_rate</span><span class="x"> </span><span class="o">*</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Delta</span><span class="x"> </span><span class="o">*</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">.</span><span class="n">Value</span><span class="x">

			</span><span class="p">}</span><span class="x">

			</span><span class="c">// learning rate * next level next neuron Delta * actual level actual neuron output value</span><span class="x">
			</span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Bias</span><span class="x"> </span><span class="o">+=</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">L_rate</span><span class="x"> </span><span class="o">*</span><span class="x"> </span><span class="n">mlp</span><span class="o">.</span><span class="n">NeuralLayers</span><span class="p">[</span><span class="n">k</span><span class="x"> </span><span class="o">+</span><span class="x"> </span><span class="m">1</span><span class="p">]</span><span class="o">.</span><span class="n">NeuronUnits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">Delta</span><span class="x">

		</span><span class="p">}</span><span class="x">

	</span><span class="p">}</span><span class="x">

	</span><span class="c">// compute global errors as sum of abs difference between output execution for each neuron in output layer</span><span class="x">
	</span><span class="c">// and desired value in each neuron in output layer</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="p">;</span><span class="x"> </span><span class="n">i</span><span class="x"> </span><span class="o">&lt;</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">o</span><span class="p">);</span><span class="x"> </span><span class="n">i</span><span class="o">++</span><span class="x"> </span><span class="p">{</span><span class="x">

		</span><span class="n">r</span><span class="x"> </span><span class="o">+=</span><span class="x"> </span><span class="n">math</span><span class="o">.</span><span class="n">Abs</span><span class="p">(</span><span class="n">no</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="x"> </span><span class="o">-</span><span class="x"> </span><span class="n">o</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="x">

	</span><span class="p">}</span><span class="x">

	</span><span class="c">// average error</span><span class="x">
	</span><span class="n">r</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">r</span><span class="x"> </span><span class="o">/</span><span class="x"> </span><span class="kt">float64</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">o</span><span class="p">))</span><span class="x">

	</span><span class="k">return</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>After execution step, <code class="highlighter-rouge">BackPropagate</code> function starts computing output error and delta for the output level. The delta for a given neuron can be calculated as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>delta = (expected - output) * transfer\_derivative(output)
</code></pre></div></div>

<p>where expected is the expected output value (<em>o[i]</em>) for the neuron and output is the output value for the neuron (<em>no[i]</em>) computed by the Execution step (the first operation is done in the code by <em>e = o[i] - no[i]</em> operation). Then, the <em>transfer_derivative()</em> calculates the slope of the neuron’s output value and the algorithm save this value to the delta fields of each of the neurons (not only in the oupput layers): this is done because the layers of the network are iterated in reverse order - or <em>backwards</em>, as it is shown by the <em>k-for</em> (<em>k–</em>) - starting at the output and working backwards. This ensures that the neurons in the output layer have errors values calculated first that neurons in the hidden layer can use in the subsequent iteration.</p>

<p>In the hidden layer, things are a little more complicated. The error signal for a neuron in the hidden layer is computed as the <em>weighted error of each neuron in the output layer</em>. Think of the error traveling back along the weights of the output layer to the neurons in the hidden layer: the back-propagated error signal <strong>is accumulated</strong> and then <strong>used to determine the error for the neuron in the hidden layer</strong>, as follows:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>delta\_i = accumulated(weight\_i * delta\_j) * transfer\_derivative(output)
</code></pre></div></div>

<p>where <em>delta_j</em> is the error signal from the <em>j_th</em> neuron in the output layer, <em>weight_i</em> is the weight that connects the <em>i_th</em> neuron of the output layer to the current neuron, and output is the output of the current neuron<sup id="fnref:details"><a href="#fn:details" class="footnote">3</a></sup>. After that there is the network layers weights update, that follow this rules</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>weight\_i = weight\_i + (learning_rate * delta\_j * input)
</code></pre></div></div>

<p>Finally, the errors (as the abs difference between expcted minus computed) accumulated in the neurons of the last level are returned. Wait a minute: where is the training algorithm?</p>

<h4 id="training-algorithm">Training Algorithm</h4>
<p>Look at the code below! Basically, what it does is running for a fixed amount of epochs the BackPropagate function.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// MLPTrain train a mlp MultiLayerNetwork with BackPropagation algorithm for assisted learning.</span><span class="x">
</span><span class="k">func</span><span class="x"> </span><span class="n">MLPTrain</span><span class="p">(</span><span class="n">mlp</span><span class="x"> </span><span class="o">*</span><span class="n">MultiLayerNetwork</span><span class="p">,</span><span class="x"> </span><span class="n">patterns</span><span class="x"> </span><span class="p">[]</span><span class="n">Pattern</span><span class="p">,</span><span class="x"> </span><span class="n">mapped</span><span class="x"> </span><span class="p">[]</span><span class="kt">string</span><span class="p">,</span><span class="x"> </span><span class="n">epochs</span><span class="x"> </span><span class="kt">int</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="n">epoch</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="m">0</span><span class="x">
	</span><span class="n">output</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="nb">make</span><span class="p">([]</span><span class="kt">float64</span><span class="p">,</span><span class="x"> </span><span class="nb">len</span><span class="p">(</span><span class="n">mapped</span><span class="p">))</span><span class="x">

	</span><span class="c">// for fixed number of epochs</span><span class="x">
	</span><span class="k">for</span><span class="x"> </span><span class="p">{</span><span class="x">

		</span><span class="c">// for each pattern in training set</span><span class="x">
		</span><span class="k">for</span><span class="x"> </span><span class="n">_</span><span class="p">,</span><span class="x"> </span><span class="n">pattern</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="k">range</span><span class="x"> </span><span class="n">patterns</span><span class="x"> </span><span class="p">{</span><span class="x">

			</span><span class="c">// setup desired output for each unit</span><span class="x">
			</span><span class="k">for</span><span class="x"> </span><span class="n">io</span><span class="p">,</span><span class="x"> </span><span class="n">_</span><span class="x"> </span><span class="o">:=</span><span class="x"> </span><span class="k">range</span><span class="x"> </span><span class="n">output</span><span class="x"> </span><span class="p">{</span><span class="x">
				</span><span class="n">output</span><span class="p">[</span><span class="n">io</span><span class="p">]</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="m">0.0</span><span class="x">
			</span><span class="p">}</span><span class="x">
			</span><span class="c">// setup desired output for specific class of pattern focused</span><span class="x">
			</span><span class="n">output</span><span class="p">[</span><span class="kt">int</span><span class="p">(</span><span class="n">pattern</span><span class="o">.</span><span class="n">SingleExpectation</span><span class="p">)]</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="m">1.0</span><span class="x">
			</span><span class="c">// back propagation</span><span class="x">
			</span><span class="n">BackPropagate</span><span class="p">(</span><span class="n">mlp</span><span class="p">,</span><span class="x"> </span><span class="o">&amp;</span><span class="n">pattern</span><span class="p">,</span><span class="x"> </span><span class="n">output</span><span class="p">)</span><span class="x">

		</span><span class="p">}</span><span class="x">

		</span><span class="n">log</span><span class="o">.</span><span class="n">WithFields</span><span class="p">(</span><span class="n">log</span><span class="o">.</span><span class="n">Fields</span><span class="p">{</span><span class="x">
			</span><span class="s">"level"</span><span class="o">:</span><span class="x">             </span><span class="s">"info"</span><span class="p">,</span><span class="x">
			</span><span class="s">"place"</span><span class="o">:</span><span class="x">             </span><span class="s">"validation"</span><span class="p">,</span><span class="x">
			</span><span class="s">"method"</span><span class="o">:</span><span class="x">            </span><span class="s">"MLPTrain"</span><span class="p">,</span><span class="x">
			</span><span class="s">"epoch"</span><span class="o">:</span><span class="x">        	 </span><span class="n">epoch</span><span class="p">,</span><span class="x">
		</span><span class="p">})</span><span class="o">.</span><span class="n">Debug</span><span class="p">(</span><span class="s">"Training epoch completed."</span><span class="p">)</span><span class="x">

		</span><span class="c">// if max number of epochs is reached</span><span class="x">
		</span><span class="k">if</span><span class="x"> </span><span class="n">epoch</span><span class="x"> </span><span class="o">&gt;</span><span class="x"> </span><span class="n">epochs</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="c">// exit</span><span class="x">
			</span><span class="k">break</span><span class="x">
		</span><span class="p">}</span><span class="x">
		</span><span class="c">// increase number of epoch</span><span class="x">
		</span><span class="n">epoch</span><span class="o">++</span><span class="x">

	</span><span class="p">}</span><span class="x">

</span><span class="p">}</span></code></pre></figure>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:rosen">
      <p>F. Rosenblatt. The perceptron: A probabilistic model for information storage and organization in the brain. Psychological Review, pages 65–386, 1958. (cit. a p. 5).&nbsp;<a href="#fnref:rosen" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:linsep">
      <p>This condition describes the situation in which there exists a hyperplane able to separate, in the vector space of the inputs, those that require a positive output from those requiring a negative output.&nbsp;<a href="#fnref:linsep" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:details">
      <p>I do not want to bore you with maths, if you want to read more maths details <a href="https://en.wikipedia.org/wiki/Backpropagation">here</a>.&nbsp;<a href="#fnref:details" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/neuralnetwork</wp:post_id>
        <wp:post_date>2017-12-20T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2017-12-20T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="golang"><![CDATA["golang",]]></category>
        
          <category domain="post_tag" nicename="ann"><![CDATA["ann",]]></category>
        
          <category domain="post_tag" nicename="perceptron"><![CDATA["perceptron",]]></category>
        
          <category domain="post_tag" nicename="classifier"><![CDATA["classifier",]]></category>
        
          <category domain="post_tag" nicename="neural"><![CDATA["neural",]]></category>
        
          <category domain="post_tag" nicename="networks"><![CDATA["networks"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Fundamentals by an ITalian guy]]></title>
        <link>made2591.github.io/posts/fundamentals</link>
        <pubDate>2017-12-19T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="prelude">Prelude</h3>
<p>Nobody ever tells you enough: you need to know the <em>fundamentals</em>. Ok - what am I talking about? I would rather limit myself to talking about computer science, something I really do not know about.</p>

<h3 id="intro">Intro</h3>
<p>As this blog says, I’m an IT guy, and I reiterate that…I do not know anything about computer science. It is of course a fault of mine, at least in part, but I think it is also due to the time we live, the opportunities that surround me, the needs of the market, an endless amount of statistics about the world, the number people who live, the kind of people who are gone, the people who govern, the people who don’t, the available types of work, the new laws, the old laws, the borders, netflix-facebook-twitter-snapchat-telegram-instagram-pinterest-reddit-batman, certainly also because of Tweedledum and Tweedledee, and so many others things. 
I think I will go through some of the reasons that I feel are the most important ones to explain why I feel a lack of knowledge and why I am disappointed about it - more in general, about the global lack of fundamentals.</p>

<p><img src="https://i.pinimg.com/originals/3f/d9/fe/3fd9fe930005d271e94ed35a42d62f88.jpg" alt="tweedledumtweedledee" /></p>

<h3 id="what">What</h3>
<p>What fundamentals include in my opinion? It depends on the role you have in IT, but basically it concerns the knowledge of basic concepts and ability to use them to solve complex problems (networks, algorithms, data structures), the interest in updating (don’t do the same thing equal two subsequent different times), the passion for the subject (don’t be superficial and interested trying to understand things in depth), the ability to write <em>code</em> - whatever type it is, from application’s to infrastructure’s - that is legible and respects strict syntactic formalisms (don’t take anything for granted). This type of characteristics is normally accompanied by the ability to participate actively in open source projects, to write avalanches of open source code, to find people who can help you recover lost fundamentals and learn new best practices: in the end, I believe it is difficult to find these characteristics, and more than one time I realized I do not have them all.
For instance, I recently discover <a href="https://github.com/jwasham/coding-interview-university/blob/master/README.md">this</a> repository meant “for new software engineers or those switching from software/web development to software engineering (where computer science knowledge is required). If you have many years of experience and are claiming many years of software engineering experience, expect a harder interview. If you have many years of software/web development experience, note that large software companies like Google, Amazon, Facebook and Microsoft view software engineering as different from software/web development, and they require computer science knowledge.” In that readme you can find a lot of source of what I means for fundamentals.</p>

<p><img src="https://www.cyberciti.biz/media/images.ipv6net/howtos/freebsd-single-user.png" alt="interview" /></p>

<h3 id="when">When</h3>
<p>Let’s start with this assumption: computer science - I mean, a simple f***ng consumer pc with text editor and stop, available for people and not <em>nerds in a garage</em> - was born after the birth of my parents. There where no internet for them, no wikipedia, no *chat* at all - because they hadn’t cell phone or smartphone in their teenage years - foundamentally, none of what is almost necessarily part of our lives today. I often find myself asking “what the hell! how did you survive?!?” mostly because today I can’t live without all of this stuff, and I would be cut out of any set I belong to - besides the fact that I would be without a job.
I think that the answer lies in the same <em>time</em> they lived: fourty years ago there wasn’t almost anything in my field - and in so many others because (again) I’m in IT - so that people was pushed to study, work, approach themselves, engineer themselves, invent themselves, sell themselves in a totally different way from what happens today. Some time ago a guy told me this story: he studied Computer Science at University and he followed a class called <em>Operating Systems</em>. The final project was <em>writing an operating system</em><sup id="fnref:os"><a href="#fn:os" class="footnote">1</a></sup>. So it was in many other fields: the final project for obtaining a diploma as an <em>electronic expert</em> was <em>building a radio</em> or <em>a set of strobe lights</em>, in both case starting from nothing or just a book and some savings to buy components. Only God knows what was required to obtain a specialization in Medicine and Surgery<sup id="fnref:med"><a href="#fn:med" class="footnote">2</a></sup>. They tried, even without hope, because they had no alternative. They succeeded - I like to believe - because they were forced to deal with the <strong>fundamentals</strong> in their respective fields of study. 
The point is <em>(almost) all the (smart) people of the previous generation, with respect to mine generation, are able to do things by themself</em>, without delegate goals to others; I am upset about this, I really envy them, not so much because they didn’t have all the comforts and tools I studied / grow up / played with, but mostly because they had no choice! I truly think this helped them a lot. Fourty here ago, experts had fundamentals: they got an enormous amount of information, and study a lot to fix the fundamental concepts in memory. Today this is not true anymore: today, an expert is someone who can filter the informations, which are redundant and often wrong. These key concepts are literally buried under layers of complex research, evolutions, tools, opinions, articles and books. In the end, you are an expert if you are able to pass the witness in the case you have no time to fill your lack of fundamentals in a particular field.</p>

<p><img src="http://a.abcnews.com/images/Technology/gty_steve_jobs_house_kb_130924_33x16_992.jpg" alt="jobs" /></p>

<h3 id="where">Where</h3>
<p>In a sense, having fundamentals implies having ability to get things done, without asking to many others. Let’s move one step forward. 
I am from Italy, so I don’t want to talk <em>bad</em> about Italy - I know it’s a very Italian move (n.d.r.) and I am proud to be Italian (I am more an <em>IT guy</em> than a complete <em>ITalian guy</em> XD): I’d prefer to stay neutral. But, I feel I am not the only one who don’t have enough key concepts, there’s a global <em>lack in the air</em>. In fact, from a working perspective, even if you can find opportunities to grow up from a technical point of view, you have to deal with requirements and this is a <em>huge</em> problem. The requirements for a professional are often 1) too high 2) too low, and this is a problem in both case.
I remember a conversation with a friend of mine “Look at this job post: to have experience with all this technologies you have to be a bicentennial, and even in this case you woudn’t be able to be a master of all of these technologies”. I read - more then one times - impossible requirements to satisfy, such as “working experience with technology A 10+ years” with A a technology that is, for instance, 4 years old. I believe this happens because there is no a capillary knowledge of those basic concepts necessary to filter the huge amount of information and technology around the most recent and modern things. The point is: if you are a professional who is tired of reading these kind of job offers, sooner or later you have to fill your lack of <em>fundamentals</em>.</p>

<p><img src="https://ellenlandreth.files.wordpress.com/2014/11/books-opened.jpg" alt="jobs" /></p>

<h3 id="how">How</h3>
<p>Back to job post requirements, I told about two different scenario: too high and too low. Let’s talk about that.
In the first scenario, I think recruiters and/or companies know about this boring fundamentals story and want professional able to handle really complex <em>questions</em>. This often happens for positions and selection in big companies, who have to deal with a huge number of resumes and find nice to say: “ok, you don’t have sufficient key concepts, please study to acquire them, then return back to us if you want to have an opportunity”. The problem in this scenario is that lots of talended professional have to be excluded because a big efforts are required from them to meets - too high - requirements: these places around the world prefer professional already <em>up and running</em>, I think mainly because they have no time to lose - but I prefer thinking because they have always a lot of choice.
In the second scenario, more priority is given to the ability to learn than skills you already have (really cool if you learn fast) but…almost everytime, this is done <em>without a full awareness about the importance of fundamentals</em>. More in detail, the world is often ultra-professional: if I look for someone who knows / is able to use a technology, it seems almost obvious that he has fundamentals in its cultural background. Nothing more wrong, I say. The recruiters and companies that do not require inbound technical skills, haven’t a clear vision of <em>the lack of fundamentals</em> inside: this, referring to the <em>when</em>-paragraph, implies that the key concepts are not necessary and therefore that the company is not really able to move independently. It seems there is no solution to <em>select a pro with fundamentals</em>, because if you ask too much, you end up exluding talended professionals and if you don’t ask at all, it means you don’t provide a place to learn from, and thus means a lack of knowledge that will not attract talented professional. 
However, this confirms that if you are a professional, you have no choice: you need to know the <em>fundamentals</em>.</p>

<p><img src="http://mmbiz.qpic.cn/mmbiz_jpg/eL7YiacLdzwpOzPNj9Xpq3eEDyc2HrnpaJPXMHElaGSRrR3SADrXibWVRusXLEib5BANLjE5kAKPGC5nr17nE6tvg/0?wx_fmt=jpeg" alt="jobs" /></p>

<h3 id="why">Why</h3>
<p>To summarize, <em>from a company perspective</em> seems that looking too much for fundamentals implies accepting the risk to lose talended professionals, and don’t check at all for the lack of knowledge suggests that, besides not having the fundamentals (and thus accepting the fact the company is not indipendent in what is doing), it doesn’t provide a place to learn from, so it is not attractive for talented professional. Let’s move one step forward.
Since I started working, but even during my years of studies, I realized that any organization of any type, at some point, need to be more innovative. What is different across different place I work is the number of hoops that a person have to jump through to get innovation done. I simply don’t want to be a long-suffering and patient diplomat in order to get a potentially creative new product developed: I don’t want to manage this kind of stuff - I mean, I have already to deal with my f***ng lack of fundamentals. This kind of effort often takes a combination of tenacity and political skills that most professional… just don’t have: I think that often <em>management processes</em> work <em>against</em> the company’s interests themself. 
Why this point is related to <em>the lack of fundamentals</em> problem? Because, again, I believe there’s no a full awareness about the process needed in a company to let employees follow and explore their idea, test key assumptions and realize a successful products. I believe that management lacks the fundamentals: I think this inability is linked to the importance given to funds, priorities, goals, objectives, all elements the leads to incorrect assessments if the key concepts are missing. You don’t have to be courageous or intelligent to make innovative decisions: you only have to fill the lack of fundamentals.</p>

<p><img src="http://starwarsblog.starwars.com/wp-content/uploads/2017/05/yoda-advice-featured-1.jpg" alt="jobs" /></p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:os">
      <p>For those who are from IT, this is a difficult task.&nbsp;<a href="#fnref:os" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:med">
      <p>Ok, calm down doctors! I am sure it is not so easy also today XD!&nbsp;<a href="#fnref:med" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/fundamentals</wp:post_id>
        <wp:post_date>2017-12-19T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2017-12-19T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="fundamentals"><![CDATA[["fundamentals",]]></category>
        
          <category domain="post_tag" nicename="approach"><![CDATA["approach",]]></category>
        
          <category domain="post_tag" nicename="work"><![CDATA["work",]]></category>
        
          <category domain="post_tag" nicename="thoughts"><![CDATA["thoughts",]]></category>
        
          <category domain="post_tag" nicename="life"><![CDATA["life"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Golang, Docker and multistage build]]></title>
        <link>made2591.github.io/posts/goa-docker-multistage</link>
        <pubDate>2017-12-18T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="recipe-for-a-good-meal">Recipe for a good meal</h3>
<p>A few months ago I started working with Golang to a <em>proof-of-concept</em> project using the amazing <a href="https://goa.design/">goa</a>
package (thank you <a href="https://github.com/atosatto">atosatto</a> for your advise): I omit the praise, I would only say that - <em>imho</em> - Golang it’s a very funny language to use for many reasons (stay tuned, I will write about Golang and my favourite packages). However, in this post I want to share a little piece of my experience about this project: the main ingredients for this recipe are Golang (in particular the goa package) and Docker - with some piece of Angular 4, nginx, and minor stuff. I excluded the storage part so the two elements of the <em>boilerplate</em> I will talk about live in separate container - you can of course orchestrate with k8… ok, whatever you want :P</p>
<ul>
  <li>api-container:
    <ul>
      <li>[goa.design], a Golang package to build restful api (just a few notes),</li>
    </ul>
  </li>
  <li>web-container:
    <ul>
      <li>[Angular 4], the popular framework to build cool frontend (just a few notes),</li>
      <li>[nginx], a simple container webserver to handle request request from fe,</li>
    </ul>
  </li>
</ul>

<p>If you want to find out how to start building with these tools, this is the right place for you!</p>

<p align="center"><img src="https://www.gopherguides.com/assets/images/logos/logo.svg" style="width: 70%; marker-top: -10px;" /></p>

<h4 id="goadesign">goa.design</h4>
<p>goa is a <em>holistic approach for building microservices</em> in Golang (cit). I don’t want to go through all the features of the packages, you can read a <em>quite</em> complete <a href="https://goa.design/design/overview/">overview</a> of the project in the official site. What goa actually offers is a good starting point if you want to <em>design</em> your microservices without losing time in the construction of the outline logic and focusing mainly on the definition of resources, actions and media types. Look at some piece of code from the <a href="https://github.com/goadesign/goa-cellar">goa-cellar</a> example:</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">package</span><span class="x"> </span><span class="n">design</span><span class="x">

</span><span class="k">import</span><span class="x"> </span><span class="p">(</span><span class="x">
	</span><span class="o">.</span><span class="x"> </span><span class="s">"github.com/goadesign/goa/design"</span><span class="x">
	</span><span class="o">.</span><span class="x"> </span><span class="s">"github.com/goadesign/goa/design/apidsl"</span><span class="x">
</span><span class="p">)</span><span class="x">

</span><span class="c">// This is the cellar application API design used by goa to generate</span><span class="x">
</span><span class="c">// the application code, client, tests, documentation etc.</span><span class="x">
</span><span class="k">var</span><span class="x"> </span><span class="n">_</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">API</span><span class="p">(</span><span class="s">"MyPorh"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Title</span><span class="p">(</span><span class="s">"The virtual wine cellar"</span><span class="p">)</span><span class="x">
	</span><span class="n">Description</span><span class="p">(</span><span class="s">"A basic example of a CRUD API implemented with goa"</span><span class="p">)</span><span class="x">
	</span><span class="n">Contact</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Name</span><span class="p">(</span><span class="s">"goa team"</span><span class="p">)</span><span class="x">
		</span><span class="n">Email</span><span class="p">(</span><span class="s">"admin@goa.design"</span><span class="p">)</span><span class="x">
		</span><span class="n">URL</span><span class="p">(</span><span class="s">"http://goa.design"</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">
	</span><span class="n">License</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Name</span><span class="p">(</span><span class="s">"MIT"</span><span class="p">)</span><span class="x">
		</span><span class="n">URL</span><span class="p">(</span><span class="s">"https://github.com/goadesign/goa/blob/master/LICENSE"</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">
	</span><span class="n">Docs</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Description</span><span class="p">(</span><span class="s">"goa guide"</span><span class="p">)</span><span class="x">
		</span><span class="n">URL</span><span class="p">(</span><span class="s">"http://goa.design/getting-started.html"</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">
	</span><span class="n">Host</span><span class="p">(</span><span class="s">"localhost:8081"</span><span class="p">)</span><span class="x">
	</span><span class="n">Scheme</span><span class="p">(</span><span class="s">"http"</span><span class="p">)</span><span class="x">
	</span><span class="n">BasePath</span><span class="p">(</span><span class="s">"/cellar"</span><span class="p">)</span><span class="x">

	</span><span class="n">Origin</span><span class="p">(</span><span class="s">"http://swagger.goa.design"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Methods</span><span class="p">(</span><span class="s">"GET"</span><span class="p">,</span><span class="x"> </span><span class="s">"POST"</span><span class="p">,</span><span class="x"> </span><span class="s">"PUT"</span><span class="p">,</span><span class="x"> </span><span class="s">"PATCH"</span><span class="p">,</span><span class="x"> </span><span class="s">"DELETE"</span><span class="p">)</span><span class="x">
		</span><span class="n">MaxAge</span><span class="p">(</span><span class="m">600</span><span class="p">)</span><span class="x">
		</span><span class="n">Credentials</span><span class="p">()</span><span class="x">
	</span><span class="p">})</span><span class="x">

	</span><span class="n">ResponseTemplate</span><span class="p">(</span><span class="n">Created</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">(</span><span class="n">pattern</span><span class="x"> </span><span class="kt">string</span><span class="p">)</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Description</span><span class="p">(</span><span class="s">"Resource created"</span><span class="p">)</span><span class="x">
		</span><span class="n">Status</span><span class="p">(</span><span class="m">201</span><span class="p">)</span><span class="x">
		</span><span class="n">Headers</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Header</span><span class="p">(</span><span class="s">"Location"</span><span class="p">,</span><span class="x"> </span><span class="n">String</span><span class="p">,</span><span class="x"> </span><span class="s">"href to created resource"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
				</span><span class="n">Pattern</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span><span class="x">
			</span><span class="p">})</span><span class="x">
		</span><span class="p">})</span><span class="x">
	</span><span class="p">})</span><span class="x">
</span><span class="p">})</span></code></pre></figure>

<p>The goa <em>design language</em> consists of <em>functions</em> defined to describe <em>definitions</em>. The goa design language root definition is the API definition. The goa API design language is a <code class="highlighter-rouge">DSL</code> <em>implemented</em> in Go and is not Go: it makes use of <em>anonymous</em> functions to describe the various definitions. In the example above the API function accepts the name of the API as first argument and an anonymous function as second argument. This anonymous function defines additional properties of the API: the pattern (name + DSL) is used by many other DSL functions. Let’s move one step forward, introducing <code class="highlighter-rouge">Resource</code>.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="k">var</span><span class="x"> </span><span class="n">_</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">Resource</span><span class="p">(</span><span class="s">"account"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">

	</span><span class="n">DefaultMedia</span><span class="p">(</span><span class="n">Account</span><span class="p">)</span><span class="x">
	</span><span class="n">BasePath</span><span class="p">(</span><span class="s">"/accounts"</span><span class="p">)</span><span class="x">

	</span><span class="n">Action</span><span class="p">(</span><span class="s">"list"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Routing</span><span class="p">(</span><span class="x">
			</span><span class="n">GET</span><span class="p">(</span><span class="s">""</span><span class="p">),</span><span class="x">
		</span><span class="p">)</span><span class="x">
		</span><span class="n">Description</span><span class="p">(</span><span class="s">"Retrieve all accounts."</span><span class="p">)</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">OK</span><span class="p">,</span><span class="x"> </span><span class="n">CollectionOf</span><span class="p">(</span><span class="n">Account</span><span class="p">))</span><span class="x">
	</span><span class="p">})</span><span class="x">

	</span><span class="n">Action</span><span class="p">(</span><span class="s">"show"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Routing</span><span class="p">(</span><span class="x">
			</span><span class="n">GET</span><span class="p">(</span><span class="s">"/:accountID"</span><span class="p">),</span><span class="x">
		</span><span class="p">)</span><span class="x">
		</span><span class="n">Description</span><span class="p">(</span><span class="s">"Retrieve account with given id. IDs 1 and 2 pre-exist in the system."</span><span class="p">)</span><span class="x">
		</span><span class="n">Params</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Param</span><span class="p">(</span><span class="s">"accountID"</span><span class="p">,</span><span class="x"> </span><span class="n">Integer</span><span class="p">,</span><span class="x"> </span><span class="s">"Account ID"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
				</span><span class="n">Minimum</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="x">
			</span><span class="p">})</span><span class="x">
		</span><span class="p">})</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">OK</span><span class="p">)</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">NotFound</span><span class="p">)</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">BadRequest</span><span class="p">,</span><span class="x"> </span><span class="n">ErrorMedia</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">

	</span><span class="n">Action</span><span class="p">(</span><span class="s">"create"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Routing</span><span class="p">(</span><span class="x">
			</span><span class="n">POST</span><span class="p">(</span><span class="s">""</span><span class="p">),</span><span class="x">
		</span><span class="p">)</span><span class="x">
		</span><span class="n">Description</span><span class="p">(</span><span class="s">"Create new account"</span><span class="p">)</span><span class="x">
		</span><span class="n">Payload</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Member</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span><span class="x">
			</span><span class="n">Required</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span><span class="x">
		</span><span class="p">})</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">Created</span><span class="p">,</span><span class="x"> </span><span class="s">"/accounts/[0-9]+"</span><span class="p">)</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">BadRequest</span><span class="p">,</span><span class="x"> </span><span class="n">ErrorMedia</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">

	</span><span class="n">Action</span><span class="p">(</span><span class="s">"update"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Routing</span><span class="p">(</span><span class="x">
			</span><span class="n">PUT</span><span class="p">(</span><span class="s">"/:accountID"</span><span class="p">),</span><span class="x">
		</span><span class="p">)</span><span class="x">
		</span><span class="n">Description</span><span class="p">(</span><span class="s">"Change account name"</span><span class="p">)</span><span class="x">
		</span><span class="n">Params</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Param</span><span class="p">(</span><span class="s">"accountID"</span><span class="p">,</span><span class="x"> </span><span class="n">Integer</span><span class="p">,</span><span class="x"> </span><span class="s">"Account ID"</span><span class="p">)</span><span class="x">
		</span><span class="p">})</span><span class="x">
		</span><span class="n">Payload</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Member</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span><span class="x">
			</span><span class="n">Required</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span><span class="x">
		</span><span class="p">})</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">NoContent</span><span class="p">)</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">NotFound</span><span class="p">)</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">BadRequest</span><span class="p">,</span><span class="x"> </span><span class="n">ErrorMedia</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">

	</span><span class="n">Action</span><span class="p">(</span><span class="s">"delete"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Routing</span><span class="p">(</span><span class="x">
			</span><span class="n">DELETE</span><span class="p">(</span><span class="s">"/:accountID"</span><span class="p">),</span><span class="x">
		</span><span class="p">)</span><span class="x">
		</span><span class="n">Params</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Param</span><span class="p">(</span><span class="s">"accountID"</span><span class="p">,</span><span class="x"> </span><span class="n">Integer</span><span class="p">,</span><span class="x"> </span><span class="s">"Account ID"</span><span class="p">)</span><span class="x">
		</span><span class="p">})</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">NoContent</span><span class="p">)</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">NotFound</span><span class="p">)</span><span class="x">
		</span><span class="n">Response</span><span class="p">(</span><span class="n">BadRequest</span><span class="p">,</span><span class="x"> </span><span class="n">ErrorMedia</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">
</span><span class="p">})</span></code></pre></figure>

<p>The <code class="highlighter-rouge">Resource</code> function defines a set of API endpoints. Each actual endpoint is described using the <code class="highlighter-rouge">Action</code> function: inside a resource function, it is possible to define any arbitrary number of actions. Apart from the root, API definition the goa API design language also makes it possible to describe the actual endpoints together with details on the shape of the requests and responses: below, the <em>MediaType</em> definition.</p>

<figure class="highlight"><pre><code class="language-golang" data-lang="golang"><span class="c">// Account is the account resource media type.</span><span class="x">
</span><span class="k">var</span><span class="x"> </span><span class="n">Account</span><span class="x"> </span><span class="o">=</span><span class="x"> </span><span class="n">MediaType</span><span class="p">(</span><span class="s">"application/vnd.account+json"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
	</span><span class="n">Description</span><span class="p">(</span><span class="s">"A tenant account"</span><span class="p">)</span><span class="x">
	</span><span class="n">Attributes</span><span class="p">(</span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"id"</span><span class="p">,</span><span class="x"> </span><span class="n">Integer</span><span class="p">,</span><span class="x"> </span><span class="s">"ID of account"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Example</span><span class="p">(</span><span class="m">1</span><span class="p">)</span><span class="x">
		</span><span class="p">})</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"href"</span><span class="p">,</span><span class="x"> </span><span class="n">String</span><span class="p">,</span><span class="x"> </span><span class="s">"API href of account"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Example</span><span class="p">(</span><span class="s">"/accounts/1"</span><span class="p">)</span><span class="x">
		</span><span class="p">})</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"name"</span><span class="p">,</span><span class="x"> </span><span class="n">String</span><span class="p">,</span><span class="x"> </span><span class="s">"Name of account"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Example</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span><span class="x">
		</span><span class="p">})</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"created_at"</span><span class="p">,</span><span class="x"> </span><span class="n">DateTime</span><span class="p">,</span><span class="x"> </span><span class="s">"Date of creation"</span><span class="p">)</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"created_by"</span><span class="p">,</span><span class="x"> </span><span class="n">String</span><span class="p">,</span><span class="x"> </span><span class="s">"Email of account owner"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
			</span><span class="n">Format</span><span class="p">(</span><span class="s">"email"</span><span class="p">)</span><span class="x">
			</span><span class="n">Example</span><span class="p">(</span><span class="s">"me@goa.design"</span><span class="p">)</span><span class="x">
		</span><span class="p">})</span><span class="x">

		</span><span class="n">Required</span><span class="p">(</span><span class="s">"id"</span><span class="p">,</span><span class="x"> </span><span class="s">"href"</span><span class="p">,</span><span class="x"> </span><span class="s">"name"</span><span class="p">,</span><span class="x"> </span><span class="s">"created_at"</span><span class="p">,</span><span class="x"> </span><span class="s">"created_by"</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">

	</span><span class="n">View</span><span class="p">(</span><span class="s">"default"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"id"</span><span class="p">)</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"href"</span><span class="p">)</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"created_at"</span><span class="p">)</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"created_by"</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">

	</span><span class="n">View</span><span class="p">(</span><span class="s">"tiny"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Description</span><span class="p">(</span><span class="s">"tiny is the view used to list accounts"</span><span class="p">)</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"id"</span><span class="p">)</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"href"</span><span class="p">)</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"name"</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">

	</span><span class="n">View</span><span class="p">(</span><span class="s">"link"</span><span class="p">,</span><span class="x"> </span><span class="k">func</span><span class="p">()</span><span class="x"> </span><span class="p">{</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"id"</span><span class="p">)</span><span class="x">
		</span><span class="n">Attribute</span><span class="p">(</span><span class="s">"href"</span><span class="p">)</span><span class="x">
	</span><span class="p">})</span><span class="x">
</span><span class="p">})</span></code></pre></figure>

<p>The goa design language <code class="highlighter-rouge">MediaType</code> function describes media types which represent the shape of response bodies. 
You can define a <code class="highlighter-rouge">MediaType</code> as a <code class="highlighter-rouge">Type</code> (I didn’t talk about that): there are similarities in features, for instance the definition of Collections of a particular MediaType (CollectionOf) and Type (ArrayOf), the function used to define <code class="highlighter-rouge">Attributes</code>. There are two properties unique to media types: first, the <code class="highlighter-rouge">views</code> describe different <em>serialization</em> of the same media type. You can create <em>short</em> representation of a resource in listing requests, a more detailed one in requests that return a single resource. Second, the <code class="highlighter-rouge">links</code> that represents related media types that should be rendered embedded in the response<sup id="fnref:views"><a href="#fn:views" class="footnote">1</a></sup>.</p>

<p>After the creation of the design<sup id="fnref:goa"><a href="#fn:goa" class="footnote">2</a></sup> file inside a <em>design</em> package, the only thing you have to do is <em>bootstrapping</em> your design (using the cli <code class="highlighter-rouge">goagen</code><sup id="fnref:goagen"><a href="#fn:goagen" class="footnote">3</a></sup>)</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">goagen bootstrap <span class="nt">-d</span> myprojects/myapi/design</code></pre></figure>

<p>and, if there’s no error, you will be able to start from the <em>hooks</em> already written for each action you defined over your resources. Cool: let’s talk about how to create the image!</p>

<h4 id="facing-the-build">Facing the build</h4>
<p>After (ok, even before) the creation of the API, you have to deal with Docker to <em>encapsulate</em> the binary. Actually, it is very common to have one Dockerfile to use for development (which contained everything needed to build your application), and a slimmed-down one to use for production, which only contained your application and exactly what was needed to run it. Golang is perfect to create handful microservice, because with a simple <a href="https://hub.docker.com/_/busybox/">busybox</a><sup id="fnref:busybox"><a href="#fn:busybox" class="footnote">4</a></sup> you can run the compiled binary and you’ve done. But…maintaining two Dockerfiles is not ideal. The question is: <em>how</em> and <em>where</em> do you build the binary from your API, mainting at the same time the image as much as possible <em>small</em>? I faced with this problem for my project, I don’t know how to call it - let me say - it’s <em>a build dilemma</em>. Multi-stage builds simplify this situation a lot.</p>

<h4 id="multistage-build">Multistage build</h4>
<p>Since version 17.05, Docker supports <a href="https://docs.docker.com/engine/userguide/eng-image/multistage-build/">multistage</a>: with multi-stage builds, you use multiple <code class="highlighter-rouge">FROM</code> statements in your Dockerfile. Each <code class="highlighter-rouge">FROM</code> instruction can use a different base, and each of them begins a new stage of the build. You can selectively copy artifacts from one stage to another, leaving behind everything you don’t want in the final image (cit.). Look at my Dockerfile to multistage-build my Golang API microservice:</p>

<figure class="highlight"><pre><code class="language-docker" data-lang="docker"><span class="c">### STAGE 1: Build ###</span>

<span class="c"># The builder node</span>
<span class="k">FROM</span><span class="s"> golang:latest as builder</span>

<span class="c"># create working directory</span>
<span class="k">WORKDIR</span><span class="s"> /go/src/github.com/made2591/myproject/api</span>

<span class="c"># copy the content </span>
<span class="k">COPY</span><span class="s"> . .</span>

<span class="c"># install dependencies</span>
<span class="k">RUN </span>go get ./...

<span class="c"># build binary</span>
<span class="k">RUN </span><span class="nv">CGO_ENABLED</span><span class="o">=</span>0 <span class="nv">GOOS</span><span class="o">=</span>linux go build <span class="nt">-a</span> <span class="nt">-installsuffix</span> cgo <span class="nt">-o</span> myproject .


<span class="c">### STAGE 2: Setup ###</span>

<span class="c"># The runner node</span>
<span class="k">FROM</span><span class="s"> alpine:latest as runner </span>

<span class="c"># setup env</span>
<span class="k">RUN </span>apk <span class="nt">--no-cache</span> add ca-certificates
<span class="k">WORKDIR</span><span class="s"> /root/</span>

<span class="c"># copy the binary from previous stage</span>
<span class="k">COPY</span><span class="s"> --from=builder /go/src/github.com/made2591/myproject/api .</span>

<span class="c"># execute</span>
<span class="k">CMD</span><span class="s"> ["./myproject"]</span></code></pre></figure>

<p>What happens? With the statement <code class="highlighter-rouge">as</code> in the first stage of the build we create a sort of <em>label</em>, then with the option <code class="highlighter-rouge">--from</code> of the <code class="highlighter-rouge">COPY</code> command, Docker copies just the built artifact from the previous stage into this new stage. The Go SDK and any intermediate artifacts are left behind, and not saved in the final image.</p>

<p><strong>NOTE</strong>: I don’t use to <em>bootstrap</em> my goa APIs inside the build stage, because first) if you play a little bit with goa you find out that bootstrap process is done one time only to help you create procject structure - they have to work on incremental design because the cli doesn’t support creation for new hooks if the core file are already modified - and second) you have to build your core file in any case. My advise is to create a dev env as much as possible confortable to work with goa. After that, use the dockerfile to create your multistage build!</p>

<h4 id="angular-4---another-scenario">Angular 4 - another scenario</h4>
<p>Needless to say, the entire Internet is full of <em>boilerplates</em> to start working with Angular * or any other <em>*.js</em> you like. I have been able to use angular cli, I honestly think that the project is really interesting but that it changes too frequently and it is often difficult to manage dependencies with npm. This is to say: in six years as a computer, I understand that you can build your frontend as you like, in any case in a very short time will not work anyway any more, and you can not do anything about that. In any case, why am I talking about Angular 4? To share with you my Dockerfile to multistage-build my Angular 4 frontend!</p>

<figure class="highlight"><pre><code class="language-docker" data-lang="docker"><span class="c">### STAGE 1: Build ###</span>

<span class="c"># We label our stage as 'builder'</span>
<span class="k">FROM</span><span class="s"> node:8-alpine as builder</span>

<span class="k">COPY</span><span class="s"> package.json package-lock.json ./</span>

<span class="k">RUN </span>npm <span class="nb">set </span><span class="nv">progress</span><span class="o">=</span><span class="nb">false</span> <span class="o">&amp;&amp;</span> npm config <span class="nb">set </span>depth 0 <span class="o">&amp;&amp;</span> npm cache clean <span class="nt">--force</span>

<span class="c">## Storing node modules on a separate layer will prevent unnecessary npm installs at each build</span>
<span class="k">RUN </span>npm i <span class="o">&amp;&amp;</span> mkdir /ng-app <span class="o">&amp;&amp;</span> cp <span class="nt">-R</span> ./node_modules ./ng-app

<span class="k">WORKDIR</span><span class="s"> /ng-app</span>

<span class="k">COPY</span><span class="s"> . .</span>

<span class="c">## Build the angular app in production mode and store the artifacts in dist folder</span>
<span class="k">RUN $(</span>npm bin<span class="k">)</span>/ng build <span class="nt">--prod</span> <span class="nt">--build-optimizer</span>


<span class="c">### STAGE 2: Setup ###</span>

<span class="k">FROM</span><span class="s"> nginx:1.13.3-alpine</span>

<span class="c">## Copy our default nginx config</span>
<span class="k">COPY</span><span class="s"> nginx/default.conf /etc/nginx/conf.d/</span>

<span class="c">## Remove default nginx website</span>
<span class="k">RUN </span>rm <span class="nt">-rf</span> /usr/share/nginx/html/<span class="k">*</span>

<span class="c">## From 'builder' stage copy over the artifacts in dist folder to default nginx public folder</span>
<span class="k">COPY</span><span class="s"> --from=builder /ng-app/dist /usr/share/nginx/html</span>

<span class="k">CMD</span><span class="s"> ["nginx", "-g", "daemon off;"]</span></code></pre></figure>

<p>This also provide you a way to serve the application you build with docker, without having to deal with the blackhole npm node_modules dependencies etc.</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:views">
      <p><code class="highlighter-rouge">Views</code> may then use the special <code class="highlighter-rouge">Links</code> function to render all the links: if you don’t define a link and the resource has a parent, then the compiler will arise an error during building.&nbsp;<a href="#fnref:views" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:goa">
      <p>you can of course split info across multiple file belonging the same <em>design</em> package.&nbsp;<a href="#fnref:goa" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:goagen">
      <p>the goagen is a tool the generate various artifacts from a goa design package - more info <a href="https://goa.design/implement/goagen/">here</a>&nbsp;<a href="#fnref:goagen" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:busybox">
      <p>if you want the SSL/TLS support, prefer the <a href="https://hub.docker.com/r/odise/busybox-curl/">busybox-curl</a> image, even maybe it is good for a dev env, but I would prefer an alpine for production.&nbsp;<a href="#fnref:busybox" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/goa-docker-multistage</wp:post_id>
        <wp:post_date>2017-12-18T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2017-12-18T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="golang"><![CDATA["golang",]]></category>
        
          <category domain="post_tag" nicename="docker"><![CDATA["docker",]]></category>
        
          <category domain="post_tag" nicename="goa"><![CDATA["goa",]]></category>
        
          <category domain="post_tag" nicename="api"><![CDATA["api",]]></category>
        
          <category domain="post_tag" nicename="rest"><![CDATA["rest"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[Java 8 Pills]]></title>
        <link>made2591.github.io/posts/java-8-pills</link>
        <pubDate>2017-12-15T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="why-java-why-now">Why Java why now</h3>
<p>I recently followed a course<sup id="fnref:first"><a href="#fn:first" class="footnote">1</a></sup> on YouTube by Adib Saikali (NewCircle Instructor) about the key features introduced in Java &gt; 8: it’s an old post regarding old stuff but…I collected some notes (mainly because I need to write down what I’m listening to to stay focused and learn new concepts) that I decided to share with you. This is to say, this post is for every one that had put aside Java for a while and is now looking for a quick overview of the key aspects - exactly like me some weeks ago - to improve his abilities in coding, taking advantage of the old (n.d.r.) features introduced a few years ago. For thus who missed the footnote before and want to jump directly to the lesson, <a href="https://www.youtube.com/watch?v=8pDm_kH4YKY">here</a> you can find the main source of the content of the next paragraphs.</p>

<h3 id="content">Content</h3>
<p>Briefly, the basic steps of the Saikali course are:</p>
<ul>
  <li>Lambda expressions;</li>
  <li>Functional interfaces;</li>
  <li>Method references;</li>
  <li>Default methods;</li>
  <li>Collections Enhancements;</li>
  <li>Streams;</li>
</ul>

<p>I think that the arguments are really exposed in the perfect order, despite their relations and dependencies: for this reason, I will maintain this order and collect some snippets + doubts + questions arised during the course, except for the first two arguments.</p>

<h4 id="lambda-expression">Lambda expression</h4>
<p>First of all, a <code class="highlighter-rouge">lambda</code> is not a method (or function) but an <code class="highlighter-rouge">expression</code>: this is to say, the lambda notation is a way to say to the compiler “take this code and create a method for me”. The concept of <em>lambda</em> is different from its <em>implementation</em>: the lambda expressions exist in many different languages and are implemented in many different ways. However, lambdas have the following characteristics:</p>
<ul>
  <li>a lambda expression <em>define</em> an anonymous functions,</li>
  <li>can be assigned to variables,</li>
  <li>can be passed to functions,</li>
  <li>or returned from functions;</li>
</ul>

<p>These features and <em>how the compiler process the expressions</em> make lambda expressions excellent to:</p>
<ul>
  <li>form the basis of the functional programming paradigm,</li>
  <li>make parallel programming easier,</li>
  <li>write more compact code,</li>
  <li>create richer data structure collections,</li>
  <li>and develop cleaner APIs;</li>
</ul>

<p>The lambda expression is a <em>concept</em>, that has its own implementation flavor in different languages. But how lambdas are implemented in Java? Look at the code below:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>

<span class="n">integers</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span>
    <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">)</span>
<span class="o">);</span>

<span class="n">integers</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span><span class="o">;</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>
<span class="o">});</span></code></pre></figure>

<p><code class="highlighter-rouge">forEach</code> is a method that accepts a <em>function</em> as its input and calls the function for each value in the list. <code class="highlighter-rouge">x -&gt; System.out.println(x)</code> is a lambda expression that defines an <em>anonymous function</em> with one parameter named <code class="highlighter-rouge">x</code> of type <code class="highlighter-rouge">Integer</code>. In the second lambda expression are defined multiple lines: moreover, you can create local variable inside the body of the lambda. You can specify (or not) the type for <code class="highlighter-rouge">x</code> parameter, because the Java compiler can do type inference. How does it work from a compiler point of view?</p>

<h5 id="lambda-lifecycle">Lambda Lifecycle</h5>
<p>More or less, the compiler <em>transform</em> the lambda expression in a <em>static function</em> and then call the generated function. The function should be static method, with a class wrapping around, and so on…it doesn’t matter for now. Instead, we are interest in the <em>type</em> of the lambda expressions: remember, they could be assigned to vars, passed to functions, or returned. This implies that lambda has a type. Initially Java engineers thought about a specific new <em>function</em> type, but in the end they didn’t create it. In the next paragraphs I try to cover the question “what is the type of a lambda function?” To do that, we need first to talk about <em>functional interfaces</em>.</p>

<h4 id="functional-interface">Functional interface</h4>
<p>A first simple <strong>incomplete</strong> definition for the functional interface is the following:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A functional interface is an interface with only one method.
</code></pre></div></div>

<p>I know what you are thinking: what kind of <em>feature</em> is that?! Of course, you can create how many interfaces you want with one method: rather this kind of interface is the most common and used in Java. For instance, the <code class="highlighter-rouge">Runnable</code>, <code class="highlighter-rouge">Comparable</code> and <code class="highlighter-rouge">Callable</code> interface are functional interfaces. They are so popular in lot of libraries, such as in <a href="https://spring.io">Spring</a>’s libraries: they contains <code class="highlighter-rouge">TransactionCallback</code>, <code class="highlighter-rouge">RowMapper</code>, <code class="highlighter-rouge">StatementCallback</code> and others. Then, they officially decided to call this kind of interface - <em>functional interface</em> - to formalize them inside the language. They also introduced a new optional annotation <code class="highlighter-rouge">@FunctionalInterface</code> to make the compiler able to produce an error if more than one method is added to a functional interface.</p>

<p>To conclude, each interface with one method is considered a functional interface by Java 8, even if it was compiled with a Java 1.0 compiler: the new lambda expressions will work with old libraries, without need to recompile. Ok wait a moment: what do lambda expressions have to do with functional interfaces?</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>

<span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">consumer</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>

<span class="n">integers</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">consumer</span><span class="o">);</span></code></pre></figure>

<p>In the example above I <em>declared</em> the <em>type</em> of the lambda expression <code class="highlighter-rouge">x -&gt; System.out.print(x);</code> as <code class="highlighter-rouge">Consumer&lt;Integer&gt;</code>: for how Java works, this is a <code class="highlighter-rouge">Class</code> or an <code class="highlighter-rouge">Interface</code> because they are the unique two entities that define a type in Java grammar. In fact, <code class="highlighter-rouge">Consumer&lt;Integer&gt;</code> is a functional interface from the package <code class="highlighter-rouge">java.util.function package</code>. Why Consumer<Integer>? The answer is simple, because ```Consumer<T>``` define the type of a function that takes an argument of type T and returns void - as ```System.out.print(x)``` call used in the one-line body of the lambda expression assigned to the variable ```consumer```.</T></Integer></p>

<h4 id="back-to-lambda-expressions">Back to lambda expressions</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The type of the lambda expression is the same as the type of the functional interface that the lambda expression is assigned to. 
</code></pre></div></div>

<p>At this point you could think about lambda expressions as anonymous inner class with one method: they are <strong>not</strong> (wait for it…).</p>

<h4 id="variable-capture">Variable capture</h4>
<p>Look at the code below:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>

<span class="kt">int</span> <span class="n">localVar</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>

<span class="n">integers</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span>
    <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">localVar</span><span class="o">)</span>
<span class="o">);</span></code></pre></figure>

<p>A lambda expression can interact with variables defined outside the body of the lambda: using variables outside is called <em>variable capture</em>. But… the value of the variable declared outside <strong>must</strong> be <code class="highlighter-rouge">final</code>. What does it mean? If you copy the code above it will work: why? Because the compiler will handle the lack of the statement final, and consider <code class="highlighter-rouge">localVar</code> as final (and also static). The signature generated from the example will be something like this:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">generatedName</span><span class="o">(</span><span class="n">Integer</span> <span class="n">x</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">var</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">var</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<h4 id="private-field">Private field</h4>
<p>Look at the code below:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">integers</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span>
    <span class="n">x</span> <span class="o">-&gt;</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">var</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">main</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Compiler has passed this of enclosing method as the first parameter of method generated from the lambda expression"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">);</span>

<span class="n">integers</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span>
    <span class="k">new</span> <span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;()</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">state</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="n">Integer</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">+</span> <span class="n">Main</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">var</span> <span class="o">+</span> <span class="n">x</span><span class="o">;</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Anonymous class that implements Consumer Interface and accept overriding: "</span> <span class="o">+</span> <span class="n">y</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">);</span></code></pre></figure>

<p>The two example show a difference: in the first there is no private field. This is because there is no ability for you to define private fields inside a lambda expression: they are just the body of the signature defined in a functional interface the lambda expression will be assigned to. Remember also that a lambda expression has always a type: this because it can only be assigned to a variable, or passed as a parameter or returned by a method and, in each of these cases, you need a type. What about the <code class="highlighter-rouge">this</code> statement? Try the code to see what happens (in any it is explained in the next paragraph).</p>

<h4 id="lambda-functional-typed-vs-anonymous-inner-class">Lambda (<em>functional typed</em>) vs Anonymous Inner Class</h4>

<p>Let summarize the main differences between a lambda expression and an anonymous inner class:</p>
<ul>
  <li>inner classes can have state in the form of class level instance variables lambdas can not,</li>
  <li>inner classes can have multiple methods, while lambdas only have a single method body,</li>
  <li><code class="highlighter-rouge">this</code> points to the object instance for an anonymous Inner class BUT points to the enclosing object for a lambda;</li>
</ul>

<p>This is why lambda expressions are basically <strong>different</strong> from anonymous inner class.</p>

<h4 id="available-functional-interfaces">Available functional interfaces</h4>
<p>Is it really necessary to create a functional interface for each lambda expression that we want to use in our code? The answer is no, because <code class="highlighter-rouge">java.util.function.*</code> package contains 43 (wow!) commonly used functional interfaces:</p>

<ul>
  <li><code class="highlighter-rouge">Consumer&lt;T&gt;</code> define a function that takes an argument of type T and returns void;</li>
  <li><code class="highlighter-rouge">Supplier&lt;T&gt;</code> define a function that takes no argument and returns a result of Type T;</li>
  <li><code class="highlighter-rouge">Predicate&lt;T&gt;</code> define a function that takes an argument of Type T and returns a boolean;</li>
  <li><code class="highlighter-rouge">Function&lt;T, R&gt;</code> define a function that takes an argument of Type T and returns a result of type R;</li>
  <li>etc…</li>
</ul>

<p>###### Break point
Until now we saw <em>how</em> the functional interface provide a way to expose the lambda expression to outside world and use them in our code. Let’s move one step forward, introducing method references.</p>

<h3 id="method-references">Method references</h3>
<p>Basically a lambda is a way to define an anonymous function. The question now is: what about functions I already written? Do I have to rewrite them? Look at the following code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">myAlreadyWrittenFunction</span><span class="o">(</span><span class="n">Integer</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="o">}</span>

<span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">consumerLambda</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
<span class="n">consumerLambda</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>

<span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">consumerOldFunction</span> <span class="o">=</span> <span class="nl">Main:</span><span class="o">:</span><span class="n">myAlreadyWrittenFunction</span><span class="o">;</span>
<span class="n">consumerOldFunction</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span></code></pre></figure>

<p>There’s a new notation with double colons that is the syntax used to reference a method. So, the short answer to the previous question is no, because method references can be used to pass an existing function in a place where a lambda is expected.</p>

<h4 id="reference-a-static-method">Reference a static method</h4>
<p>In the <code class="highlighter-rouge">consumerOldFunction</code> we are saying to the compiler “use the <code class="highlighter-rouge">myAlreadyWrittenFunction</code> as the implementation of the <code class="highlighter-rouge">accept</code> method (signature) defined in the functional interface <code class="highlighter-rouge">Consumer&lt;Integer&gt;</code>. Obviously, the signature of the referenced method <strong>needs</strong> to match the signature of functional interface method (and yes, it will handle also overloading and generics). In this first scenario we referenced a static method, but there are four different types of method references:</p>
<ul>
  <li>static method reference,</li>
  <li>constructor reference,</li>
  <li>specific object instance reference,</li>
  <li>and specific arbitrary object of a particular type reference;</li>
</ul>

<h4 id="reference-a-constructor">Reference a constructor</h4>
<p>Look at the following code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">firstMapper</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">firstMapper</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">"11"</span><span class="o">));</span>

<span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">secondMapper</span> <span class="o">=</span> <span class="nl">Integer:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">secondMapper</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">"12"</span><span class="o">));</span></code></pre></figure>

<p>You can use method reference to reference a constructor: this is handy when working with <em>streams</em> (the last topics of this article). With the notation <code class="highlighter-rouge">Function&lt;String, Integer&gt; secondMapper = Integer::new;</code> we are asking the compiler to create for us a function that takes as angurment a string, returns an integer and in the body of that method invoque the new constructor of the Integer, passing the string parameter provided to that method. Cool right?!</p>

<p><strong>NOTE</strong>: we use the <code class="highlighter-rouge">Function&lt;T, R&gt;</code> functional interface provided by the <code class="highlighter-rouge">java.util.function.*</code>: it defines a function that takes an argument of Type T and returns a result of type R, as our Integer constructor;</p>

<h4 id="reference-to-a-specific-object-instance-method">Reference to a specific object instance method</h4>
<p>Look at the following code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">firstConsumer</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
<span class="n">firstConsumer</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="mi">13</span><span class="o">);</span>

<span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">secondConsumer</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">;</span>
<span class="n">secondConsumer</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="mi">14</span><span class="o">);</span></code></pre></figure>

<p>With the notation <code class="highlighter-rouge">Consumer&lt;Integer&gt; secondConsumer = System.out::println;</code> we tell the compiler that the lambda body signature should match the method println and that the lambda expression should result in a call to <code class="highlighter-rouge">System.out.println(x)</code>.</p>

<h4 id="reference-to-a-specific-arbitrary-object-of-a-particular-type">Reference to a specific arbitrary object of a particular type</h4>
<p>Finally, look at the following code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">firstMapper</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">firstMapper</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">"abc"</span><span class="o">));</span>

<span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">secondMapper</span> <span class="o">=</span> <span class="nl">String:</span><span class="o">:</span><span class="n">toUpperCase</span><span class="o">;</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">secondMapper</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">"def"</span><span class="o">));</span></code></pre></figure>

<p>With the notation <code class="highlighter-rouge">Function&lt;String, String&gt; secondMapper = String::toUpperCase;</code> we tell the compiler to invoke the <code class="highlighter-rouge">toUpperCase</code> method on the parameter that is passed to the lambda expression. So invoking <code class="highlighter-rouge">secondMapper.apply("def")</code>
will call the lambda expression derived method and inside that will call the <code class="highlighter-rouge">toUpperCase</code> method on the parameter “def”</p>

<p>The all idea of the method reference feature is that if you already have a method ready, you can create a lambda using method reference, and then use lambda wherever you want in your code. At this point, we are ready to talk about <em>default methods</em> and, finally, <strong>provide a complete definition of the functional interface</strong>.</p>

<h3 id="default-methods">Default methods</h3>
<p>Until now I wrote a little bit about lambda expressions and arrow notation -&gt; and method references. A natural place to use lambda expressions is with the Java collections framework. The collection framework is defined with interfaces such as <code class="highlighter-rouge">Iterable</code>, <code class="highlighter-rouge">Collection</code>, <code class="highlighter-rouge">Map</code>, <code class="highlighter-rouge">List</code>, <code class="highlighter-rouge">Set</code>, etc. Think about that: adding a new method such <code class="highlighter-rouge">forEach</code> we used in the previous examples to, let me say, the <code class="highlighter-rouge">Iterable</code> interface, will mean that <strong>all</strong> existing implementations of <code class="highlighter-rouge">Iterable</code> will break. Why? Because they <strong>don’t</strong> implement the <code class="highlighter-rouge">forEach</code> method introduced in the interface: so what? All codes already compiled will not work with the new version of Java. Unacceptable. This problem is known as the <strong>the interface evolution problem</strong>: how can published interfaces be evolved without breaking existing implementations? Default methods provide a solution to this <strong>big</strong> problem:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A default method defined in a Java Interface&lt;T&gt; has an implementation (provided in the interface) and is inherited by all classes that implement the Interface&lt;T&gt;.
</code></pre></div></div>

<p>Look at the example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="kd">implements</span> <span class="n">Matteo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">new</span> <span class="nf">Main</span><span class="o">().</span><span class="na">printMatteo</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">Matteo</span> <span class="o">{</span>
    <span class="k">default</span> <span class="kt">void</span> <span class="nf">printMatteo</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Matteo\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Question: can you override a default method? Yes, of course, simply overriding the method. Furthermore, if you a default method <code class="highlighter-rouge">myMethod()</code> defined in an interface <code class="highlighter-rouge">A</code>, an interface <code class="highlighter-rouge">B</code> that extend <code class="highlighter-rouge">A</code> and override the implementation of <code class="highlighter-rouge">myMethod()</code> provided by <code class="highlighter-rouge">A</code>, if you have a class <code class="highlighter-rouge">MyClass</code> that implement interface <code class="highlighter-rouge">B</code>, without any implementation of <code class="highlighter-rouge">myMethod()</code>, the implementation provided in interface <code class="highlighter-rouge">B</code> will be used, or</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The closest implementation in hierarchy will be used.
</code></pre></div></div>

<h4 id="creating-a-conflict">Creating a conflict</h4>
<p>Let be <code class="highlighter-rouge">A</code> and <code class="highlighter-rouge">B</code> two different interfaces that provide two default methods with the same signature. Let be <code class="highlighter-rouge">MyClass</code> a class that implements both <code class="highlighter-rouge">A</code> and <code class="highlighter-rouge">B</code>: if you create this situation the compiler arises an error that sounds like <em>duplicate default methods implementations</em>. How to solve this conflict? Of course, with overriding. Further, you can call the implementation in the interface, with notation <code class="highlighter-rouge">A.super.myMethod()</code>. Instead, same level implementation implies a compiler error, and the override is mandatory.
<strong>NOTE</strong>: a default method should not be final…because it doesn’t make so much sense.</p>

<p>What about our functional interface?! Do you remember the old <strong>incomplete</strong> definition?</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A functional interface is an interface with only one method.
</code></pre></div></div>

<p>The complete definition is</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A functional interface is an interface with only one __non-default__ method.
</code></pre></div></div>

<p>Let’s move one step forward, introducing collections enhancements.</p>

<h3 id="collections-enhancements">Collections Enhancements</h3>
<p>Java 8 uses lambda expressions and default methods to improve the exising Java collections frameworks and add a lot of functions to them. We already seen example of these methods, such as the <code class="highlighter-rouge">forEach</code> - an example of internal iteration: it delegates the looping to a library function (such as forEach, as we said), and the loop body processing to a lambda expression. Further, this method is really important because it allows the library function we are delegating to implement the logic needed to execute the iteration on muliple cores, if desired. Some of the new methods provided by the standard library are:</p>

<ul>
  <li>New java.lang.Iterable methods:
    <ul>
      <li>default void forEach(Consumer&lt;? super T&gt; action);</li>
      <li>default Spliterator<T> spliterator();</T></li>
    </ul>
  </li>
  <li>New java.util.Collection methods:
    <ul>
      <li>default boolean removeIf(Predicate&lt;? super E&gt; filter);</li>
      <li>default Spliterator<E> spliterator();</E></li>
      <li>default Stream<E> stream();</E></li>
      <li>default Stream<E> parallelStream();</E></li>
    </ul>
  </li>
  <li>New java.util.Map methods:
    <ul>
      <li>default V getOrDefault(Object key, V defaultValue);</li>
      <li>putIfAbsent(K key, V value);</li>
      <li>etc;</li>
    </ul>
  </li>
</ul>

<p>The streams related methods mentioned above are:</p>
<ul>
  <li>default Spliterator<T> spliterator();</T></li>
  <li>default Stream<E> stream();</E></li>
  <li>default Stream<E> parallelStream();</E></li>
</ul>

<p>But…what is a <em>stream</em> exactly?</p>

<h3 id="stream">Stream</h3>

<p>Streams are a functional programming desing pattern for processing sequences of elements - sequentially or in parallel. When examining java programs we always run into code along the following lines:</p>
<ul>
  <li>run a database query to get a list of objects,</li>
  <li>iterate over the list to compute a single result,</li>
  <li>iterate over the list to generate a new data structure such as another list, map, set, etc,</li>
  <li>or iterate over the list and …;</li>
</ul>

<p>Boring. Well, streams are the implementation of a concept (a design pattern) in the same way lambdas are: they can be implemented in many programming languages. In the next paragraphs I talk about - more or less - about <em>how</em> they work in Java (without talking in details about how they are <em>implemented</em>).</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">int</span> <span class="n">sumOdd</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                     <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">o</span> <span class="o">-&gt;</span> <span class="n">o</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
                     <span class="o">.</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">o</span> <span class="o">-&gt;</span> <span class="n">o</span><span class="o">)</span>
                     <span class="o">.</span><span class="na">sum</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sumOdd</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span></code></pre></figure>

<p>In the example the program creates a stream instance from a <strong>source</strong> (a Java collection), add a filter operation to the stream intermediate operations pipeline, add a map operation to the stream intermediate operations pipeline and add a terminal operation (sum) that kicks off the stream processing: what the hell is going on?! Let’s first talk about a stream composition.</p>

<h4 id="the-stream-composition">The stream composition</h4>
<p>A <strong>stream</strong> has three elements:</p>
<ul>
  <li>a <strong>source</strong> that the stream can pull objects from,</li>
  <li>a <strong>pipeline</strong> of operations that will execute on the elements of the stream,</li>
  <li>a <strong>terminal</strong> operation that pulls values down the stream;</li>
</ul>

<h4 id="the-stream-lifecycle">The stream lifecycle</h4>
<p>A <strong>stream lifecycle</strong> has the following steps:</p>
<ul>
  <li>a <strong>creation</strong> step, ih which a stream get created from a source object such as a collection, file, or generator,</li>
  <li>a <strong>configuration</strong> step, in which a stream get configured with a collection of pipeline operations,</li>
  <li>a <strong>execution</strong> step, done when stream terminal operation is invoked which starts pulling objects trough the operations pipeline of the stream,</li>
  <li>and a <strong>cleanup</strong> step, in which stream can only be used once;</li>
</ul>

<p>It is important to remember that stream execution is <strong>lazy</strong>, that means that until you call a terminal operation the stream doesn’t do anythings. It doesn’t loop.</p>

<h4 id="stream-sources">Stream Sources</h4>
<p>There are different type of streams: in the next paragraphs I show same simple examples of different streams.</p>

<h5 id="number-stream-source">Number Stream Source</h5>
<p>Look at the code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Long Stream Source\n"</span><span class="o">);</span>

<span class="n">LongStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span></code></pre></figure>

<p>The example shows a range stream from 0 to 5, starting from a <code class="highlighter-rouge">LongSource</code> from <code class="highlighter-rouge">java.util.stream.*</code> package in standard library. Remember that a stream can be anything: a stream is a design pattern. What it does? It splits out elements from a collection.</p>

<h5 id="string-stream-source">String Stream Source</h5>
<p>Look at the code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">cities</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"toronto"</span><span class="o">,</span> <span class="s">"ottawa"</span><span class="o">,</span> <span class="s">"montreal"</span><span class="o">,</span> <span class="s">"vancouver"</span><span class="o">);</span>

<span class="n">cities</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span></code></pre></figure>

<p>The example shows a stream from a list of String.</p>

<h5 id="collection-stream-source">Collection Stream Source</h5>
<p>Look at the code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">long</span> <span class="n">length</span> <span class="o">=</span> <span class="s">"ABC"</span><span class="o">.</span><span class="na">chars</span><span class="o">().</span><span class="na">count</span><span class="o">();</span>

<span class="n">Consumer</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">printer</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">;</span>

<span class="n">printer</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">length</span><span class="o">);</span></code></pre></figure>

<p>A character stream source is called using chars() and then count().</p>

<h5 id="file-system-streams">File System Streams</h5>
<p>Look at the code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">workDir</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"user.dir"</span><span class="o">);</span>
<span class="n">Path</span> <span class="n">workDirPath</span> <span class="o">=</span> <span class="n">FileSystems</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">getPath</span><span class="o">(</span><span class="n">workDir</span><span class="o">);</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Directory Listing Stream"</span><span class="o">);</span>
<span class="n">Files</span><span class="o">.</span><span class="na">list</span><span class="o">(</span><span class="n">workDirPath</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Depth First Directory Walking Stream"</span><span class="o">);</span>
<span class="n">Files</span><span class="o">.</span><span class="na">walk</span><span class="o">(</span><span class="n">workDirPath</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span></code></pre></figure>

<p>The line <code class="highlighter-rouge">Files.list(Path object from Java 7)</code> gives a stream to work directly on list. The line <code class="highlighter-rouge">Files.walk(Path object from Java 7)</code> gives a stream to work directly on list with depth first search.</p>

<h4 id="a-first-summary-example">A first summary example</h4>
<p>Before going on, try to understand what the code below does:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">String</span> <span class="n">workDir</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"user.dir"</span><span class="o">);</span>
<span class="n">Path</span> <span class="n">workDirPath</span> <span class="o">=</span> <span class="n">FileSystems</span><span class="o">.</span><span class="na">getDefault</span><span class="o">().</span><span class="na">getPath</span><span class="o">(</span><span class="n">workDir</span><span class="o">);</span>

<span class="n">String</span> <span class="n">className</span> <span class="o">=</span> <span class="n">Main</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">replace</span><span class="o">(</span><span class="s">"."</span><span class="o">,</span> <span class="s">"/"</span><span class="o">)</span> <span class="o">+</span> <span class="s">".java"</span><span class="o">;</span>

<span class="n">Files</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">workDirPath</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> 
    <span class="o">(</span><span class="n">fileName</span><span class="o">,</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">fileName</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="n">className</span><span class="o">)).</span><span class="na">forEach</span><span class="o">(</span><span class="n">path</span> <span class="o">-&gt;</span> <span class="o">{</span>
      <span class="k">try</span> <span class="o">{</span>
          <span class="n">Files</span><span class="o">.</span><span class="na">lines</span><span class="o">(</span><span class="n">path</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
    <span class="o">}</span>
<span class="o">);</span></code></pre></figure>

<p>Did you understand what the code does? The example simply print out it self. Briefly, the call to <code class="highlighter-rouge">find</code> method returns a stream, so it is possible to call <code class="highlighter-rouge">forEach</code> method on it: we know that the <code class="highlighter-rouge">forEach</code> terminal does something to each things that it founds. The things it founds are pointed by <code class="highlighter-rouge">path</code> variable, passed as parameter to the lambda expression in the brackets. Inside this, we use another stream of Files called <code class="highlighter-rouge">lines</code> that out each lines of the file as a stream: once again, the call to <code class="highlighter-rouge">forEach</code> print out each of the elements splitted out by the lines stream.</p>

<h4 id="how-about-stream-terminals">How about stream terminals?</h4>
<p>We said that until the terminal operation is invoked, the stream doesn’t do anything. You might be thinking “what kind of terminal could I use to <em>execute</em> my stream pipeline?”. There are many types of terminals for stream:</p>

<ul>
  <li><strong>reduction</strong> terminal operations that return a single result (such as sum()),</li>
  <li><strong>mutable reduction</strong> terminal operations that return multiple results in a container data structure,</li>
  <li><strong>search</strong> terminal operations that return a result as soon as a match is found,</li>
  <li><strong>generic</strong> terminal operations that do any kind of processing you want on each stream element;</li>
</ul>

<p>But <strong>remember</strong>: nothing happens until the terminal operation is invoked (think about updating, and so on).</p>

<h5 id="reduction-terminal-operations">Reduction terminal operations</h5>
<p>Look at the following:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">count</span><span class="o">());</span>

<span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span><span class="o">;</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">min</span><span class="o">((</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">-</span> <span class="n">y</span><span class="o">);</span>

<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>

<span class="n">result</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">max</span><span class="o">(</span><span class="n">Comparator</span><span class="o">.</span><span class="na">comparingInt</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">));</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>

<span class="n">Integer</span> <span class="n">res</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">reduce</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span></code></pre></figure>

<p>Can you explain the min? Actually, I didn’t understand the <code class="highlighter-rouge">min</code>: you can write a comment below if you want XD.</p>

<h5 id="mutable-reduction-operations">Mutable reduction operations</h5>
<p>Look at the following:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>

<span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toSet</span><span class="o">());</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>

<span class="n">Integer</span><span class="o">[]</span> <span class="n">a</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="n">Integer</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
<span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">a</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="n">Integer</span> <span class="n">res</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">reduce</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span></code></pre></figure>

<p><code class="highlighter-rouge">Collectors</code> are used to get all the things that came out of a stream and collect them into a structure: the <code class="highlighter-rouge">Collectors</code> class defines many useful collectors such as <code class="highlighter-rouge">List</code>, <code class="highlighter-rouge">Set</code>, <code class="highlighter-rouge">Map</code>, groupingBy, partitioningBy, etc.</p>

<h5 id="search-terminal-operation">Search terminal operation</h5>
<p>Look at the following:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>

<span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">findFirst</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>

<span class="n">Boolean</span> <span class="n">res</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">anyMatch</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">5</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>

<span class="n">res</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">anyMatch</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>

<span class="n">Optional</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">anyres</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">findAny</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">anyres</span><span class="o">.</span><span class="na">get</span><span class="o">());</span></code></pre></figure>

<p>Note the <code class="highlighter-rouge">findAny</code>: result of findAny call is unpredictable. In a sense, if stream is executed, for instance, parallel, then the first call that ends will return the result so you don’t know exactly a priori which will be the returned value. It just means “find any”.</p>

<h5 id="generic-terminal-operation">Generic terminal operation</h5>
<p><code class="highlighter-rouge">forEach</code> is an example of generic terminal operation.</p>

<h4 id="streams-pipeline-rules">Streams pipeline rules</h4>
<p>What about streams pipeline call?</p>
<ul>
  <li>streams can process elements sequentially;</li>
  <li>streams can process elements in parallel;</li>
</ul>

<p>Thus means that streams operations are not allowed to modify the stream source otherwise bad things happens XD. It is simple: a stream operate over a source. Don’t modify the source! sounds like a best practise.</p>

<h4 id="intermediate-stream-operations">Intermediate stream operations</h4>
<p>There are two classes of intermediate stream operations:</p>

<ul>
  <li>
    <p><strong>Stateless intermediate operations</strong>: they do not need to know the history of results from the previous steps in the pipeline or keep track of how many results it have produced or seen. Example of stateless intermediate operations are <code class="highlighter-rouge">filter</code>, <code class="highlighter-rouge">map</code>, <code class="highlighter-rouge">flatMap</code>, <code class="highlighter-rouge">peek</code>.</p>
  </li>
  <li>
    <p><strong>Stateful intermediate operations</strong>: they need to know the history of results from the previous steps in the pipeline or need to keep track of how many results it have produced or seen. Example of stateless intermediate operations are <code class="highlighter-rouge">distinct</code>, <code class="highlighter-rouge">limit</code>, <code class="highlighter-rouge">skip</code>, <code class="highlighter-rouge">sorted</code>.</p>
  </li>
</ul>

<p>For instance, if you want a stream to sort elements you obviously needs to know the order of sorting. Instead, if you have a parallel operations with threads that compete with each others, you are not interested in state of each elements. Let’s have a look at sample example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="n">integers</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
<span class="n">integers</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="n">IntSummaryStatistics</span> <span class="n">intSummaryStatistics</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">).</span><span class="na">summaryStatistics</span><span class="o">();</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">intSummaryStatistics</span><span class="o">);</span></code></pre></figure>

<p>A repo with all the examples in the article is <a href="https://github.com/made2591/java-8-steps">here</a> and the main source is <a href="https://www.youtube.com/watch?v=8pDm_kH4YKY">here</a>.</p>

<p>Thank you everybody for reading!</p>

<div class="footnotes">
  <ol>
    <li id="fn:first">
      <p>The course is entitled <em>Java 8 Lambda Expressions &amp; Streams</em> and is available for free <a href="https://www.youtube.com/watch?v=8pDm_kH4YKY">here</a>. Thank you again Adib Saikali for your lesson!&nbsp;<a href="#fnref:first" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/java-8-pills</wp:post_id>
        <wp:post_date>2017-12-15T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2017-12-15T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="features"><![CDATA["features",]]></category>
        
          <category domain="post_tag" nicename="java"><![CDATA["java",]]></category>
        
          <category domain="post_tag" nicename="8"><![CDATA[8,]]></category>
        
          <category domain="post_tag" nicename="functional-interface"><![CDATA["functional-interface",]]></category>
        
          <category domain="post_tag" nicename="lambda-expressions"><![CDATA["lambda-expressions",]]></category>
        
          <category domain="post_tag" nicename="method-references"><![CDATA["method-references",]]></category>
        
          <category domain="post_tag" nicename="default-method"><![CDATA["default-method"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
      <item>
        <title><![CDATA[How to plan your daily activity with Python]]></title>
        <link>made2591.github.io/posts/python-lifeplan</link>
        <pubDate>2017-12-14T00:00:00+00:00</pubDate>
        <dc:creator></dc:creator>
        <guid/>
        <description></description>
        <content:encoded><![CDATA[<h3 id="the-problems-of-life">The problems of life</h3>
<p>Each of us has dreams, aspirations, hobbies, interests, but also hundreds of deadlines, a thousand commitments, ten thousand thoughts, a hundred thousand different problems to cope with every day. I am a computer scientist and personally all these things in my life translate into a huge pile of [things/books/articles/guide/blogs] to read, which by the way are very often interrelated. The situation is more or less this:</p>

<p><img src="https://af-production.s3.amazonaws.com/photos/images/76458/original/books.jpg" alt="books" /></p>

<p>The problem is that often in the presence of many things to do we lose more time deciding how to do them and when to decide to start them. I formalized a simple method to handle all my stuff.</p>

<h3 id="how-to-do-everything">How to do everything</h3>
<p>The short answer is: you can not. The innocent answer is: you can, you just have a good plan that takes into account every moment of time you can cut out in your day already full of commitments. The sincere answer is: yes, but it involves an incredible amount of time to <em>schedule</em> everything. In times of orchestrators and dev (or no? n.d.r.) ops, I have finally decided to brush up on a logic that I realized during the years of university studies to prepare the exams: of course, since I’m a developer, I have implemented a version - preferring for this time Python instead of Go (with regret, I swear) because I had already some snippets ready.</p>

<h3 id="what-do-you-need">What do you need?</h3>
<p>Patience and a couple of hours to implement your solution. Then:</p>

<ul>
  <li>Python (you do not even need a virtualenv, if not for two additional boundary libraries - not necessary for the strict logic of implementation of the program);</li>
  <li>A list of <em>TODOs</em> (for instance, ‘Read Computer Networks’, ‘Workout’, ‘Write a new article’, etc);</li>
  <li>A unit of measure for each of the activities on the list that is <em>small enough</em> (what I mean? for example, for reading material it could be pages to read, for a generic activity a number that represent a percentage to complete the task);</li>
</ul>

<h3 id="a-real-case">A real case</h3>
<p>I recently bought a TCP/IP book to study and learn a little bit more about computer networks. The problem is that I bought 3 more books together with this one (damn it, Amazon!). I would like to end my reading in a reasonable number of days. However, I have other commitments that take away precious time: unfortunately, I can not spend all my time reading this book. The book is a simple object to formalize: just write on a file some aspects to calibrate the way to divide the pages to be addressed daily. Let’s formalize a book.</p>

<h3 id="example-of-book">Example of book</h3>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="w">  </span><span class="err">'Read</span><span class="w"> </span><span class="err">TCP/IP'</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="err">'totalPage'</span><span class="w">  </span><span class="p">:</span><span class="w"> </span><span class="mi">920</span><span class="p">,</span><span class="w">
    </span><span class="err">'pageForDay'</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">7</span><span class="p">,</span><span class="w">
    </span><span class="err">'pageForMinute'</span><span class="p">:</span><span class="w"> </span><span class="mf">0.20</span><span class="p">,</span><span class="w">
    </span><span class="err">'totalCompleted'</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">89</span><span class="p">,</span><span class="w">
    </span><span class="err">'totalRemaining'</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">920</span><span class="p">,</span><span class="w">
    </span><span class="err">'percCompleted'</span><span class="w">  </span><span class="p">:</span><span class="w"> </span><span class="mf">9.6</span><span class="p">,</span><span class="w">
  </span><span class="p">}</span></code></pre></figure>

<table>
  <thead>
    <tr>
      <th>Option</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>totalPage</td>
      <td>Total page of the book / Total <em>amount_of_time</em> you need to complete the activity</td>
    </tr>
    <tr>
      <td>pageForDay</td>
      <td>Number of page you want to read each day (you have to be honest with you, do not overdo)</td>
    </tr>
    <tr>
      <td>pageForMinute</td>
      <td>A text could be more difficult then others: how many page can you complete in a minute?</td>
    </tr>
    <tr>
      <td>totalCompleted</td>
      <td>The number of page you have completed (this value change over time)</td>
    </tr>
    <tr>
      <td>totalRemaining</td>
      <td>The remaining number of page (redudant, used only for clarity)</td>
    </tr>
    <tr>
      <td>percCompleted</td>
      <td>Percentage of completed activity, see lines above</td>
    </tr>
  </tbody>
</table>

<p>You can easily imagine the other formalizations within a dictionary whose keys are the titles of my activities.</p>

<h3 id="lets-code">Let’s code!</h3>
<p>First, remove work hours from your typical day: for instance, after 8 hours of work, mostly because I work outside of my city - I can spent only 1 hour and half for my personal interests. After that I do binge watching on Netflix / I go out with friends / generally I stop studying or working or do useful things XD
I also suggest you setup a fixed <em>maximum</em> number of different activities (books, etc) to assimilate what you read / do in a correct way. I use 4 as my <em>maximum</em>.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># setup start hour</span>
<span class="n">startHour</span> <span class="o">=</span> <span class="mi">18</span>
<span class="n">startDay</span>  <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>
<span class="n">startDay</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">hour</span><span class="o">=</span><span class="n">startHour</span><span class="p">,</span> <span class="n">minute</span><span class="o">=</span><span class="mo">00</span><span class="p">,</span> <span class="n">second</span><span class="o">=</span><span class="mo">00</span><span class="p">)</span>

<span class="c"># setup working minutes</span>
<span class="n">workingMinutes</span> <span class="o">=</span> <span class="mi">90</span>

<span class="c"># setup max number of different activities</span>
<span class="n">workingMaximumThemes</span> <span class="o">=</span> <span class="mi">4</span></code></pre></figure>

<p>After that, as long as each activity in the activity list contains activities that are not yet 100% complete, you only have to loop over your list of activities, pickup a random maximum number of activities, make some maths to update the number of page you have to read / more generally update the percentange of activity you can complete in the amount of minutes for the day, create the event and schedule it - I use GCal (I wrote a more complex solution <a href="https://github.com/made2591/google-task-gtd">here</a>, but you can use Trello (I wrote a lib available <a href="https://github.com/made2591/trello2google">here</a>, or Todoist, and so on.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># randomize keys in activities dict</span>
<span class="n">pickedUpActivities</span> <span class="o">=</span> <span class="n">activities</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
<span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">pickedUpActivities</span><span class="p">)</span>

<span class="c"># for a maximum amount of time in current day</span>
<span class="k">for</span> <span class="n">activityName</span> <span class="ow">in</span> <span class="n">pickedUpActivities</span><span class="p">[:</span><span class="n">workingMaximumThemes</span><span class="p">]:</span>

  <span class="c"># start day hour</span>
  <span class="n">startWorkHour</span> <span class="o">=</span> <span class="n">startDay</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">hour</span><span class="o">=</span><span class="n">startWorkHour</span><span class="p">,</span> <span class="n">minute</span><span class="o">=</span><span class="mo">00</span><span class="p">,</span> <span class="n">second</span><span class="o">=</span><span class="mo">00</span><span class="p">)</span>
  <span class="n">endWorkHour</span>   <span class="o">=</span> <span class="n">startWorkHour</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">workingMinutes</span><span class="o">/</span><span class="n">workingMaximumThemes</span><span class="p">))</span>

  <span class="c"># update properties of activity object in dict</span>
  <span class="n">activities</span><span class="p">[</span><span class="n">activityName</span><span class="p">][</span><span class="s">'totalCompleted'</span><span class="p">]</span> <span class="o">+=</span> <span class="n">activities</span><span class="p">[</span><span class="n">activityName</span><span class="p">][</span><span class="s">'pageForDay'</span><span class="p">]</span>
  <span class="o">...</span>

  <span class="c"># look in https://github.com/made2591/google-task-gtd for more detail</span>
  <span class="n">createGcalEvent</span><span class="p">(</span><span class="n">service</span><span class="p">,</span> <span class="n">calendar_id</span><span class="p">,</span> <span class="n">event_template</span><span class="p">)</span>

  <span class="c"># update for next task</span>
  <span class="n">startWorkHour</span> <span class="o">=</span> <span class="n">startDay</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">hour</span><span class="o">=</span><span class="n">startWorkHour</span><span class="p">,</span> <span class="n">minute</span><span class="o">=</span><span class="mo">00</span><span class="p">,</span> <span class="n">second</span><span class="o">=</span><span class="mo">00</span><span class="p">)</span>
  <span class="n">endWorkHour</span>   <span class="o">=</span> <span class="n">startWorkHour</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">workingMinutes</span><span class="o">/</span><span class="n">workingMaximumThemes</span><span class="p">))</span></code></pre></figure>

<p>You’ve done! The only things to do is inserting the loop above in another loop over the entire activity list and break this external loop when all activities contained are 100% complete. You may have notice that the properties <code class="highlighter-rouge">pageForMinute</code> is not used. When you have a very long and complex tasks list, sooner or later, following the illustrated algorithm, the list of activities to be completed yet will contain fewer activities than the maximum you can manage in one day. It is also true that the number of pages / percentage of activity that you want to complete daily is related to the number of minutes available in your average day <strong>and</strong> the maximum number of context switches (workingMaximumThemes) you are willing to do (if not, it should so fine tune your activity list). This is why I defined a <strong>speed</strong> (<code class="highlighter-rouge">pageForMinute</code>) parameter for each activity.</p>

<h3 id="adaptive-effort">Adaptive effort</h3>
<p>I generally use to <strong>decrease</strong> the workingMaximumThemes setting it to the <code class="highlighter-rouge">max(workingMaximumThemes, len(pickedUpActivities[:workingMaximumThemes]))</code>, <strong>increase</strong> the number [pageForDay to read / percentage of activity to complete] multiply this by a factor provided by the <strong>speed</strong> (<code class="highlighter-rouge">pageForMinute</code>) parameter of each activities.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># randomize keys in activities dict</span>
<span class="n">pickedUpActivities</span> <span class="o">=</span> <span class="n">activities</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
<span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">pickedUpActivities</span><span class="p">)</span>

<span class="c"># for a maximum amount of time in current day</span>
<span class="k">for</span> <span class="n">activityName</span> <span class="ow">in</span> <span class="n">pickedUpActivities</span><span class="p">[:</span><span class="n">workingMaximumThemes</span><span class="p">]:</span>

  <span class="c"># adaptive speed part</span>
  <span class="n">activities</span><span class="p">[</span><span class="n">activityName</span><span class="p">][</span><span class="s">'pageForDay'</span><span class="p">]</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="nb">max</span><span class="p">(</span>
    <span class="nb">int</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">workingMinutes</span><span class="o">/</span><span class="n">workingMaximumThemes</span><span class="p">)</span> <span class="o">*</span> <span class="n">book</span><span class="p">[</span><span class="s">'pageForMinute'</span><span class="p">])</span>
    <span class="nb">int</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">workingMinutes</span><span class="o">/</span><span class="n">workingMaximumThemes</span><span class="p">)</span> <span class="o">*</span> <span class="n">book</span><span class="p">[</span><span class="s">'pageForMinute'</span><span class="p">])</span>
  <span class="p">)</span>

  <span class="c"># start day hour</span>
  <span class="n">startWorkHour</span> <span class="o">=</span> <span class="n">startDay</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">hour</span><span class="o">=</span><span class="n">startWorkHour</span><span class="p">,</span> <span class="n">minute</span><span class="o">=</span><span class="mo">00</span><span class="p">,</span> <span class="n">second</span><span class="o">=</span><span class="mo">00</span><span class="p">)</span>
  <span class="n">endWorkHour</span>   <span class="o">=</span> <span class="n">startWorkHour</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">workingMinutes</span><span class="o">/</span><span class="n">workingMaximumThemes</span><span class="p">))</span>

  <span class="c"># update properties of activity object in dict</span>
  <span class="n">activities</span><span class="p">[</span><span class="n">activityName</span><span class="p">][</span><span class="s">'totalCompleted'</span><span class="p">]</span> <span class="o">+=</span> <span class="n">activities</span><span class="p">[</span><span class="n">activityName</span><span class="p">][</span><span class="s">'pageForDay'</span><span class="p">]</span>
  <span class="o">...</span>

  <span class="c"># look in https://github.com/made2591/google-task-gtd for more detail</span>
  <span class="n">createGcalEvent</span><span class="p">(</span><span class="n">service</span><span class="p">,</span> <span class="n">calendar_id</span><span class="p">,</span> <span class="n">event_template</span><span class="p">)</span>

  <span class="c"># update for next task</span>
  <span class="n">startWorkHour</span> <span class="o">=</span> <span class="n">startDay</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">hour</span><span class="o">=</span><span class="n">startWorkHour</span><span class="p">,</span> <span class="n">minute</span><span class="o">=</span><span class="mo">00</span><span class="p">,</span> <span class="n">second</span><span class="o">=</span><span class="mo">00</span><span class="p">)</span>
  <span class="n">endWorkHour</span>   <span class="o">=</span> <span class="n">startWorkHour</span> <span class="o">+</span> <span class="n">datetime</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">minutes</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="n">workingMinutes</span><span class="o">/</span><span class="n">workingMaximumThemes</span><span class="p">))</span></code></pre></figure>

<p>Let’s take an example: I have 90 minutes, and 3 activities (assuming 3 books to complete). One of the books has double the page of the first, the third has the same number of page of the second plus 50. I can handle 3 activities each days, I want to read 10 page for each books. In a situation of maximum entropy (uniformity of difficulty in reading, etc.), if in 30 minutes I read 10 page for a book, in 90 I read a total of 30 pages, 10 for each books. After a months, I finish the first book. What happens? It happens that I can handle more then 20 pages in 90 minutes. I have to change the number of pages I can read for each books: the best way is to distribute the time in a uniform way and multiply 45 minutes for the <strong>speed</strong> for each of the remaining books. You can of course custom the algorithm to handle different speed, different priorities, and so on: a draft of what I did manipulating <code class="highlighter-rouge">datetime</code> is <a href="https://github.com/made2591/google-task-gtd">here</a> (really bad code, sorry for that)</p>

<h3 id="plus">Plus</h3>
<p>To easily ignore holidays and access advanced features on objects from the datetime library I found it very useful <a href="https://github.com/peopledoc/workalendar">workalendar</a> and relativedelta (from dateutil)</p>

<p>Thank you for reading!</p>
]]></content:encoded>
        <excerpt:encoded><![CDATA[]]></excerpt:encoded>
        <wp:post_id>/posts/python-lifeplan</wp:post_id>
        <wp:post_date>2017-12-14T00:00:00+00:00</wp:post_date>
        <wp:post_date_gmt>2017-12-14T00:00:00+00:00</wp:post_date_gmt>
        <wp:post_name/>

        
        
          <category domain="post_tag" nicename="coding"><![CDATA[["coding",]]></category>
        
          <category domain="post_tag" nicename="algorithms"><![CDATA["algorithms",]]></category>
        
          <category domain="post_tag" nicename="python"><![CDATA["python",]]></category>
        
          <category domain="post_tag" nicename="scheduling"><![CDATA["scheduling",]]></category>
        
          <category domain="post_tag" nicename="task"><![CDATA["task"]]]></category>
        

        <wp:status>publish</wp:status>
        <wp:post_parent>0</wp:post_parent>
        <wp:menu_order>0</wp:menu_order>
        <wp:post_type>post</wp:post_type>
        <wp:post_password/>
        <wp:is_sticky/>
      </item>
    
  </channel>
</rss>
